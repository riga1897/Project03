
"""
–ú–æ–¥—É–ª—å –¥–ª—è —Å–±–æ—Ä–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –≤–∞–∫–∞–Ω—Å–∏—è–º
"""

import logging
from typing import List, Dict, Any
from collections import defaultdict

logger = logging.getLogger(__name__)


class VacancyStats:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–±–æ—Ä–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –≤–∞–∫–∞–Ω—Å–∏—è–º"""

    @staticmethod
    def get_company_distribution(vacancies: List[Dict[str, Any]]) -> Dict[str, int]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–π –ø–æ –∫–æ–º–ø–∞–Ω–∏—è–º
        
        Args:
            vacancies: –°–ø–∏—Å–æ–∫ –≤–∞–∫–∞–Ω—Å–∏–π
            
        Returns:
            Dict[str, int]: –°–ª–æ–≤–∞—Ä—å —Å –∫–æ–º–ø–∞–Ω–∏—è–º–∏ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≤–∞–∫–∞–Ω—Å–∏–π
        """
        company_stats = defaultdict(int)
        
        for vacancy in vacancies:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
            company_name = VacancyStats._extract_company_name(vacancy)
            if company_name:
                company_stats[company_name] += 1
                
        return dict(company_stats)
    
    @staticmethod
    def _extract_company_name(vacancy: Dict[str, Any]) -> str:
        """
        –ò–∑–≤–ª–µ—á—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–∏
        
        Args:
            vacancy: –î–∞–Ω–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏
            
        Returns:
            str: –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –∏–ª–∏ "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è"
        """
        # –î–ª—è SuperJob
        if "firm_name" in vacancy:
            return vacancy.get("firm_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è")
        
        # –î–ª—è HeadHunter
        if "employer" in vacancy:
            employer = vacancy["employer"]
            if isinstance(employer, dict):
                return employer.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è")
            elif isinstance(employer, str):
                return employer
                
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è"
    
    @staticmethod
    def display_company_stats(vacancies: List[Dict[str, Any]], source_name: str = ""):
        """
        –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–æ–º–ø–∞–Ω–∏—è–º
        
        Args:
            vacancies: –°–ø–∏—Å–æ–∫ –≤–∞–∫–∞–Ω—Å–∏–π
            source_name: –ù–∞–∑–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
        """
        if not vacancies:
            print("–ù–µ—Ç –≤–∞–∫–∞–Ω—Å–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
            return
            
        company_stats = VacancyStats.get_company_distribution(vacancies)
        
        if not company_stats:
            print("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–ø–∞–Ω–∏—è—Ö")
            return
            
        print(f"\nüìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–π –ø–æ –∫–æ–º–ø–∞–Ω–∏—è–º{' (' + source_name + ')' if source_name else ''}:")
        print(f"–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ {len(vacancies)} –≤–∞–∫–∞–Ω—Å–∏–π –æ—Ç {len(company_stats)} –∫–æ–º–ø–∞–Ω–∏–π")
        print("-" * 60)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –≤–∞–∫–∞–Ω—Å–∏–π (—É–±—ã–≤–∞–Ω–∏–µ)
        sorted_companies = sorted(company_stats.items(), key=lambda x: x[1], reverse=True)
        
        for company, count in sorted_companies:
            percentage = (count / len(vacancies)) * 100
            print(f"  {company}: {count} –≤–∞–∫–∞–Ω—Å–∏–π ({percentage:.1f}%)")
        
        print("-" * 60)
    
    @staticmethod
    def display_combined_stats(hh_vacancies: List[Dict[str, Any]], sj_vacancies: List[Dict[str, Any]]):
        """
        –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–æ–º–ø–∞–Ω–∏—è–º –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        
        Args:
            hh_vacancies: –í–∞–∫–∞–Ω—Å–∏–∏ —Å HH.ru
            sj_vacancies: –í–∞–∫–∞–Ω—Å–∏–∏ —Å SuperJob
        """
        print("\n" + "=" * 80)
        print("üìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ò–°–¢–û–ß–ù–ò–ö–ê–ú")
        print("=" * 80)
        
        total_hh = len(hh_vacancies)
        total_sj = len(sj_vacancies)
        total_all = total_hh + total_sj
        
        if total_all == 0:
            print("–ù–µ—Ç –≤–∞–∫–∞–Ω—Å–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
            return
        
        print(f"HH.ru: {total_hh} –≤–∞–∫–∞–Ω—Å–∏–π ({(total_hh/total_all)*100:.1f}%)")
        print(f"SuperJob: {total_sj} –≤–∞–∫–∞–Ω—Å–∏–π ({(total_sj/total_all)*100:.1f}%)")
        print(f"–í—Å–µ–≥–æ: {total_all} –≤–∞–∫–∞–Ω—Å–∏–π")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞–∂–¥–æ–º—É –∏—Å—Ç–æ—á–Ω–∏–∫—É –æ—Ç–¥–µ–ª—å–Ω–æ
        if hh_vacancies:
            VacancyStats.display_company_stats(hh_vacancies, "HH.ru")
            
        if sj_vacancies:
            VacancyStats.display_company_stats(sj_vacancies, "SuperJob")
            
        # –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–æ–º–ø–∞–Ω–∏—è–º
        if total_all > 0:
            all_vacancies = hh_vacancies + sj_vacancies
            VacancyStats.display_company_stats(all_vacancies, "–í—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏")
