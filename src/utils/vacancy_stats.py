
"""
–ú–æ–¥—É–ª—å –¥–ª—è —Å–±–æ—Ä–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –≤–∞–∫–∞–Ω—Å–∏—è–º
"""

import logging
from typing import List, Dict, Any
from collections import defaultdict

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ DEBUG —É—Ä–æ–≤–µ–Ω—å –¥–ª—è —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)


class VacancyStats:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–±–æ—Ä–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –≤–∞–∫–∞–Ω—Å–∏—è–º"""

    @staticmethod
    def get_company_distribution(vacancies: List[Dict[str, Any]]) -> Dict[str, int]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–π –ø–æ –∫–æ–º–ø–∞–Ω–∏—è–º
        
        Args:
            vacancies: –°–ø–∏—Å–æ–∫ –≤–∞–∫–∞–Ω—Å–∏–π
            
        Returns:
            Dict[str, int]: –°–ª–æ–≤–∞—Ä—å —Å –∫–æ–º–ø–∞–Ω–∏—è–º–∏ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≤–∞–∫–∞–Ω—Å–∏–π
        """
        company_stats = defaultdict(int)
        
        for i, vacancy in enumerate(vacancies):
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
            company_name = VacancyStats._extract_company_name(vacancy)
            
            # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –ø–µ—Ä–≤—ã—Ö –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –≤–∞–∫–∞–Ω—Å–∏–π
            if i < 5:
                logger.debug(f"Vacancy {i}: type={type(vacancy)}")
                if isinstance(vacancy, dict):
                    logger.debug(f"  Keys: {list(vacancy.keys())}")
                    if "employer" in vacancy:
                        logger.debug(f"  Employer: {vacancy['employer']}")
                    if "raw_data" in vacancy:
                        logger.debug(f"  Raw data keys: {list(vacancy['raw_data'].keys()) if isinstance(vacancy['raw_data'], dict) else 'not dict'}")
                        if isinstance(vacancy['raw_data'], dict) and "employer" in vacancy['raw_data']:
                            logger.debug(f"  Raw data employer: {vacancy['raw_data']['employer']}")
                else:
                    logger.debug(f"  Has employer attr: {hasattr(vacancy, 'employer')}")
                    if hasattr(vacancy, 'employer'):
                        logger.debug(f"  Employer: {vacancy.employer}")
                    logger.debug(f"  Has raw_data attr: {hasattr(vacancy, 'raw_data')}")
                    if hasattr(vacancy, 'raw_data'):
                        logger.debug(f"  Raw data: {vacancy.raw_data}")
                logger.debug(f"  Extracted company: {company_name}")
            
            if company_name:
                company_stats[company_name] += 1
                
        return dict(company_stats)
    
    @staticmethod
    def _extract_company_name(vacancy: Dict[str, Any]) -> str:
        """
        –ò–∑–≤–ª–µ—á—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–∏
        
        Args:
            vacancy: –î–∞–Ω–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏
            
        Returns:
            str: –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –∏–ª–∏ "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è"
        """
        # –ü–†–ò–û–†–ò–¢–ï–¢ 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º raw_data.employer (–æ—Å–Ω–æ–≤–Ω–æ–π –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–ª—è HH)
        if hasattr(vacancy, 'raw_data') and vacancy.raw_data:
            raw_data = vacancy.raw_data
            if isinstance(raw_data, dict) and "employer" in raw_data:
                employer = raw_data["employer"]
                if isinstance(employer, dict) and "name" in employer:
                    return employer["name"]
                elif isinstance(employer, str):
                    return employer
        
        # –ü–†–ò–û–†–ò–¢–ï–¢ 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—ä–µ–∫—Ç Vacancy.employer
        if hasattr(vacancy, 'employer'):
            employer = vacancy.employer
            if isinstance(employer, dict):
                return employer.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è")
            elif isinstance(employer, str):
                return employer
            elif employer:
                return str(employer)
        
        # –ü–†–ò–û–†–ò–¢–ï–¢ 3: –î–ª—è —Å–ª–æ–≤–∞—Ä–µ–π - HeadHunter –ø—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø
        if isinstance(vacancy, dict) and "employer" in vacancy:
            employer = vacancy["employer"]
            if isinstance(employer, dict) and "name" in employer:
                return employer["name"]
            elif isinstance(employer, str):
                return employer
        
        # –ü–†–ò–û–†–ò–¢–ï–¢ 4: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è raw_data –∫–∞–∫ —Å–ª–æ–≤–∞—Ä—å
        if isinstance(vacancy, dict) and "raw_data" in vacancy:
            raw_data = vacancy["raw_data"]
            if isinstance(raw_data, dict) and "employer" in raw_data:
                employer = raw_data["employer"]
                if isinstance(employer, dict) and "name" in employer:
                    return employer["name"]
                elif isinstance(employer, str):
                    return employer
        
        # –ü–†–ò–û–†–ò–¢–ï–¢ 5: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ç—Ä–∏–±—É—Ç _employer_name (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ –ë–î)
        if hasattr(vacancy, '_employer_name') and vacancy._employer_name:
            return vacancy._employer_name
            
        # –ü–†–ò–û–†–ò–¢–ï–¢ 6: –î–ª—è —Å–ª–æ–≤–∞—Ä–µ–π - SuperJob
        if isinstance(vacancy, dict) and "firm_name" in vacancy:
            return vacancy.get("firm_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è")
        
        # –ü–†–ò–û–†–ò–¢–ï–¢ 7: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä—è–º—ã–µ –ø–æ–ª—è HH –≤ —Å–ª—É—á–∞–µ –µ—Å–ª–∏ —ç—Ç–æ —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
        if isinstance(vacancy, dict):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–ª–µ–π –∫–æ–º–ø–∞–Ω–∏–∏ –≤ HH
            for field in ["company_name", "company", "employer_name"]:
                if field in vacancy and vacancy[field]:
                    company = vacancy[field]
                    if isinstance(company, dict):
                        return company.get("name", str(company))
                    return str(company)
                
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è"
    
    @staticmethod
    def display_company_stats(vacancies: List[Dict[str, Any]], source_name: str = ""):
        """
        –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–æ–º–ø–∞–Ω–∏—è–º
        
        Args:
            vacancies: –°–ø–∏—Å–æ–∫ –≤–∞–∫–∞–Ω—Å–∏–π
            source_name: –ù–∞–∑–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
        """
        if not vacancies:
            print("–ù–µ—Ç –≤–∞–∫–∞–Ω—Å–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
            return
            
        company_stats = VacancyStats.get_company_distribution(vacancies)
        
        if not company_stats:
            print("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–ø–∞–Ω–∏—è—Ö")
            return
            
        VacancyStats._display_company_distribution(company_stats, len(vacancies), source_name)
    
    @staticmethod
    def _display_company_distribution(company_stats: Dict[str, int], total_vacancies: int, source_name: str = ""):
        """
        –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–π
        
        Args:
            company_stats: –°–ª–æ–≤–∞—Ä—å —Å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –∫–æ–º–ø–∞–Ω–∏–π
            total_vacancies: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–∫–∞–Ω—Å–∏–π
            source_name: –ù–∞–∑–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
        """
        print(f"\nüìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–π –ø–æ –∫–æ–º–ø–∞–Ω–∏—è–º{' (' + source_name + ')' if source_name else ''}:")
        print(f"–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ {total_vacancies} –≤–∞–∫–∞–Ω—Å–∏–π –æ—Ç {len(company_stats)} –∫–æ–º–ø–∞–Ω–∏–π")
        print("-" * 60)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –≤–∞–∫–∞–Ω—Å–∏–π (—É–±—ã–≤–∞–Ω–∏–µ)
        sorted_companies = sorted(company_stats.items(), key=lambda x: x[1], reverse=True)
        
        for company, count in sorted_companies:
            percentage = (count / total_vacancies) * 100
            print(f"  {company}: {count} –≤–∞–∫–∞–Ω—Å–∏–π ({percentage:.1f}%)")
        
        print("-" * 60)
    
    @staticmethod
    def display_source_stats(hh_vacancies: List[Dict[str, Any]], sj_vacancies: List[Dict[str, Any]]):
        """
        –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞–∂–¥–æ–º—É –∏—Å—Ç–æ—á–Ω–∏–∫—É –æ—Ç–¥–µ–ª—å–Ω–æ
        
        Args:
            hh_vacancies: –í–∞–∫–∞–Ω—Å–∏–∏ —Å HH.ru
            sj_vacancies: –í–∞–∫–∞–Ω—Å–∏–∏ —Å SuperJob
        """
        total_hh = len(hh_vacancies)
        total_sj = len(sj_vacancies)
        total_all = total_hh + total_sj
        
        if total_all == 0:
            print("–ù–µ—Ç –≤–∞–∫–∞–Ω—Å–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
            return
        
        print(f"\nüìä –ò—Ç–æ–≥–æ –Ω–∞–π–¥–µ–Ω–æ: {total_all} –≤–∞–∫–∞–Ω—Å–∏–π")
        print(f"HH.ru: {total_hh} –≤–∞–∫–∞–Ω—Å–∏–π")
        print(f"SuperJob: {total_sj} –≤–∞–∫–∞–Ω—Å–∏–π")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞–∂–¥–æ–º—É –∏—Å—Ç–æ—á–Ω–∏–∫—É –æ—Ç–¥–µ–ª—å–Ω–æ
        if hh_vacancies:
            VacancyStats.display_company_stats(hh_vacancies, "HH.ru")
            
        if sj_vacancies:
            VacancyStats.display_company_stats(sj_vacancies, "SuperJob")
