
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–ª–∞—Å—Å–æ–º DBManager.

–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –º–µ—Ç–æ–¥–æ–≤ DBManager
—Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –ø—Ä–æ–µ–∫—Ç–∞.
"""

import logging
from typing import List, Dict, Any
from src.storage.db_manager import DBManager
from src.config.target_companies import TARGET_COMPANIES

logger = logging.getLogger(__name__)


def demo_companies_and_vacancies_count(db_manager: DBManager) -> None:
    """
    –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –º–µ—Ç–æ–¥–∞ get_companies_and_vacancies_count()
    """
    print("\n" + "="*60)
    print("–î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø: –ö–æ–º–ø–∞–Ω–∏–∏ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–∫–∞–Ω—Å–∏–π")
    print("="*60)
    
    companies_stats = db_manager.get_companies_and_vacancies_count()
    
    if not companies_stats:
        print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∫–æ–º–ø–∞–Ω–∏—è—Ö –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        return
    
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(companies_stats)} –∫–æ–º–ø–∞–Ω–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:")
    print()
    
    for i, company in enumerate(companies_stats[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-10
        print(f"{i:2d}. {company['company_name']:<40} - {company['vacancy_count']:>3} –≤–∞–∫–∞–Ω—Å–∏–π")
    
    if len(companies_stats) > 10:
        print(f"... –∏ –µ—â–µ {len(companies_stats) - 10} –∫–æ–º–ø–∞–Ω–∏–π")


def demo_all_vacancies(db_manager: DBManager) -> None:
    """
    –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –º–µ—Ç–æ–¥–∞ get_all_vacancies()
    """
    print("\n" + "="*60)
    print("–î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø: –í—Å–µ –≤–∞–∫–∞–Ω—Å–∏–∏")
    print("="*60)
    
    all_vacancies = db_manager.get_all_vacancies()
    
    if not all_vacancies:
        print("‚ùå –ù–µ—Ç –≤–∞–∫–∞–Ω—Å–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        return
    
    print(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(all_vacancies)} –≤–∞–∫–∞–Ω—Å–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:")
    print()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –≤–∞–∫–∞–Ω—Å–∏–π
    for i, vacancy in enumerate(all_vacancies[:5], 1):
        print(f"{i}. {vacancy['vacancy_title']}")
        print(f"   –ö–æ–º–ø–∞–Ω–∏—è: {vacancy['company_name']}")
        print(f"   –ó–∞—Ä–ø–ª–∞—Ç–∞: {vacancy['salary_info']}")
        print(f"   –°—Å—ã–ª–∫–∞: {vacancy['vacancy_url']}")
        print()
    
    if len(all_vacancies) > 5:
        print(f"... –∏ –µ—â–µ {len(all_vacancies) - 5} –≤–∞–∫–∞–Ω—Å–∏–π")


def demo_avg_salary(db_manager: DBManager) -> None:
    """
    –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –º–µ—Ç–æ–¥–∞ get_avg_salary()
    """
    print("\n" + "="*60)
    print("–î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø: –°—Ä–µ–¥–Ω—è—è –∑–∞—Ä–ø–ª–∞—Ç–∞")
    print("="*60)
    
    avg_salary = db_manager.get_avg_salary()
    
    if avg_salary is None:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã—á–∏—Å–ª–∏—Ç—å —Å—Ä–µ–¥–Ω—é—é –∑–∞—Ä–ø–ª–∞—Ç—É (–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö)")
        return
    
    print(f"üí∞ –°—Ä–µ–¥–Ω—è—è –∑–∞—Ä–ø–ª–∞—Ç–∞ –ø–æ –≤—Å–µ–º –≤–∞–∫–∞–Ω—Å–∏—è–º: {avg_salary:,.0f} —Ä—É–±.")
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    stats = db_manager.get_database_stats()
    if stats:
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   - –í—Å–µ–≥–æ –≤–∞–∫–∞–Ω—Å–∏–π: {stats.get('total_vacancies', 0)}")
        print(f"   - –° —É–∫–∞–∑–∞–Ω–Ω–æ–π –∑–∞—Ä–ø–ª–∞—Ç–æ–π: {stats.get('vacancies_with_salary', 0)}")
        print(f"   - –ë–µ–∑ –∑–∞—Ä–ø–ª–∞—Ç—ã: {stats.get('vacancies_without_salary', 0)}")


def demo_vacancies_with_higher_salary(db_manager: DBManager) -> None:
    """
    –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –º–µ—Ç–æ–¥–∞ get_vacancies_with_higher_salary()
    """
    print("\n" + "="*60)
    print("–î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø: –í–∞–∫–∞–Ω—Å–∏–∏ —Å –∑–∞—Ä–ø–ª–∞—Ç–æ–π –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–π")
    print("="*60)
    
    avg_salary = db_manager.get_avg_salary()
    if avg_salary is None:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã—á–∏—Å–ª–∏—Ç—å —Å—Ä–µ–¥–Ω—é—é –∑–∞—Ä–ø–ª–∞—Ç—É")
        return
    
    high_salary_vacancies = db_manager.get_vacancies_with_higher_salary()
    
    if not high_salary_vacancies:
        print("‚ùå –ù–µ—Ç –≤–∞–∫–∞–Ω—Å–∏–π —Å –∑–∞—Ä–ø–ª–∞—Ç–æ–π –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–π")
        return
    
    print(f"üìà –°—Ä–µ–¥–Ω—è—è –∑–∞—Ä–ø–ª–∞—Ç–∞: {avg_salary:,.0f} —Ä—É–±.")
    print(f"üéØ –ù–∞–π–¥–µ–Ω–æ {len(high_salary_vacancies)} –≤–∞–∫–∞–Ω—Å–∏–π —Å –∑–∞—Ä–ø–ª–∞—Ç–æ–π –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–π:")
    print()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-5 –≤–∞–∫–∞–Ω—Å–∏–π —Å –≤—ã—Å–æ–∫–æ–π –∑–∞—Ä–ø–ª–∞—Ç–æ–π
    for i, vacancy in enumerate(high_salary_vacancies[:5], 1):
        print(f"{i}. {vacancy['vacancy_title']}")
        print(f"   –ö–æ–º–ø–∞–Ω–∏—è: {vacancy['company_name']}")
        print(f"   –ó–∞—Ä–ø–ª–∞—Ç–∞: {vacancy['salary_info']}")
        print(f"   –†–∞—Å—á–µ—Ç–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞: {vacancy['calculated_salary']:,.0f} —Ä—É–±.")
        print()
    
    if len(high_salary_vacancies) > 5:
        print(f"... –∏ –µ—â–µ {len(high_salary_vacancies) - 5} –≤–∞–∫–∞–Ω—Å–∏–π")


def demo_vacancies_with_keyword(db_manager: DBManager, keyword: str = "Python") -> None:
    """
    –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –º–µ—Ç–æ–¥–∞ get_vacancies_with_keyword()
    """
    print("\n" + "="*60)
    print(f"–î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø: –ü–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É '{keyword}'")
    print("="*60)
    
    keyword_vacancies = db_manager.get_vacancies_with_keyword(keyword)
    
    if not keyword_vacancies:
        print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–∫–∞–Ω—Å–∏–π —Å –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–æ–º '{keyword}'")
        return
    
    print(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(keyword_vacancies)} –≤–∞–∫–∞–Ω—Å–∏–π —Å –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–æ–º '{keyword}':")
    print()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π
    for i, vacancy in enumerate(keyword_vacancies[:5], 1):
        print(f"{i}. {vacancy['vacancy_title']}")
        print(f"   –ö–æ–º–ø–∞–Ω–∏—è: {vacancy['company_name']}")
        print(f"   –ó–∞—Ä–ø–ª–∞—Ç–∞: {vacancy['salary_info']}")
        print()
    
    if len(keyword_vacancies) > 5:
        print(f"... –∏ –µ—â–µ {len(keyword_vacancies) - 5} –≤–∞–∫–∞–Ω—Å–∏–π")


def demo_database_stats(db_manager: DBManager) -> None:
    """
    –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    """
    print("\n" + "="*60)
    print("–î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø: –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    print("="*60)
    
    stats = db_manager.get_database_stats()
    
    if not stats:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        return
    
    print("üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:")
    print(f"   ‚Ä¢ –í—Å–µ–≥–æ –≤–∞–∫–∞–Ω—Å–∏–π: {stats.get('total_vacancies', 0):,}")
    print(f"   ‚Ä¢ –í–∞–∫–∞–Ω—Å–∏–π —Å –∑–∞—Ä–ø–ª–∞—Ç–æ–π: {stats.get('vacancies_with_salary', 0):,}")
    print(f"   ‚Ä¢ –í–∞–∫–∞–Ω—Å–∏–π –±–µ–∑ –∑–∞—Ä–ø–ª–∞—Ç—ã: {stats.get('vacancies_without_salary', 0):,}")
    print(f"   ‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π: {stats.get('unique_companies', 0):,}")
    
    if stats.get('total_vacancies', 0) > 0:
        percentage_with_salary = (stats.get('vacancies_with_salary', 0) / stats.get('total_vacancies', 1)) * 100
        print(f"   ‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –≤–∞–∫–∞–Ω—Å–∏–π —Å –∑–∞—Ä–ø–ª–∞—Ç–æ–π: {percentage_with_salary:.1f}%")


def demo_target_companies(db_manager: DBManager) -> None:
    """
    –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å —Ü–µ–ª–µ–≤—ã–º–∏ –∫–æ–º–ø–∞–Ω–∏—è–º–∏
    """
    print("\n" + "="*60)
    print("–î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø: –¶–µ–ª–µ–≤—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏")
    print("="*60)
    
    print(f"üéØ –ù–∞—Å—Ç—Ä–æ–µ–Ω–æ {len(TARGET_COMPANIES)} —Ü–µ–ª–µ–≤—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π:")
    print()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Å–µ–º –∫–æ–º–ø–∞–Ω–∏—è–º
    companies_stats = db_manager.get_companies_and_vacancies_count()
    companies_dict = {comp['company_name']: comp['vacancy_count'] for comp in companies_stats}
    
    found_companies = 0
    total_vacancies_from_targets = 0
    
    for i, company in enumerate(TARGET_COMPANIES, 1):
        name = company['name']
        hh_id = company['hh_id']
        description = company['description']
        
        # –ò—â–µ–º –∫–æ–º–ø–∞–Ω–∏—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (–≤–æ–∑–º–æ–∂–Ω—ã –≤–∞—Ä–∏–∞—Ü–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏–π)
        vacancy_count = 0
        for db_company_name, count in companies_dict.items():
            if name.lower() in db_company_name.lower() or db_company_name.lower() in name.lower():
                vacancy_count = count
                found_companies += 1
                total_vacancies_from_targets += count
                break
        
        status = "‚úÖ" if vacancy_count > 0 else "‚ùå"
        print(f"{i:2d}. {status} {name} (ID: {hh_id})")
        print(f"     üìù {description}")
        print(f"     üìä –í–∞–∫–∞–Ω—Å–∏–π –≤ –ë–î: {vacancy_count}")
        print()
    
    print(f"üìà –ò—Ç–æ–≥–æ:")
    print(f"   ‚Ä¢ –ù–∞–π–¥–µ–Ω–æ –∫–æ–º–ø–∞–Ω–∏–π –≤ –ë–î: {found_companies} –∏–∑ {len(TARGET_COMPANIES)}")
    print(f"   ‚Ä¢ –í–∞–∫–∞–Ω—Å–∏–π –æ—Ç —Ü–µ–ª–µ–≤—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π: {total_vacancies_from_targets}")


def run_all_demos(db_manager: DBManager) -> None:
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –º–µ—Ç–æ–¥–æ–≤ DBManager
    """
    print("üöÄ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –í–°–ï–• –ú–ï–¢–û–î–û–í –ö–õ–ê–°–°–ê DBManager")
    print("="*80)
    
    try:
        demo_database_stats(db_manager)
        demo_companies_and_vacancies_count(db_manager)
        demo_avg_salary(db_manager)
        demo_vacancies_with_higher_salary(db_manager)
        demo_vacancies_with_keyword(db_manager, "Python")
        demo_all_vacancies(db_manager)
        demo_target_companies(db_manager)
        
        print("\n" + "="*80)
        print("‚úÖ –í–°–ï –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–ò –ó–ê–í–ï–†–®–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("="*80)
        
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê –ü–†–ò –í–´–ü–û–õ–ù–ï–ù–ò–ò –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–ò: {e}")
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ DBManager: {e}")


if __name__ == "__main__":
    # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    logging.basicConfig(level=logging.INFO)
    
    db_manager = DBManager()
    run_all_demos(db_manager)
