
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–ª–∞—Å—Å–æ–º DBManager.

–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –º–µ—Ç–æ–¥–æ–≤ DBManager
—Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –ø—Ä–æ–µ–∫—Ç–∞.
"""

import logging
from typing import List, Dict, Any
from src.storage.db_manager import DBManager
from src.config.target_companies import TARGET_COMPANIES

logger = logging.getLogger(__name__)


def demo_companies_and_vacancies_count(db_manager: DBManager) -> None:
    """
    –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –º–µ—Ç–æ–¥–∞ get_companies_and_vacancies_count()
    """
    print("\n" + "="*60)
    print("–î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø: –¶–µ–ª–µ–≤—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–∫–∞–Ω—Å–∏–π")
    print("="*60)
    
    companies_stats = db_manager.get_companies_and_vacancies_count()
    
    if not companies_stats:
        print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ü–µ–ª–µ–≤—ã—Ö –∫–æ–º–ø–∞–Ω–∏—è—Ö –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        return
    
    print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ {len(TARGET_COMPANIES)} —Ü–µ–ª–µ–≤—ã–º –∫–æ–º–ø–∞–Ω–∏—è–º:")
    print()
    print(f"{'‚Ññ':<3} {'–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏':<40} {'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–∫–∞–Ω—Å–∏–π':<20}")
    print("-" * 70)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ 15 —Ü–µ–ª–µ–≤—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π
    for i, (company_name, vacancy_count) in enumerate(companies_stats, 1):
        status = "‚úÖ" if vacancy_count > 0 else "‚ùå"
        print(f"{i:<3} {status} {company_name:<37} {vacancy_count:<20}")
    
    total_vacancies = sum(count for _, count in companies_stats)
    companies_with_vacancies = sum(1 for _, count in companies_stats if count > 0)
    
    print()
    print(f"üìà –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"   ‚Ä¢ –ö–æ–º–ø–∞–Ω–∏–π —Å –≤–∞–∫–∞–Ω—Å–∏—è–º–∏: {companies_with_vacancies} –∏–∑ {len(companies_stats)}")
    print(f"   ‚Ä¢ –í—Å–µ–≥–æ –≤–∞–∫–∞–Ω—Å–∏–π –æ—Ç —Ü–µ–ª–µ–≤—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π: {total_vacancies}")
    
    if total_vacancies == 0:
        print("‚ö†Ô∏è  –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –í—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π –æ—Ç —Ü–µ–ª–µ–≤—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")
    
    print(f"\n–í—Å–µ–≥–æ —Ü–µ–ª–µ–≤—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π: {len(companies_stats)}")
def demo_all_vacancies(db_manager: DBManager) -> None:
    """
    –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –º–µ—Ç–æ–¥–∞ get_all_vacancies()
    """
    print("\n" + "="*60)
    print("–î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø: –í—Å–µ –≤–∞–∫–∞–Ω—Å–∏–∏")
    print("="*60)
    
    all_vacancies = db_manager.get_all_vacancies()
    
    if not all_vacancies:
        print("‚ùå –ù–µ—Ç –≤–∞–∫–∞–Ω—Å–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        return
    
    print(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(all_vacancies)} –≤–∞–∫–∞–Ω—Å–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:")
    print()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –≤–∞–∫–∞–Ω—Å–∏–π
    for i, vacancy in enumerate(all_vacancies[:5], 1):
        print(f"{i}. {vacancy['vacancy_title']}")
        print(f"   –ö–æ–º–ø–∞–Ω–∏—è: {vacancy['company_name']}")
        print(f"   –ó–∞—Ä–ø–ª–∞—Ç–∞: {vacancy['salary_info']}")
        print(f"   –°—Å—ã–ª–∫–∞: {vacancy['vacancy_url']}")
        print()
    
    if len(all_vacancies) > 5:
        print(f"... –∏ –µ—â–µ {len(all_vacancies) - 5} –≤–∞–∫–∞–Ω—Å–∏–π")


def demo_avg_salary(db_manager: DBManager) -> None:
    """
    –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –º–µ—Ç–æ–¥–∞ get_avg_salary()
    """
    print("\n" + "="*60)
    print("–î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø: –°—Ä–µ–¥–Ω—è—è –∑–∞—Ä–ø–ª–∞—Ç–∞")
    print("="*60)
    
    avg_salary = db_manager.get_avg_salary()
    
    if avg_salary is None:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã—á–∏—Å–ª–∏—Ç—å —Å—Ä–µ–¥–Ω—é—é –∑–∞—Ä–ø–ª–∞—Ç—É (–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö)")
        return
    
    print(f"üí∞ –°—Ä–µ–¥–Ω—è—è –∑–∞—Ä–ø–ª–∞—Ç–∞ –ø–æ –≤—Å–µ–º –≤–∞–∫–∞–Ω—Å–∏—è–º: {avg_salary:,.0f} —Ä—É–±.")
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    stats = db_manager.get_database_stats()
    if stats:
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   - –í—Å–µ–≥–æ –≤–∞–∫–∞–Ω—Å–∏–π: {stats.get('total_vacancies', 0)}")
        print(f"   - –° —É–∫–∞–∑–∞–Ω–Ω–æ–π –∑–∞—Ä–ø–ª–∞—Ç–æ–π: {stats.get('vacancies_with_salary', 0)}")
        print(f"   - –ë–µ–∑ –∑–∞—Ä–ø–ª–∞—Ç—ã: {stats.get('vacancies_without_salary', 0)}")


def demo_vacancies_with_higher_salary(db_manager: DBManager) -> None:
    """
    –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –º–µ—Ç–æ–¥–∞ get_vacancies_with_higher_salary()
    """
    print("\n" + "="*60)
    print("–î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø: –í–∞–∫–∞–Ω—Å–∏–∏ —Å –∑–∞—Ä–ø–ª–∞—Ç–æ–π –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–π")
    print("="*60)
    
    avg_salary = db_manager.get_avg_salary()
    if avg_salary is None:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã—á–∏—Å–ª–∏—Ç—å —Å—Ä–µ–¥–Ω—é—é –∑–∞—Ä–ø–ª–∞—Ç—É")
        return
    
    high_salary_vacancies = db_manager.get_vacancies_with_higher_salary()
    
    if not high_salary_vacancies:
        print("‚ùå –ù–µ—Ç –≤–∞–∫–∞–Ω—Å–∏–π —Å –∑–∞—Ä–ø–ª–∞—Ç–æ–π –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–π")
        return
    
    print(f"üìà –°—Ä–µ–¥–Ω—è—è –∑–∞—Ä–ø–ª–∞—Ç–∞: {avg_salary:,.0f} —Ä—É–±.")
    print(f"üéØ –ù–∞–π–¥–µ–Ω–æ {len(high_salary_vacancies)} –≤–∞–∫–∞–Ω—Å–∏–π —Å –∑–∞—Ä–ø–ª–∞—Ç–æ–π –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–π:")
    print()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-5 –≤–∞–∫–∞–Ω—Å–∏–π —Å –≤—ã—Å–æ–∫–æ–π –∑–∞—Ä–ø–ª–∞—Ç–æ–π
    for i, vacancy in enumerate(high_salary_vacancies[:5], 1):
        print(f"{i}. {vacancy['vacancy_title']}")
        print(f"   –ö–æ–º–ø–∞–Ω–∏—è: {vacancy['company_name']}")
        print(f"   –ó–∞—Ä–ø–ª–∞—Ç–∞: {vacancy['salary_info']}")
        print(f"   –†–∞—Å—á–µ—Ç–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞: {vacancy['calculated_salary']:,.0f} —Ä—É–±.")
        print()
    
    if len(high_salary_vacancies) > 5:
        print(f"... –∏ –µ—â–µ {len(high_salary_vacancies) - 5} –≤–∞–∫–∞–Ω—Å–∏–π")


def demo_vacancies_with_keyword(db_manager: DBManager, keyword: str = "Python") -> None:
    """
    –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –º–µ—Ç–æ–¥–∞ get_vacancies_with_keyword()
    """
    print("\n" + "="*60)
    print(f"–î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø: –ü–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É '{keyword}'")
    print("="*60)
    
    keyword_vacancies = db_manager.get_vacancies_with_keyword(keyword)
    
    if not keyword_vacancies:
        print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–∫–∞–Ω—Å–∏–π —Å –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–æ–º '{keyword}'")
        return
    
    print(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(keyword_vacancies)} –≤–∞–∫–∞–Ω—Å–∏–π —Å –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–æ–º '{keyword}':")
    print()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π
    for i, vacancy in enumerate(keyword_vacancies[:5], 1):
        print(f"{i}. {vacancy['vacancy_title']}")
        print(f"   –ö–æ–º–ø–∞–Ω–∏—è: {vacancy['company_name']}")
        print(f"   –ó–∞—Ä–ø–ª–∞—Ç–∞: {vacancy['salary_info']}")
        print()
    
    if len(keyword_vacancies) > 5:
        print(f"... –∏ –µ—â–µ {len(keyword_vacancies) - 5} –≤–∞–∫–∞–Ω—Å–∏–π")


def demo_database_stats(db_manager: DBManager) -> None:
    """
    –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    """
    print("\n" + "="*60)
    print("–î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø: –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    print("="*60)
    
    stats = db_manager.get_database_stats()
    
    if not stats:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        return
    
    print("üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:")
    print(f"   ‚Ä¢ –í—Å–µ–≥–æ –≤–∞–∫–∞–Ω—Å–∏–π: {stats.get('total_vacancies', 0):,}")
    print(f"   ‚Ä¢ –í–∞–∫–∞–Ω—Å–∏–π —Å –∑–∞—Ä–ø–ª–∞—Ç–æ–π: {stats.get('vacancies_with_salary', 0):,}")
    print(f"   ‚Ä¢ –í–∞–∫–∞–Ω—Å–∏–π –±–µ–∑ –∑–∞—Ä–ø–ª–∞—Ç—ã: {stats.get('vacancies_without_salary', 0):,}")
    print(f"   ‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π: {stats.get('unique_companies', 0):,}")
    
    if stats.get('total_vacancies', 0) > 0:
        percentage_with_salary = (stats.get('vacancies_with_salary', 0) / stats.get('total_vacancies', 1)) * 100
        print(f"   ‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –≤–∞–∫–∞–Ω—Å–∏–π —Å –∑–∞—Ä–ø–ª–∞—Ç–æ–π: {percentage_with_salary:.1f}%")


def demo_target_companies(db_manager: DBManager) -> None:
    """
    –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å —Ü–µ–ª–µ–≤—ã–º–∏ –∫–æ–º–ø–∞–Ω–∏—è–º–∏
    """
    print("\n" + "="*60)
    print("–î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø: –¶–µ–ª–µ–≤—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏")
    print("="*60)
    
    print(f"üéØ –ù–∞—Å—Ç—Ä–æ–µ–Ω–æ {len(TARGET_COMPANIES)} —Ü–µ–ª–µ–≤—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π:")
    print()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Å–µ–º –∫–æ–º–ø–∞–Ω–∏—è–º
    companies_stats = db_manager.get_companies_and_vacancies_count()
    companies_dict = {comp['company_name']: comp['vacancy_count'] for comp in companies_stats}
    
    found_companies = 0
    total_vacancies_from_targets = 0
    
    for i, company in enumerate(TARGET_COMPANIES, 1):
        name = company['name']
        hh_id = company['hh_id']
        description = company['description']
        
        # –ò—â–µ–º –∫–æ–º–ø–∞–Ω–∏—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (–≤–æ–∑–º–æ–∂–Ω—ã –≤–∞—Ä–∏–∞—Ü–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏–π)
        vacancy_count = 0
        for db_company_name, count in companies_dict.items():
            if name.lower() in db_company_name.lower() or db_company_name.lower() in name.lower():
                vacancy_count = count
                found_companies += 1
                total_vacancies_from_targets += count
                break
        
        status = "‚úÖ" if vacancy_count > 0 else "‚ùå"
        print(f"{i:2d}. {status} {name} (ID: {hh_id})")
        print(f"     üìù {description}")
        print(f"     üìä –í–∞–∫–∞–Ω—Å–∏–π –≤ –ë–î: {vacancy_count}")
        print()
    
    print(f"üìà –ò—Ç–æ–≥–æ:")
    print(f"   ‚Ä¢ –ù–∞–π–¥–µ–Ω–æ –∫–æ–º–ø–∞–Ω–∏–π –≤ –ë–î: {found_companies} –∏–∑ {len(TARGET_COMPANIES)}")
    print(f"   ‚Ä¢ –í–∞–∫–∞–Ω—Å–∏–π –æ—Ç —Ü–µ–ª–µ–≤—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π: {total_vacancies_from_targets}")


def run_all_demos(db_manager: DBManager) -> None:
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –º–µ—Ç–æ–¥–æ–≤ DBManager
    """
    print("üöÄ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –í–°–ï–• –ú–ï–¢–û–î–û–í –ö–õ–ê–°–°–ê DBManager")
    print("="*80)
    
    try:
        demo_database_stats(db_manager)
        demo_companies_and_vacancies_count(db_manager)
        demo_avg_salary(db_manager)
        demo_vacancies_with_higher_salary(db_manager)
        demo_vacancies_with_keyword(db_manager, "Python")
        demo_all_vacancies(db_manager)
        demo_target_companies(db_manager)
        
        print("\n" + "="*80)
        print("‚úÖ –í–°–ï –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–ò –ó–ê–í–ï–†–®–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("="*80)
        
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê –ü–†–ò –í–´–ü–û–õ–ù–ï–ù–ò–ò –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–ò: {e}")
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ DBManager: {e}")


if __name__ == "__main__":
    # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    logging.basicConfig(level=logging.INFO)
    
    db_manager = DBManager()
    run_all_demos(db_manager)
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –º–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–ª–∞—Å—Å–æ–º DBManager

–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –º–µ—Ç–æ–¥–æ–≤ DBManager —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –ø—Ä–æ–µ–∫—Ç–∞.
–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.
"""

import logging
from typing import Optional

from src.config.target_companies import TargetCompanies
from src.storage.db_manager import DBManager

logger = logging.getLogger(__name__)


class DBManagerDemo:
    """
    –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å DBManager
    
    –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –º–µ—Ç–æ–¥—ã –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
    –∫–ª–∞—Å—Å–∞ DBManager —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –ø—Ä–æ–µ–∫—Ç–∞.
    """
    
    def __init__(self, db_manager: Optional[DBManager] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ–º–æ-–∫–ª–∞—Å—Å–∞
        
        Args:
            db_manager: –≠–∫–∑–µ–º–ø–ª—è—Ä DBManager. –ï—Å–ª–∏ None, —Å–æ–∑–¥–∞–µ—Ç—Å—è –Ω–æ–≤—ã–π
        """
        self.db_manager = db_manager or DBManager()
    
    def run_full_demo(self) -> None:
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—É—é –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é –≤—Å–µ—Ö –º–µ—Ç–æ–¥–æ–≤ DBManager
        """
        print("=" * 80)
        print("–î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –†–ê–ë–û–¢–´ –ö–õ–ê–°–°–ê DBManager")
        print("üéØ –ê–ù–ê–õ–ò–ó –î–ê–ù–ù–´–• –¢–û–õ–¨–ö–û –ü–û 15 –¶–ï–õ–ï–í–´–ú –ö–û–ú–ü–ê–ù–ò–Ø–ú")
        print("üìä –í—Å–µ –º–µ—Ç–æ–¥—ã —Ñ–∏–ª—å—Ç—Ä—É—é—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —Ü–µ–ª–µ–≤—ã–º –∫–æ–º–ø–∞–Ω–∏—è–º")
        print("=" * 80)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        if not self._check_connection():
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–ª–µ–≤—ã—Ö –∫–æ–º–ø–∞–Ω–∏—è—Ö
        self._show_target_companies()
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ –º–µ—Ç–æ–¥—ã
        self._demo_companies_and_vacancies_count()
        self._demo_all_vacancies()
        self._demo_avg_salary()
        self._demo_vacancies_with_higher_salary()
        self._demo_vacancies_with_keyword()
        self._demo_database_stats()
        
        print("=" * 80)
        print("‚úÖ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê")
        print("üéØ –ü–æ–∫–∞–∑–∞–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¢–û–õ–¨–ö–û –ø–æ 15 —Ü–µ–ª–µ–≤—ã–º –∫–æ–º–ø–∞–Ω–∏—è–º –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        print("üìã –í—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω—ã –ø–æ —Å–ø–∏—Å–∫—É TARGET_COMPANIES")
        print("üîç –ê–Ω–∞–ª–∏–∑ –∏—Å–∫–ª—é—á–∞–µ—Ç –≤–∞–∫–∞–Ω—Å–∏–∏ –æ—Ç –¥—Ä—É–≥–∏—Ö –∫–æ–º–ø–∞–Ω–∏–π")
        print("=" * 80)
    
    def _check_connection(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
        
        Returns:
            bool: True –µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
        """
        print("\n1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
        
        if self.db_manager.check_connection():
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            return True
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ PostgreSQL –∑–∞–ø—É—â–µ–Ω –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return False
    
    def _show_target_companies(self) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–ª–µ–≤—ã—Ö –∫–æ–º–ø–∞–Ω–∏—è—Ö"""
        print("\n2. –¶–µ–ª–µ–≤—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ (15 –∫–æ–º–ø–∞–Ω–∏–π):")
        print("-" * 60)
        
        from src.config.target_companies import TARGET_COMPANIES
        
        print("–ê–Ω–∞–ª–∏–∑ –±—É–¥–µ—Ç –ø—Ä–æ–≤–æ–¥–∏—Ç—å—Å—è –ø–æ —Å–ª–µ–¥—É—é—â–∏–º —Ü–µ–ª–µ–≤—ã–º –∫–æ–º–ø–∞–Ω–∏—è–º:")
        print()
        
        for i, company in enumerate(TARGET_COMPANIES, 1):
            print(f"{i:2d}. {company['name']} (HH ID: {company['hh_id']})")
            print(f"    {company['description']}")
        
        print(f"\n–í—Å–µ–≥–æ —Ü–µ–ª–µ–≤—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π: {len(TARGET_COMPANIES)}")
    
    def _demo_companies_and_vacancies_count(self) -> None:
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –º–µ—Ç–æ–¥ get_companies_and_vacancies_count() –¥–ª—è —Ü–µ–ª–µ–≤—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π"""
        print("\n3. get_companies_and_vacancies_count() - –ê–Ω–∞–ª–∏–∑ –≤–∞–∫–∞–Ω—Å–∏–π –ø–æ —Ü–µ–ª–µ–≤—ã–º –∫–æ–º–ø–∞–Ω–∏—è–º:")
        print("-" * 80)
        
        from src.config.target_companies import TARGET_COMPANIES
        
        print("üìã –ê–Ω–∞–ª–∏–∑ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ –æ—Ç —Ü–µ–ª–µ–≤—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞")
        print("üéØ –ú–µ—Ç–æ–¥ —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Å–µ–º 15 —Ü–µ–ª–µ–≤—ã–º –∫–æ–º–ø–∞–Ω–∏—è–º")
        print()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –ø–æ —Ü–µ–ª–µ–≤—ã–º –∫–æ–º–ø–∞–Ω–∏—è–º
        companies_data = self.db_manager.get_target_companies_analysis()
        
        if not companies_data:
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ü–µ–ª–µ–≤—ã—Ö –∫–æ–º–ø–∞–Ω–∏—è—Ö")
            print("üí° –í—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π —á–µ—Ä–µ–∑ –ø—É–Ω–∫—Ç –º–µ–Ω—é 1 –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")
            return
        
        print(f"{'‚Ññ':<3} {'–¶–µ–ª–µ–≤–∞—è –∫–æ–º–ø–∞–Ω–∏—è':<35} {'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–∫–∞–Ω—Å–∏–π':<20}")
        print("-" * 80)
        
        total_vacancies = 0
        companies_with_vacancies = 0
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ç–æ–º –ø–æ—Ä—è–¥–∫–µ, –∫–∞–∫ –æ–Ω–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –º–µ—Ç–æ–¥–æ–º
        # (–º–µ—Ç–æ–¥ —É–∂–µ —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç –∏ —Å–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ü–µ–ª–µ–≤—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏)
        for i, (company_name, vacancy_count) in enumerate(companies_data, 1):
            status = "‚úÖ" if vacancy_count > 0 else "‚ùå"
            print(f"{i:<3} {status} {company_name:<32} {vacancy_count:<20}")
            
            total_vacancies += vacancy_count
            if vacancy_count > 0:
                companies_with_vacancies += 1
        
        print("-" * 80)
        print(f"üìä –ê–ù–ê–õ–ò–ó –ü–û –¶–ï–õ–ï–í–´–ú –ö–û–ú–ü–ê–ù–ò–Ø–ú:")
        print(f"   ‚Ä¢ –¶–µ–ª–µ–≤—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π —Å –≤–∞–∫–∞–Ω—Å–∏—è–º–∏: {companies_with_vacancies} –∏–∑ {len(TARGET_COMPANIES)}")
        print(f"   ‚Ä¢ –í—Å–µ–≥–æ –≤–∞–∫–∞–Ω—Å–∏–π –æ—Ç —Ü–µ–ª–µ–≤—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π: {total_vacancies}")
        print(f"   ‚Ä¢ –ü–æ–∫—Ä—ã—Ç–∏–µ —Ü–µ–ª–µ–≤—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π: {(companies_with_vacancies/len(TARGET_COMPANIES)*100):.1f}%")
        
        if total_vacancies == 0:
            print("üí° –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π —á–µ—Ä–µ–∑ –ø—É–Ω–∫—Ç –º–µ–Ω—é 1")
            print("   –í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ API –∏ –≤–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞")
        else:
            print(f"\nüîç –†–ï–ó–£–õ–¨–¢–ê–¢: –ù–∞–π–¥–µ–Ω—ã –≤–∞–∫–∞–Ω—Å–∏–∏ –æ—Ç {companies_with_vacancies} —Ü–µ–ª–µ–≤—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π")
            print("   –ê–Ω–∞–ª–∏–∑ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ –æ—Ç –∫–æ–º–ø–∞–Ω–∏–π –∏–∑ —Å–ø–∏—Å–∫–∞ TARGET_COMPANIES")
    
    def _demo_all_vacancies(self) -> None:
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –º–µ—Ç–æ–¥ get_all_vacancies()"""
        print("\n4. get_all_vacancies() - –í—Å–µ –≤–∞–∫–∞–Ω—Å–∏–∏:")
        print("-" * 80)
        
        vacancies = self.db_manager.get_all_vacancies()
        
        if not vacancies:
            print("–í–∞–∫–∞–Ω—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return
        
        print(f"{'‚Ññ':<3} {'–ù–∞–∑–≤–∞–Ω–∏–µ':<25} {'–ö–æ–º–ø–∞–Ω–∏—è':<20} {'–ó–∞—Ä–ø–ª–∞—Ç–∞':<15}")
        print("-" * 80)
        
        for i, vacancy in enumerate(vacancies[:5], 1):
            title = vacancy['title'][:24] if len(vacancy['title']) > 24 else vacancy['title']
            company = vacancy['company_name'][:19] if len(vacancy['company_name']) > 19 else vacancy['company_name']
            salary = vacancy['salary_info'][:14] if len(vacancy['salary_info']) > 14 else vacancy['salary_info']
            
            print(f"{i:<3} {title:<25} {company:<20} {salary:<15}")
        
        if len(vacancies) > 5:
            print(f"... –∏ –µ—â–µ {len(vacancies) - 5} –≤–∞–∫–∞–Ω—Å–∏–π")
        
        print(f"\n–í—Å–µ–≥–æ –≤–∞–∫–∞–Ω—Å–∏–π: {len(vacancies)}")
    
    def _demo_avg_salary(self) -> None:
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –º–µ—Ç–æ–¥ get_avg_salary()"""
        print("\n5. get_avg_salary() - –°—Ä–µ–¥–Ω—è—è –∑–∞—Ä–ø–ª–∞—Ç–∞:")
        print("-" * 40)
        
        avg_salary = self.db_manager.get_avg_salary()
        
        if avg_salary is not None:
            print(f"–°—Ä–µ–¥–Ω—è—è –∑–∞—Ä–ø–ª–∞—Ç–∞ –ø–æ –≤—Å–µ–º –≤–∞–∫–∞–Ω—Å–∏—è–º: {avg_salary:,.0f} —Ä—É–±.")
        else:
            print("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ä–µ–¥–Ω—é—é –∑–∞—Ä–ø–ª–∞—Ç—É.")
            print("–í–æ–∑–º–æ–∂–Ω–æ, –Ω–µ—Ç –≤–∞–∫–∞–Ω—Å–∏–π —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π –∑–∞—Ä–ø–ª–∞—Ç–æ–π.")
    
    def _demo_vacancies_with_higher_salary(self) -> None:
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –º–µ—Ç–æ–¥ get_vacancies_with_higher_salary()"""
        print("\n6. get_vacancies_with_higher_salary() - –í–∞–∫–∞–Ω—Å–∏–∏ —Å –∑–∞—Ä–ø–ª–∞—Ç–æ–π –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–π:")
        print("-" * 80)
        
        high_salary_vacancies = self.db_manager.get_vacancies_with_higher_salary()
        
        if not high_salary_vacancies:
            print("–í–∞–∫–∞–Ω—Å–∏–∏ —Å –∑–∞—Ä–ø–ª–∞—Ç–æ–π –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return
        
        print(f"{'‚Ññ':<3} {'–ù–∞–∑–≤–∞–Ω–∏–µ':<25} {'–ö–æ–º–ø–∞–Ω–∏—è':<20} {'–ó–∞—Ä–ø–ª–∞—Ç–∞':<15}")
        print("-" * 80)
        
        for i, vacancy in enumerate(high_salary_vacancies[:5], 1):
            title = vacancy['title'][:24] if len(vacancy['title']) > 24 else vacancy['title']
            company = vacancy['company_name'][:19] if len(vacancy['company_name']) > 19 else vacancy['company_name']
            salary = vacancy['salary_info'][:14] if len(vacancy['salary_info']) > 14 else vacancy['salary_info']
            
            print(f"{i:<3} {title:<25} {company:<20} {salary:<15}")
        
        if len(high_salary_vacancies) > 5:
            print(f"... –∏ –µ—â–µ {len(high_salary_vacancies) - 5} –≤–∞–∫–∞–Ω—Å–∏–π")
        
        print(f"\n–í—Å–µ–≥–æ –≤–∞–∫–∞–Ω—Å–∏–π —Å –≤—ã—Å–æ–∫–æ–π –∑–∞—Ä–ø–ª–∞—Ç–æ–π: {len(high_salary_vacancies)}")
    
    def _demo_vacancies_with_keyword(self) -> None:
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –º–µ—Ç–æ–¥ get_vacancies_with_keyword()"""
        print("\n7. get_vacancies_with_keyword() - –ü–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É:")
        print("-" * 80)
        
        keywords = ["python", "java", "—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫", "–º–µ–Ω–µ–¥–∂–µ—Ä"]
        
        for keyword in keywords:
            print(f"\n–ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É '{keyword}':")
            keyword_vacancies = self.db_manager.get_vacancies_with_keyword(keyword)
            
            if keyword_vacancies:
                print(f"–ù–∞–π–¥–µ–Ω–æ {len(keyword_vacancies)} –≤–∞–∫–∞–Ω—Å–∏–π")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –≤–∞–∫–∞–Ω—Å–∏–∏
                for i, vacancy in enumerate(keyword_vacancies[:3], 1):
                    title = vacancy['title'][:35]
                    company = vacancy['company_name'][:25]
                    print(f"  {i}. {title} - {company}")
                
                if len(keyword_vacancies) > 3:
                    print(f"  ... –∏ –µ—â–µ {len(keyword_vacancies) - 3} –≤–∞–∫–∞–Ω—Å–∏–π")
            else:
                print(f"–í–∞–∫–∞–Ω—Å–∏–∏ —Å –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–æ–º '{keyword}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    def _demo_database_stats(self) -> None:
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ë–î"""
        print("\n8. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:")
        print("-" * 40)
        
        stats = self.db_manager.get_database_stats()
        
        if stats:
            print(f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–∫–∞–Ω—Å–∏–π: {stats.get('total_vacancies', 0)}")
            print(f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–ø–∞–Ω–∏–π: {stats.get('total_companies', 0)}")
            print(f"–í–∞–∫–∞–Ω—Å–∏–π —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π –∑–∞—Ä–ø–ª–∞—Ç–æ–π: {stats.get('vacancies_with_salary', 0)}")
            print(f"–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–∞–∫–∞–Ω—Å–∏–∏: {stats.get('latest_vacancy_date', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞')}")
        else:
            print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")


def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    """
    try:
        demo = DBManagerDemo()
        demo.run_full_demo()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ DBManager: {e}")
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    main()
