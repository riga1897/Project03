import logging
from typing import List, Optional

from ..vacancies.models import Vacancy
from .base_formatter import BaseFormatter

logger = logging.getLogger(__name__)


class VacancyFormatter(BaseFormatter):
    """–ö–ª–∞—Å—Å –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–π —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–∞–ø–ø–∏–Ω–≥–∞ –ø–æ–ª–µ–π"""

    @staticmethod
    def _extract_responsibilities(vacancy) -> Optional[str]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–µ–π (–ø–∞—Ä—Å–µ—Ä—ã —É–∂–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –º–∞–ø–ø—è—Ç –ø–æ–ª—è)"""
        return getattr(vacancy, "responsibilities", None)

    @staticmethod
    def _extract_requirements(vacancy) -> Optional[str]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π (–ø–∞—Ä—Å–µ—Ä—ã —É–∂–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –º–∞–ø–ø—è—Ç –ø–æ–ª—è)"""
        return getattr(vacancy, "requirements", None)

    @staticmethod
    def _extract_conditions(vacancy) -> Optional[str]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —É—Å–ª–æ–≤–∏–π —Å —É—á–µ—Ç–æ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞"""
        conditions_parts = []

        # –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã
        schedule = getattr(vacancy, "schedule", None)
        if schedule:
            conditions_parts.append(f"–ì—Ä–∞—Ñ–∏–∫: {schedule}")

        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ —É—Å–ª–æ–≤–∏—è —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        source = getattr(vacancy, "source", "")

        if source == "hh.ru":
            # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è HH —É—Å–ª–æ–≤–∏—è
            pass
        elif source == "superjob.ru":
            # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è SJ —É—Å–ª–æ–≤–∏—è
            pass

        return "; ".join(conditions_parts) if conditions_parts else None

    @staticmethod
    def format_vacancy_brief(vacancy: "Vacancy", number: Optional[int] = None) -> str:
        """
        –ö—Ä–∞—Ç–∫–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∞–∫–∞–Ω—Å–∏–∏ –¥–ª—è —Å–ø–∏—Å–∫–æ–≤

        Args:
            vacancy: –û–±—ä–µ–∫—Ç –≤–∞–∫–∞–Ω—Å–∏–∏
            number: –ü–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä

        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –∫—Ä–∞—Ç–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        """
        number_str = f"{number}. " if number else ""

        # –ü–æ–ª—É—á–∞–µ–º –∑–∞—Ä–ø–ª–∞—Ç—É
        salary_str = "–ó–∞—Ä–ø–ª–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
        if vacancy.salary:
            if hasattr(vacancy.salary, 'salary_from') and hasattr(vacancy.salary, 'salary_to'):
                if vacancy.salary.salary_from and vacancy.salary.salary_to:
                    salary_str = f"{vacancy.salary.salary_from:,} - {vacancy.salary.salary_to:,} ‚ÇΩ"
                elif vacancy.salary.salary_from:
                    salary_str = f"–æ—Ç {vacancy.salary.salary_from:,} ‚ÇΩ"
                elif vacancy.salary.salary_to:
                    salary_str = f"–¥–æ {vacancy.salary.salary_to:,} ‚ÇΩ"

        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è
        employer_name = "–ù–µ —É–∫–∞–∑–∞–Ω"
        if vacancy.employer:
            if isinstance(vacancy.employer, dict):
                employer_name = vacancy.employer.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω')
            else:
                employer_name = str(vacancy.employer)

        return (
            f"{number_str}{vacancy.title}\n"
            f"   üí∞ {salary_str}\n"
            f"   üè¢ {employer_name}\n"
            f"   üìç {vacancy.area or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"   üîó {vacancy.url}\n"
        )

    @staticmethod
    def format_vacancy_info(vacancy, number=None) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞–∫–∞–Ω—Å–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è

        Args:
            vacancy: –û–±—ä–µ–∫—Ç –≤–∞–∫–∞–Ω—Å–∏–∏ –∏–ª–∏ —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –≤–∞–∫–∞–Ω—Å–∏–∏
            number: –ù–æ–º–µ—Ä –≤–∞–∫–∞–Ω—Å–∏–∏ –≤ —Å–ø–∏—Å–∫–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤–∞–∫–∞–Ω—Å–∏–∏
        """
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤–∞–∫–∞–Ω—Å–∏–∏
        if hasattr(vacancy, 'to_dict'):
            # –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ä–µ–∫—Ç Vacancy
            vacancy_data = vacancy
        else:
            # –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ —Å–ª–æ–≤–∞—Ä—å
            vacancy_data = vacancy

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        vacancy_id = getattr(vacancy_data, 'vacancy_id', vacancy_data.get('vacancy_id', 'N/A'))

        # –û—Ç–ª–∞–¥–∫–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã
        if str(vacancy_id) in ["124403607", "124403580", "124403642"]:
            print(f"DEBUG VacancyFormatter.format_vacancy_info: ID {vacancy_id}")
            print(f"DEBUG VacancyFormatter.format_vacancy_info: type(vacancy_data) = {type(vacancy_data)}")
            if hasattr(vacancy_data, 'employer'):
                print(f"DEBUG VacancyFormatter.format_vacancy_info: vacancy_data.employer = {vacancy_data.employer}")
            elif isinstance(vacancy_data, dict) and 'employer' in vacancy_data:
                print(f"DEBUG VacancyFormatter.format_vacancy_info: vacancy_data['employer'] = {vacancy_data.get('employer')}")

        title = getattr(vacancy_data, 'title', vacancy_data.get('title', '–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ'))
        url = (
            getattr(vacancy_data, 'url', None) or
            vacancy_data.get('url', '') or
            vacancy_data.get('link', '')
        )

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–ø–∞–Ω–∏–∏
        company_name = VacancyFormatter._extract_company_name(vacancy_data)

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏
        if str(vacancy_id) in ["124403607", "124403580", "124403642"]:
            print(f"DEBUG VacancyFormatter.format_vacancy_info: –∏–∑–≤–ª–µ—á–µ–Ω–Ω–æ–µ company_name = '{company_name}'")

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞—Ä–ø–ª–∞—Ç–µ
        salary_info = VacancyFormatter._extract_salary_info(vacancy_data)

        # –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã
        experience = (
            getattr(vacancy_data, 'experience', None) or
            vacancy_data.get('experience', '–ù–µ —É–∫–∞–∑–∞–Ω')
        )

        # –¢–∏–ø –∑–∞–Ω—è—Ç–æ—Å—Ç–∏
        employment = (
            getattr(vacancy_data, 'employment', None) or
            vacancy_data.get('employment', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')
        )

        # –ò—Å—Ç–æ—á–Ω–∏–∫
        source = (
            getattr(vacancy_data, 'source', None) or
            vacancy_data.get('source', 'unknown')
        )

        # –û–ø–∏—Å–∞–Ω–∏–µ (–æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É)
        description = VacancyFormatter._extract_description(vacancy_data)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
        result_parts = []

        if number is not None:
            result_parts.append(f"{number}.")

        result_parts.extend([
            f"ID: {vacancy_id}",
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {title}",
            f"–ö–æ–º–ø–∞–Ω–∏—è: {company_name}",
            f"–ó–∞—Ä–ø–ª–∞—Ç–∞: {salary_info}",
            f"–û–ø—ã—Ç: {experience}",
            f"–ó–∞–Ω—è—Ç–æ—Å—Ç—å: {employment}",
            f"–ò—Å—Ç–æ—á–Ω–∏–∫: {source}",
            f"–°—Å—ã–ª–∫–∞: {url}",
            f"–û–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏: {description}",
        ])

        return "\n".join(result_parts)

    @staticmethod
    def display_vacancy_info(vacancy: Vacancy, number: Optional[int] = None) -> None:
        """
        –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∞–∫–∞–Ω—Å–∏–∏

        Args:
            vacancy: –û–±—ä–µ–∫—Ç –≤–∞–∫–∞–Ω—Å–∏–∏
            number: –ü–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        """
        lines = VacancyFormatter._build_vacancy_lines(vacancy, number)

        for line in lines:
            print(line)

        print()  # –û–¥–∏–Ω –ø–µ—Ä–µ–≤–æ–¥ —Å—Ç—Ä–æ–∫–∏ –º–µ–∂–¥—É –≤–∞–∫–∞–Ω—Å–∏—è–º–∏

    @staticmethod
    def format_salary(salary_info) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞—Ä–ø–ª–∞—Ç–µ

        Args:
            salary_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞—Ä–ø–ª–∞—Ç–µ

        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –∑–∞—Ä–ø–ª–∞—Ç–æ–π
        """
        if not salary_info:
            return "–ó–∞—Ä–ø–ª–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"

        if isinstance(salary_info, dict):
            return VacancyFormatter._format_salary_dict(salary_info)

        return str(salary_info)

    @staticmethod
    def _build_vacancy_lines(vacancy: Vacancy, number: Optional[int] = None) -> List[str]:
        """
        –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å—Ç—Ä–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤–∞–∫–∞–Ω—Å–∏–∏

        Args:
            vacancy: –û–±—ä–µ–∫—Ç –≤–∞–∫–∞–Ω—Å–∏–∏
            number: –ü–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

        Returns:
            –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤–∞–∫–∞–Ω—Å–∏–∏
            :type vacancy: Vacancy
        """
        lines = []

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π
        if number:
            lines.append(f"{number}.")

        # ID
        lines.append(f"ID: {vacancy.vacancy_id}")

        # –ù–∞–∑–≤–∞–Ω–∏–µ
        title = vacancy.title or getattr(vacancy, "name", None) or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        lines.append(f"–ù–∞–∑–≤–∞–Ω–∏–µ: {title}")

        # –ö–æ–º–ø–∞–Ω–∏—è
        company_name = "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
        if vacancy.employer:
            if isinstance(vacancy.employer, dict):
                company_name = vacancy.employer.get("name", "–ù–µ —É–∫–∞–∑–∞–Ω–∞")
            elif isinstance(vacancy.employer, str) and vacancy.employer.strip():
                company_name = vacancy.employer
            else:
                company_name = str(vacancy.employer) if vacancy.employer else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
        lines.append(f"–ö–æ–º–ø–∞–Ω–∏—è: {company_name}")

        # –ó–∞—Ä–ø–ª–∞—Ç–∞
        if vacancy.salary:
            lines.append(f"–ó–∞—Ä–ø–ª–∞—Ç–∞: {vacancy.salary}")
        else:
            lines.append("–ó–∞—Ä–ø–ª–∞—Ç–∞: –ù–µ —É–∫–∞–∑–∞–Ω–∞")

        # –û–ø—ã—Ç
        if vacancy.experience:
            lines.append(f"–û–ø—ã—Ç: {vacancy.experience}")

        # –ó–∞–Ω—è—Ç–æ—Å—Ç—å
        if vacancy.employment:
            lines.append(f"–ó–∞–Ω—è—Ç–æ—Å—Ç—å: {vacancy.employment}")

        # –ò—Å—Ç–æ—á–Ω–∏–∫
        lines.append(f"–ò—Å—Ç–æ—á–Ω–∏–∫: {getattr(vacancy, 'source', '–ù–µ —É–∫–∞–∑–∞–Ω')}")

        # –°—Å—ã–ª–∫–∞ —Å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ–º API-—Å—Å—ã–ª–æ–∫ –≤ –≤–µ–±-—Å—Å—ã–ª–∫–∏
        url = vacancy.url
        if isinstance(url, str) and url != "–ù–µ —É–∫–∞–∑–∞–Ω–∞":
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º API-—Å—Å—ã–ª–∫–∏ HH –≤ –≤–µ–±-—Å—Å—ã–ª–∫–∏
            if "api.hh.ru/vacancies/" in url:
                import re

                match = re.search(r"/vacancies/(\d+)", url)
                if match:
                    vacancy_web_id = match.group(1)
                    url = f"https://hh.ru/vacancy/{vacancy_web_id}"

        lines.append(f"–°—Å—ã–ª–∫–∞: {url}")

        # –û–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ (–æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–µ –ø–æ–ª–µ)
        description_parts = []

        # –û—Å–Ω–æ–≤–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ - —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º description, –ø–æ—Ç–æ–º detailed_description
        main_description = getattr(vacancy, "description", None)
        if not main_description or not str(main_description).strip():
            main_description = getattr(vacancy, "detailed_description", None)

        if (
            main_description
            and str(main_description).strip()
            and str(main_description).strip() != "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
            and str(main_description).strip() != ""
        ):
            # –û—á–∏—â–∞–µ–º HTML-—Ç–µ–≥–∏ –∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
            import re

            clean_description = re.sub(r"<[^>]+>", "", str(main_description))
            clean_description = clean_description.strip()
            if clean_description:
                if len(clean_description) > 150:
                    clean_description = clean_description[:150] + "..."
                description_parts.append(clean_description)

        # –û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏
        responsibilities = VacancyFormatter._extract_responsibilities(vacancy)
        if (
            responsibilities
            and str(responsibilities).strip()
            and str(responsibilities).strip() != "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
            and str(responsibilities).strip() != ""
        ):
            resp_text = str(responsibilities).strip()
            if len(resp_text) > 150:
                resp_text = resp_text[:150] + "..."
            description_parts.append(f"–û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏: {resp_text}")

        # –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è
        requirements = VacancyFormatter._extract_requirements(vacancy)
        if (
            requirements
            and str(requirements).strip()
            and str(requirements).strip() != "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
            and str(requirements).strip() != ""
        ):
            req_text = str(requirements).strip()
            if len(req_text) > 150:
                req_text = req_text[:150] + "..."
            description_parts.append(f"–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: {req_text}")

        # –£—Å–ª–æ–≤–∏—è
        conditions = VacancyFormatter._extract_conditions(vacancy)
        if conditions and str(conditions).strip():
            cond_text = str(conditions).strip()
            if len(cond_text) > 100:
                cond_text = cond_text[:100] + "..."
            description_parts.append(f"–£—Å–ª–æ–≤–∏—è: {cond_text}")

        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –∏–∑ —á–∞—Å—Ç–µ–π –æ–ø–∏—Å–∞–Ω–∏—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ—ë
        if description_parts:
            combined_description = "; ".join(description_parts)
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –æ–±—â—É—é –¥–ª–∏–Ω—É –æ–ø–∏—Å–∞–Ω–∏—è
            if len(combined_description) > 400:
                combined_description = combined_description[:400] + "..."
            lines.append(f"–û–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏: {combined_description}")
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏–∫–∞–∫–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            lines.append("–û–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏: –û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")

        return lines

    @staticmethod
    def format_company_info(employer_info) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–ø–∞–Ω–∏–∏
        Args:
            employer_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–µ
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–æ–º–ø–∞–Ω–∏–∏
        """
        if not employer_info:
            return "–ù–µ —É–∫–∞–∑–∞–Ω–∞"

        if isinstance(employer_info, dict):
            return employer_info.get("name", "–ù–µ —É–∫–∞–∑–∞–Ω–∞")

        return str(employer_info)

    @staticmethod
    def _format_salary_dict(salary_info: dict) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞—Ä–ø–ª–∞—Ç–µ –∏–∑ —Å–ª–æ–≤–∞—Ä—è
        """
        salary_str = ""
        from_value = salary_info.get("from")
        to_value = salary_info.get("to")
        currency = salary_info.get("currency")

        if from_value:
            salary_str += f"–æ—Ç {from_value} "
        if to_value:
            salary_str += f"–¥–æ {to_value} "
        if currency:
            salary_str += currency

        return salary_str.strip() if salary_str else "–ó–∞—Ä–ø–ª–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"

    @staticmethod
    def _extract_company_name(vacancy_data) -> str:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –∏–∑ –æ–±—ä–µ–∫—Ç–∞ –∏–ª–∏ —Å–ª–æ–≤–∞—Ä—è –≤–∞–∫–∞–Ω—Å–∏–∏.
        """
        employer_info = None
        if hasattr(vacancy_data, 'employer'):
            employer_info = vacancy_data.employer
        elif isinstance(vacancy_data, dict) and 'employer' in vacancy_data:
            employer_info = vacancy_data.get('employer')

        if not employer_info:
            return "–ù–µ —É–∫–∞–∑–∞–Ω–∞"

        if isinstance(employer_info, dict):
            return employer_info.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')
        elif isinstance(employer_info, str) and employer_info.strip():
            return employer_info
        else:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ —ç—Ç–æ –∫–∞–∫–æ–π-—Ç–æ –¥—Ä—É–≥–æ–π –æ–±—ä–µ–∫—Ç
            return str(employer_info) if employer_info else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"

    @staticmethod
    def _extract_salary_info(vacancy_data) -> str:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—Ä–ø–ª–∞—Ç–µ.
        """
        salary_data = None
        if hasattr(vacancy_data, 'salary'):
            salary_data = vacancy_data.salary
        elif isinstance(vacancy_data, dict) and 'salary' in vacancy_data:
            salary_data = vacancy_data.get('salary')

        if not salary_data:
            return "–ù–µ —É–∫–∞–∑–∞–Ω–∞"

        if isinstance(salary_data, dict):
            return VacancyFormatter._format_salary_dict(salary_data)
        elif hasattr(salary_data, 'salary_from') and hasattr(salary_data, 'salary_to'):
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –µ—Å–ª–∏ salary —è–≤–ª—è–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç–æ–º —Å –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏
            from_value = salary_data.salary_from
            to_value = salary_data.salary_to
            currency = getattr(salary_data, 'currency', '‚ÇΩ') # –ò—Å–ø–æ–ª—å–∑—É–µ–º ‚ÇΩ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –Ω–µ—Ç –≤–∞–ª—é—Ç—ã

            salary_parts = []
            if from_value is not None:
                salary_parts.append(f"–æ—Ç {from_value:,}")
            if to_value is not None:
                salary_parts.append(f"–¥–æ {to_value:,}")
            
            if salary_parts:
                return " ".join(salary_parts) + f" {currency}".strip()
            else:
                return "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
        else:
            # –ï—Å–ª–∏ salary_data –Ω–µ —Å–ª–æ–≤–∞—Ä—å –∏ –Ω–µ –∏–º–µ–µ—Ç –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤, –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
            return str(salary_data)

    @staticmethod
    def _extract_description(vacancy_data) -> str:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏, –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—è –¥–ª–∏–Ω—É.
        """
        description_text = None
        if hasattr(vacancy_data, 'description') and vacancy_data.description:
            description_text = str(vacancy_data.description).strip()
        elif hasattr(vacancy_data, 'detailed_description') and vacancy_data.detailed_description:
            description_text = str(vacancy_data.detailed_description).strip()
        elif isinstance(vacancy_data, dict) and vacancy_data.get('description'):
            description_text = str(vacancy_data.get('description')).strip()
        elif isinstance(vacancy_data, dict) and vacancy_data.get('detailed_description'):
            description_text = str(vacancy_data.get('detailed_description')).strip()

        if not description_text or description_text == "–ù–µ —É–∫–∞–∑–∞–Ω–æ" or description_text == "":
            return "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"

        # –û—á–∏—Å—Ç–∫–∞ HTML-—Ç–µ–≥–æ–≤
        import re
        cleaned_description = re.sub(r"<[^>]+>", "", description_text)
        cleaned_description = cleaned_description.strip()

        if not cleaned_description:
            return "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"

        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã
        if len(cleaned_description) > 150:
            return cleaned_description[:150] + "..."
        return cleaned_description


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä–∞
vacancy_formatter = VacancyFormatter()