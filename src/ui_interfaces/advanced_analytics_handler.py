
import logging
from typing import Optional, Dict, Any

from src.utils.ui_helpers import get_user_input, get_positive_integer, confirm_action
from src.utils.ui_navigation import quick_paginate
from src.utils.vacancy_formatter import VacancyFormatter

logger = logging.getLogger(__name__)


class AdvancedAnalyticsHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏ SQL-–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""

    def __init__(self, storage):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
        
        Args:
            storage: –•—Ä–∞–Ω–∏–ª–∏—â–µ –≤–∞–∫–∞–Ω—Å–∏–π (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–µ–µ –Ω–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã)
        """
        self.storage = storage

    def show_analytics_menu(self) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
        while True:
            print("\n" + "="*50)
            print("–†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –ê–ù–ê–õ–ò–¢–ò–ö–ê –í–ê–ö–ê–ù–°–ò–ô")
            print("="*50)
            print("1. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–∞—Ä–ø–ª–∞—Ç–∞–º")
            print("2. –¢–æ–ø —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–µ–π")
            print("3. –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞")
            print("4. –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏")
            print("5. –£–º–Ω–∞—è –ø–∞–≥–∏–Ω–∞—Ü–∏—è –≤–∞–∫–∞–Ω—Å–∏–π")
            print("0. –ù–∞–∑–∞–¥")
            print("-"*50)
            
            choice = get_user_input("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é: ")
            
            if choice == "1":
                self._show_salary_statistics()
            elif choice == "2":
                self._show_top_employers()
            elif choice == "3":
                self._show_popular_keywords()
            elif choice == "4":
                self._advanced_search()
            elif choice == "5":
                self._smart_pagination()
            elif choice == "0":
                break
            else:
                print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    def _show_salary_statistics(self) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∑–∞—Ä–ø–ª–∞—Ç–∞–º"""
        print("\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ó–ê–†–ü–õ–ê–¢–ê–ú")
        
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã
        filters = self._get_basic_filters()
        
        try:
            stats = self.storage.get_salary_statistics(filters)
            
            if not stats:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
                return
                
            print(f"\nüìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            print(f"  –í—Å–µ–≥–æ –≤–∞–∫–∞–Ω—Å–∏–π: {stats.get('total_vacancies', 0)}")
            print(f"  –° —É–∫–∞–∑–∞–Ω–∏–µ–º –∑–∞—Ä–ø–ª–∞—Ç—ã: {stats.get('vacancies_with_salary', 0)}")
            print(f"  –ü–æ–∫—Ä—ã—Ç–∏–µ –∑–∞—Ä–ø–ª–∞—Ç: {stats.get('salary_coverage', 0)}%")
            print(f"\nüí∞ –ó–∞—Ä–ø–ª–∞—Ç–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            print(f"  –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è: {stats.get('min_salary', 0):,} ‚ÇΩ")
            print(f"  –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è: {stats.get('max_salary', 0):,} ‚ÇΩ")
            print(f"  –°—Ä–µ–¥–Ω—è—è: {stats.get('avg_salary', 0):,} ‚ÇΩ")
            print(f"  –ú–µ–¥–∏–∞–Ω–∞: {stats.get('median_salary', 0):,} ‚ÇΩ")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

    def _show_top_employers(self) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–µ–π"""
        print("\nüè¢ –¢–û–ü –†–ê–ë–û–¢–û–î–ê–¢–ï–õ–ï–ô")
        
        limit = get_positive_integer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–µ–π –≤ —Ç–æ–ø–µ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10): ") or 10
        filters = self._get_basic_filters()
        
        try:
            employers = self.storage.get_top_employers(limit, filters)
            
            if not employers:
                print("‚ùå –†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return
            
            print(f"\nüéØ –¢–æ–ø {len(employers)} —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–µ–π:")
            print("-" * 80)
            
            for i, emp in enumerate(employers, 1):
                avg_salary_str = f"{emp['avg_salary']:,} ‚ÇΩ" if emp['avg_salary'] > 0 else "–Ω–µ —É–∫–∞–∑–∞–Ω–∞"
                print(f"{i:2}. {emp['employer']}")
                print(f"    üìù –í–∞–∫–∞–Ω—Å–∏–π: {emp['vacancy_count']}")
                print(f"    üí∞ –°—Ä–µ–¥–Ω—è—è –∑–∞—Ä–ø–ª–∞—Ç–∞: {avg_salary_str}")
                print(f"    üìä –í–∞–∫–∞–Ω—Å–∏–π —Å –∑–∞—Ä–ø–ª–∞—Ç–æ–π: {emp['vacancies_with_salary']}")
                print()
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ø–∞ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–µ–π: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

    def _show_popular_keywords(self) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞"""
        print("\nüîç –ü–û–ü–£–õ–Ø–†–ù–´–ï –ö–õ–Æ–ß–ï–í–´–ï –°–õ–û–í–ê")
        
        limit = get_positive_integer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 20): ") or 20
        filters = self._get_basic_filters()
        
        try:
            keywords = self.storage.get_popular_keywords(limit, filters)
            
            if not keywords:
                print("‚ùå –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return
            
            print(f"\nüìã –¢–æ–ø {len(keywords)} –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤:")
            print("-" * 50)
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —á–∞—Å—Ç–æ—Ç–µ –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            max_freq = keywords[0]['frequency'] if keywords else 1
            
            for i, kw in enumerate(keywords, 1):
                frequency = kw['frequency']
                bar_length = min(20, int(frequency / max_freq * 20))
                bar = "‚ñà" * bar_length + "‚ñë" * (20 - bar_length)
                
                print(f"{i:2}. {kw['keyword']:<15} {bar} {frequency}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

    def _advanced_search(self) -> None:
        """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏"""
        print("\nüîé –†–ê–°–®–ò–†–ï–ù–ù–´–ô –ü–û–ò–°–ö")
        
        # –°–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–∏—Å–∫–∞
        keywords_input = get_user_input("–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é): ", required=False)
        keywords = [kw.strip() for kw in keywords_input.split(",")] if keywords_input else []
        
        # –î–∏–∞–ø–∞–∑–æ–Ω –∑–∞—Ä–ø–ª–∞—Ç
        salary_range = None
        if confirm_action("–ó–∞–¥–∞—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω –∑–∞—Ä–ø–ª–∞—Ç?"):
            min_salary = get_positive_integer("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞: ")
            max_salary = get_positive_integer("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞: ")
            if min_salary and max_salary:
                salary_range = (min_salary, max_salary)
        
        # –£—Ä–æ–≤–Ω–∏ –æ–ø—ã—Ç–∞
        experience_levels = None
        if confirm_action("–§–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–æ –æ–ø—ã—Ç—É?"):
            exp_input = get_user_input("–£—Ä–æ–≤–Ω–∏ –æ–ø—ã—Ç–∞ (junior, middle, senior —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é): ", required=False)
            experience_levels = [exp.strip() for exp in exp_input.split(",")] if exp_input else None
        
        # –¢–∏–ø—ã –∑–∞–Ω—è—Ç–æ—Å—Ç–∏
        employment_types = None
        if confirm_action("–§–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–æ —Ç–∏–ø—É –∑–∞–Ω—è—Ç–æ—Å—Ç–∏?"):
            emp_input = get_user_input("–¢–∏–ø—ã –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ (–ø–æ–ª–Ω–∞—è, —á–∞—Å—Ç–∏—á–Ω–∞—è –∏ —Ç.–¥. —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é): ", required=False)
            employment_types = [emp.strip() for emp in emp_input.split(",")] if emp_input else None
        
        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
        page_size = get_positive_integer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10): ") or 10
        
        try:
            page = 1
            while True:
                vacancies, total_count = self.storage.search_vacancies_advanced(
                    keywords=keywords,
                    salary_range=salary_range,
                    experience_levels=experience_levels,
                    employment_types=employment_types,
                    page=page,
                    page_size=page_size
                )
                
                if not vacancies and page == 1:
                    print("‚ùå –í–∞–∫–∞–Ω—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º")
                    return
                
                print(f"\nüéØ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}, –Ω–∞–π–¥–µ–Ω–æ {total_count})")
                print("="*60)
                
                for i, vacancy in enumerate(vacancies, (page-1)*page_size + 1):
                    print(VacancyFormatter.format_vacancy_brief(vacancy, i))
                
                # –ù–∞–≤–∏–≥–∞—Ü–∏—è
                if total_count > page * page_size:
                    if confirm_action(f"–ü–æ–∫–∞–∑–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ {page_size} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤?"):
                        page += 1
                        continue
                
                break
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

    def _smart_pagination(self) -> None:
        """–£–º–Ω–∞—è –ø–∞–≥–∏–Ω–∞—Ü–∏—è —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π"""
        print("\nüìÑ –£–ú–ù–ê–Ø –ü–ê–ì–ò–ù–ê–¶–ò–Ø")
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
        page_size = get_positive_integer("–†–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10): ") or 10
        
        print("\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É:")
        print("1. –ü–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)")
        print("2. –ü–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (—Å—Ç–∞—Ä—ã–µ —Å–Ω–∞—á–∞–ª–∞)")
        print("3. –ü–æ –∑–∞—Ä–ø–ª–∞—Ç–µ (–ø–æ —É–±—ã–≤–∞–Ω–∏—é)")
        print("4. –ü–æ –∑–∞—Ä–ø–ª–∞—Ç–µ (–ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é)")
        print("5. –ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é (–ê-–Ø)")
        print("6. –ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é (–Ø-–ê)")
        
        sort_choice = get_user_input("–í—ã–±–æ—Ä —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1): ") or "1"
        
        sort_options = {
            "1": ("created_at", True),
            "2": ("created_at", False),
            "3": ("salary", True),
            "4": ("salary", False),
            "5": ("title", False),
            "6": ("title", True)
        }
        
        sort_by, sort_desc = sort_options.get(sort_choice, ("created_at", True))
        filters = self._get_basic_filters()
        
        try:
            page = 1
            while True:
                vacancies, total_count = self.storage.get_vacancies_paginated(
                    page=page,
                    page_size=page_size,
                    filters=filters,
                    sort_by=sort_by,
                    sort_desc=sort_desc
                )
                
                if not vacancies and page == 1:
                    print("‚ùå –í–∞–∫–∞–Ω—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                    return
                
                total_pages = (total_count + page_size - 1) // page_size
                print(f"\nüìã –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {total_pages} (–≤—Å–µ–≥–æ {total_count} –≤–∞–∫–∞–Ω—Å–∏–π)")
                print("="*60)
                
                for i, vacancy in enumerate(vacancies, (page-1)*page_size + 1):
                    print(VacancyFormatter.format_vacancy_brief(vacancy, i))
                
                # –ù–∞–≤–∏–≥–∞—Ü–∏—è
                print(f"\nüìñ –ù–∞–≤–∏–≥–∞—Ü–∏—è:")
                if page > 1:
                    print("  ‚Üê p - –ø—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞")
                if page < total_pages:
                    print("  ‚Üí n - —Å–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞")
                print("  üîç s - –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫")
                print("  ‚ùå q - –≤—ã—Ö–æ–¥")
                
                nav_choice = get_user_input("–í–∞—à –≤—ã–±–æ—Ä: ").lower()
                
                if nav_choice == 'n' and page < total_pages:
                    page += 1
                elif nav_choice == 'p' and page > 1:
                    page -= 1
                elif nav_choice == 's':
                    return self._smart_pagination()
                elif nav_choice == 'q':
                    break
                else:
                    print("‚ùì –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

    def _get_basic_filters(self) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –±–∞–∑–æ–≤—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not confirm_action("–ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã?"):
            return None
        
        filters = {}
        
        title_filter = get_user_input("–§–∏–ª—å—Ç—Ä –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é (—á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è): ", required=False)
        if title_filter:
            filters['title'] = title_filter
        
        employer_filter = get_user_input("–§–∏–ª—å—Ç—Ä –ø–æ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—é: ", required=False)
        if employer_filter:
            filters['employer'] = employer_filter
        
        return filters if filters else None
