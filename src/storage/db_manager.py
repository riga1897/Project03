"""
–ß–∏—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è DBManager —Å –µ–¥–∏–Ω—ã–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä–æ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π.
"""

import logging
from typing import Any, Dict, Optional

from src.storage.db_psycopg2_compat import get_psycopg2, get_psycopg_error, is_available as psycopg2_available
from src.storage.db_connection_config import get_db_connection_params

logger = logging.getLogger(__name__)

try:
    PsycopgError = get_psycopg_error()
except ImportError:
    PsycopgError = Exception


class DBManager:
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –µ–¥–∏–Ω—ã–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä–æ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π.
    
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è–º–∏.
    """

    def __init__(self, db_config: Optional[Dict[str, str]] = None):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ë–î."""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        connection_params = get_db_connection_params(db_config)
        
        self.host = connection_params["host"]
        self.port = connection_params["port"] 
        self.database = connection_params["database"]
        self.username = connection_params["user"]
        self.password = connection_params["password"]

    def _get_connection(self):
        """–°–æ–∑–¥–∞–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
        if not psycopg2_available():
            raise ConnectionError("psycopg2 –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

        try:
            psycopg2 = get_psycopg2()
            connection = psycopg2.connect(
                host=self.host,
                port=self.port,
                database=self.database,
                user=self.username,
                password=self.password,
                client_encoding="utf8",
            )
            connection.set_client_encoding("UTF8")
            return connection
        except PsycopgError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
            raise

    def initialize_database(self) -> bool:
        """–ï–î–ò–ù–´–ô –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¢–û–† –ë–î —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º.
        
        –°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –∏ –∑–∞–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–ø–∞–Ω–∏–∏ –≤ –æ–¥–Ω–æ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏.
        """
        try:
            # –ï–î–ò–ù–û–ï —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –¥–ª—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
            with self._get_connection() as conn:
                conn.autocommit = True
                with conn.cursor() as cursor:
                    logger.debug("üîß –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
                    cursor.execute("SET client_encoding TO 'UTF8'")

                    # –°–û–ó–î–ê–ù–ò–ï –¢–ê–ë–õ–ò–¶
                    cursor.execute(
                        """
                        CREATE TABLE IF NOT EXISTS companies (
                            id SERIAL PRIMARY KEY,
                            name VARCHAR(255) NOT NULL UNIQUE,
                            hh_id VARCHAR(50),
                            sj_id VARCHAR(50)
                        );
                        """
                    )
                    logger.debug("‚úÖ –¢–∞–±–ª–∏—Ü–∞ companies —Å–æ–∑–¥–∞–Ω–∞")
                    
                    cursor.execute(
                        """
                        CREATE TABLE IF NOT EXISTS vacancies (
                            id SERIAL PRIMARY KEY,
                            vacancy_id VARCHAR(255) UNIQUE NOT NULL,
                            title TEXT NOT NULL,
                            url TEXT,
                            salary_from INTEGER,
                            salary_to INTEGER,
                            salary_currency VARCHAR(10),
                            description TEXT,
                            requirements TEXT,
                            responsibilities TEXT,
                            experience VARCHAR(100),
                            employment VARCHAR(100),
                            schedule VARCHAR(100),
                            area TEXT,
                            source VARCHAR(50),
                            published_at TIMESTAMP,
                            company_id INTEGER,
                            search_query TEXT,
                            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                        );
                        """
                    )
                    logger.debug("‚úÖ –¢–∞–±–ª–∏—Ü–∞ vacancies —Å–æ–∑–¥–∞–Ω–∞")
                    
                    # –ó–ê–ü–û–õ–ù–ï–ù–ò–ï –ö–û–ú–ü–ê–ù–ò–ô
                    logger.debug("üìä –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∫–æ–º–ø–∞–Ω–∏–π...")
                    self._fill_companies_table(cursor)
                    
                    logger.debug("‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
                    logger.info("‚úì –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Å –µ–¥–∏–Ω—ã–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä–æ–º")
                    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
            return False
        return True
        
    def _fill_companies_table(self, cursor) -> None:
        """–ó–∞–ø–æ–ª–Ω—è–µ—Ç —Ç–∞–±–ª–∏—Ü—É –∫–æ–º–ø–∞–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É—è –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π cursor."""
        cursor.execute("SELECT COUNT(*) FROM companies")
        count = cursor.fetchone()[0]
        if count > 0:
            logger.debug(f"‚ÑπÔ∏è –¢–∞–±–ª–∏—Ü–∞ companies —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç {count} –∑–∞–ø–∏—Å–µ–π")
            return
            
        from src.config.target_companies import TargetCompanies
        
        added = 0
        for company in TargetCompanies.COMPANIES:
            try:
                cursor.execute(
                    """
                    INSERT INTO companies (name, hh_id, sj_id)
                    VALUES (%s, %s, %s)
                    ON CONFLICT (name) DO NOTHING
                    """,
                    (company.name, company.hh_id, company.sj_id)
                )
                added += 1
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–ø–∞–Ω–∏—é {company.name}: {e}")
        
        logger.debug(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {added} –∫–æ–º–ø–∞–Ω–∏–π")

    def check_connection(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
        try:
            with self._get_connection() as conn:
                with conn.cursor() as cursor:
                    cursor.execute("SELECT 1")
                    return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
            return False

    def get_companies_and_vacancies_count(self) -> dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–ø–∞–Ω–∏–π –∏ –≤–∞–∫–∞–Ω—Å–∏–π –≤ –ë–î."""
        try:
            with self._get_connection() as conn:
                with conn.cursor() as cursor:
                    cursor.execute("SELECT COUNT(*) FROM companies")
                    companies_count = cursor.fetchone()[0]
                    cursor.execute("SELECT COUNT(*) FROM vacancies")
                    vacancies_count = cursor.fetchone()[0]
                    return {
                        "companies": companies_count,
                        "vacancies": vacancies_count
                    }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á—ë—Ç–µ –∑–∞–ø–∏—Å–µ–π: {e}")
            return {"companies": 0, "vacancies": 0}

    def get_target_companies_analysis(self) -> list:
        """–ü–æ–ª—É—á–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ –¢–û–õ–¨–ö–û –ø–æ —Ü–µ–ª–µ–≤—ã–º –∫–æ–º–ø–∞–Ω–∏—è–º.

        –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø.10.

        Returns:
            –°–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (–Ω–∞–∑–≤–∞–Ω–∏–µ_—Ü–µ–ª–µ–≤–æ–π_–∫–æ–º–ø–∞–Ω–∏–∏, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–≤–∞–∫–∞–Ω—Å–∏–π).
        """
        try:
            from src.config.target_companies import TargetCompanies
            
            with self._get_connection() as conn:
                with conn.cursor() as cursor:
                    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ü–µ–ª–µ–≤—ã–º –∫–æ–º–ø–∞–Ω–∏—è–º
                    target_companies = TargetCompanies.get_all_companies()
                    result = []
                    
                    for company in target_companies:
                        # –°—á–∏—Ç–∞–µ–º –≤–∞–∫–∞–Ω—Å–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Ü–µ–ª–µ–≤–æ–π –∫–æ–º–ø–∞–Ω–∏–∏
                        cursor.execute("""
                            SELECT COUNT(v.id) 
                            FROM vacancies v 
                            JOIN companies c ON v.company_id = c.id 
                            WHERE c.name = %s
                        """, (company.name,))
                        
                        count = cursor.fetchone()[0]
                        result.append((company.name, count))
                    
                    return result
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ü–µ–ª–µ–≤—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π: {e}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ —Ü–µ–ª–µ–≤—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏ —Å –Ω—É–ª—è–º–∏
            from src.config.target_companies import TargetCompanies
            return [(company.name, 0) for company in TargetCompanies.get_all_companies()]

    def get_all_vacancies(self) -> list:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞—Ä–ø–ª–∞—Ç–µ.

        Returns:
            –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏ –≤–∞–∫–∞–Ω—Å–∏–π.
        """
        try:
            with self._get_connection() as conn:
                with conn.cursor() as cursor:
                    cursor.execute("""
                        SELECT 
                            v.vacancy_id, 
                            v.title, 
                            v.url, 
                            v.salary_from, 
                            v.salary_to, 
                            v.salary_currency, 
                            -- –§–æ—Ä–º–∏—Ä—É–µ–º salary_info –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–µ–π
                            CASE
                                WHEN v.salary_from IS NOT NULL AND v.salary_to IS NOT NULL THEN
                                    CONCAT(v.salary_from, ' - ', v.salary_to, ' ', COALESCE(v.salary_currency, 'RUR'))
                                WHEN v.salary_from IS NOT NULL THEN
                                    CONCAT('–æ—Ç ', v.salary_from, ' ', COALESCE(v.salary_currency, 'RUR'))
                                WHEN v.salary_to IS NOT NULL THEN
                                    CONCAT('–¥–æ ', v.salary_to, ' ', COALESCE(v.salary_currency, 'RUR'))
                                ELSE '–ù–µ —É–∫–∞–∑–∞–Ω–∞'
                            END as salary_info,
                            v.description, 
                            v.requirements, 
                            v.responsibilities,
                            v.experience, 
                            v.employment, 
                            v.schedule, 
                            v.area, 
                            v.source, 
                            v.published_at, 
                            COALESCE(c.name, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è') as company_name
                        FROM vacancies v
                        LEFT JOIN companies c ON v.company_id = c.id
                        ORDER BY v.salary_from DESC NULLS LAST, c.name, v.title
                    """)
                    
                    columns = [desc[0] for desc in cursor.description]
                    rows = cursor.fetchall()
                    
                    return [dict(zip(columns, row)) for row in rows]
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Å–µ—Ö –≤–∞–∫–∞–Ω—Å–∏–π: {e}")
            return []

    def get_avg_salary(self) -> float:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ä–µ–¥–Ω—é—é –∑–∞—Ä–ø–ª–∞—Ç—É –ø–æ –≤—Å–µ–º –≤–∞–∫–∞–Ω—Å–∏—è–º.

        Returns:
            –°—Ä–µ–¥–Ω—è—è –∑–∞—Ä–ø–ª–∞—Ç–∞ –≤ —Ä—É–±–ª—è—Ö –∏–ª–∏ None –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç.
        """
        try:
            with self._get_connection() as conn:
                with conn.cursor() as cursor:
                    cursor.execute("""
                        SELECT AVG(
                            CASE
                                WHEN salary_from IS NOT NULL AND salary_to IS NOT NULL THEN
                                    (salary_from + salary_to) / 2
                                WHEN salary_from IS NOT NULL THEN salary_from
                                WHEN salary_to IS NOT NULL THEN salary_to
                                ELSE NULL
                            END
                        ) as avg_salary
                        FROM vacancies
                        WHERE (salary_from IS NOT NULL OR salary_to IS NOT NULL)
                        AND salary_currency IN ('RUR', 'RUB', '—Ä—É–±.', 'rub', NULL)
                    """)
                    
                    result = cursor.fetchone()
                    return float(result[0]) if result and result[0] is not None else None
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ —Å—Ä–µ–¥–Ω–µ–π –∑–∞—Ä–ø–ª–∞—Ç—ã: {e}")
            return None

    def get_vacancies_with_higher_salary(self) -> list:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤–∞–∫–∞–Ω—Å–∏–∏ —Å –∑–∞—Ä–ø–ª–∞—Ç–æ–π –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–π.

        Returns:
            –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏ –≤–∞–∫–∞–Ω—Å–∏–π.
        """
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Å—Ä–µ–¥–Ω—é—é –∑–∞—Ä–ø–ª–∞—Ç—É
            avg_salary = self.get_avg_salary()
            if avg_salary is None:
                logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ä–µ–¥–Ω—é—é –∑–∞—Ä–ø–ª–∞—Ç—É")
                return []

            with self._get_connection() as conn:
                with conn.cursor() as cursor:
                    cursor.execute("""
                        SELECT 
                            v.title,
                            COALESCE(c.name, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è') as company_name,
                            CASE
                                WHEN v.salary_from IS NOT NULL AND v.salary_to IS NOT NULL THEN
                                    CONCAT(v.salary_from, ' - ', v.salary_to, ' ', COALESCE(v.salary_currency, 'RUR'))
                                WHEN v.salary_from IS NOT NULL THEN
                                    CONCAT('–æ—Ç ', v.salary_from, ' ', COALESCE(v.salary_currency, 'RUR'))
                                WHEN v.salary_to IS NOT NULL THEN
                                    CONCAT('–¥–æ ', v.salary_to, ' ', COALESCE(v.salary_currency, 'RUR'))
                                ELSE '–ù–µ —É–∫–∞–∑–∞–Ω–∞'
                            END as salary_info,
                            v.url,
                            v.vacancy_id
                        FROM vacancies v
                        LEFT JOIN companies c ON v.company_id = c.id
                        WHERE (
                            CASE
                                WHEN v.salary_from IS NOT NULL AND v.salary_to IS NOT NULL THEN
                                    (v.salary_from + v.salary_to) / 2
                                WHEN v.salary_from IS NOT NULL THEN v.salary_from
                                WHEN v.salary_to IS NOT NULL THEN v.salary_to
                                ELSE NULL
                            END
                        ) > %s
                        ORDER BY 
                            CASE
                                WHEN v.salary_from IS NOT NULL AND v.salary_to IS NOT NULL THEN
                                    (v.salary_from + v.salary_to) / 2
                                WHEN v.salary_from IS NOT NULL THEN v.salary_from
                                WHEN v.salary_to IS NOT NULL THEN v.salary_to
                                ELSE 0
                            END DESC
                    """, (avg_salary,))
                    
                    columns = [desc[0] for desc in cursor.description]
                    rows = cursor.fetchall()
                    
                    return [dict(zip(columns, row)) for row in rows]
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∞–∫–∞–Ω—Å–∏–π —Å –≤—ã—Å–æ–∫–æ–π –∑–∞—Ä–ø–ª–∞—Ç–æ–π: {e}")
            return []

    def get_vacancies_with_keyword(self, keyword: str) -> list:
        """–ü–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É.

        Args:
            keyword: –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞.

        Returns:
            –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π.
        """
        try:
            with self._get_connection() as conn:
                with conn.cursor() as cursor:
                    search_pattern = f"%{keyword.lower()}%"
                    cursor.execute("""
                        SELECT 
                            v.title,
                            COALESCE(c.name, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è') as company_name,
                            CASE
                                WHEN v.salary_from IS NOT NULL AND v.salary_to IS NOT NULL THEN
                                    CONCAT(v.salary_from, ' - ', v.salary_to, ' ', COALESCE(v.salary_currency, 'RUR'))
                                WHEN v.salary_from IS NOT NULL THEN
                                    CONCAT('–æ—Ç ', v.salary_from, ' ', COALESCE(v.salary_currency, 'RUR'))
                                WHEN v.salary_to IS NOT NULL THEN
                                    CONCAT('–¥–æ ', v.salary_to, ' ', COALESCE(v.salary_currency, 'RUR'))
                                ELSE '–ù–µ —É–∫–∞–∑–∞–Ω–∞'
                            END as salary_info,
                            v.url,
                            v.vacancy_id
                        FROM vacancies v
                        LEFT JOIN companies c ON v.company_id = c.id
                        WHERE 
                            LOWER(v.title) LIKE %s OR 
                            LOWER(v.description) LIKE %s OR
                            LOWER(v.requirements) LIKE %s OR
                            LOWER(v.responsibilities) LIKE %s
                        ORDER BY v.title
                    """, (search_pattern, search_pattern, search_pattern, search_pattern))
                    
                    columns = [desc[0] for desc in cursor.description]
                    rows = cursor.fetchall()
                    
                    return [dict(zip(columns, row)) for row in rows]
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É '{keyword}': {e}")
            return []

    def get_database_stats(self) -> dict:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.

        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –ë–î.
        """
        try:
            with self._get_connection() as conn:
                with conn.cursor() as cursor:
                    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                    cursor.execute("SELECT COUNT(*) FROM companies")
                    companies_count = cursor.fetchone()[0]
                    
                    cursor.execute("SELECT COUNT(*) FROM vacancies")
                    vacancies_count = cursor.fetchone()[0]
                    
                    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–∞—Ä–ø–ª–∞—Ç–∞–º
                    cursor.execute("""
                        SELECT COUNT(*) FROM vacancies 
                        WHERE salary_from IS NOT NULL OR salary_to IS NOT NULL
                    """)
                    vacancies_with_salary = cursor.fetchone()[0]
                    
                    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
                    cursor.execute("""
                        SELECT source, COUNT(*) as count 
                        FROM vacancies 
                        GROUP BY source 
                        ORDER BY count DESC
                    """)
                    source_stats = cursor.fetchall()
                    
                    # –¢–æ–ø –∫–æ–º–ø–∞–Ω–∏–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –≤–∞–∫–∞–Ω—Å–∏–π
                    cursor.execute("""
                        SELECT c.name, COUNT(v.id) as count 
                        FROM companies c 
                        LEFT JOIN vacancies v ON c.id = v.company_id 
                        GROUP BY c.name 
                        HAVING COUNT(v.id) > 0
                        ORDER BY count DESC 
                        LIMIT 5
                    """)
                    top_companies = cursor.fetchall()
                    
                    return {
                        'companies': companies_count,
                        'vacancies': vacancies_count,
                        'vacancies_with_salary': vacancies_with_salary,
                        'vacancy_salary_percentage': round((vacancies_with_salary / vacancies_count * 100), 1) if vacancies_count > 0 else 0,
                        'source_stats': [{'source': row[0], 'count': row[1]} for row in source_stats],
                        'top_companies': [{'name': row[0], 'count': row[1]} for row in top_companies]
                    }
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ë–î: {e}")
            return {
                'companies': 0,
                'vacancies': 0,
                'vacancies_with_salary': 0,
                'vacancy_salary_percentage': 0,
                'source_stats': [],
                'top_companies': []
            }

    # –ú–ï–¢–û–î–´ –î–õ–Ø –û–ë–†–ê–¢–ù–û–ô –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò
    def create_tables(self) -> bool:
        """[–£–°–¢–ê–†–ï–õ–û] –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ initialize_database()."""
        logger.warning("–ú–µ—Ç–æ–¥ create_tables() —É—Å—Ç–∞—Ä–µ–ª. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ initialize_database()")
        return self.initialize_database()

    def populate_companies_table(self) -> bool:
        """[–£–°–¢–ê–†–ï–õ–û] –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ initialize_database().""" 
        logger.warning("–ú–µ—Ç–æ–¥ populate_companies_table() —É—Å—Ç–∞—Ä–µ–ª. –¢–µ–ø–µ—Ä—å –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ initialize_database()")
        return True