import logging
from typing import Dict, List, Any

from src.vacancies.models import Vacancy
from src.vacancies.parsers.sj_parser import SuperJobParser

from .hh_api import HeadHunterAPI
from .sj_api import SuperJobAPI

from tqdm import tqdm


logger = logging.getLogger(__name__)


class UnifiedAPI:
    """–£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏ –≤–∞–∫–∞–Ω—Å–∏–π"""

    def __init__(self):
        self.hh_api = HeadHunterAPI()
        self.sj_api = SuperJobAPI()
        self.parser = SuperJobParser()

    @staticmethod
    def _deduplicate_cross_platform(all_vacancies: List[Dict]) -> List[Dict]:
        """
        –ú–µ–∂–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–∞—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è –≤–∞–∫–∞–Ω—Å–∏–π –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤

        Args:
            all_vacancies: –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–∞–∫–∞–Ω—Å–∏–π –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤

        Returns:
            List[Dict]: –°–ø–∏—Å–æ–∫ –≤–∞–∫–∞–Ω—Å–∏–π –±–µ–∑ –¥—É–±–ª–µ–π –º–µ–∂–¥—É –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º–∏
        """
        if not all_vacancies:
            return []



        seen = set()
        unique_vacancies = []

        print("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–∏—Å–∫ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –º–µ–∂–¥—É –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º–∏...")
        with tqdm(total=len(all_vacancies), desc="–ü–æ–∏—Å–∫ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤", unit="–≤–∞–∫–∞–Ω—Å–∏—è") as pbar:
            for vacancy in all_vacancies:
                # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏ –º–µ–∂–¥—É –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏
                title = vacancy.get("name", vacancy.get("profession", "")).lower().strip()
                company = vacancy.get("employer", {}).get("name", vacancy.get("firm_name", "")).lower().strip()

                # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∑–∞—Ä–ø–ª–∞—Ç—É –¥–ª—è –º–µ–∂–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                salary_key = ""
                if "salary" in vacancy and vacancy["salary"]:
                    salary = vacancy["salary"]
                    salary_from = salary.get("from", 0) or 0
                    salary_to = salary.get("to", 0) or 0
                    salary_key = f"{salary_from}-{salary_to}"
                elif "payment_from" in vacancy:
                    salary_key = f"{vacancy.get('payment_from', 0)}-{vacancy.get('payment_to', 0)}"

                dedup_key = (title, company, salary_key)

                if dedup_key not in seen:
                    seen.add(dedup_key)
                    unique_vacancies.append(vacancy)
                else:
                    logger.debug(f"–ú–µ–∂–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—ã–π –¥—É–±–ª—å –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω: {title} –≤ {company}")

                pbar.update(1)

        duplicates_found = len(all_vacancies) - len(unique_vacancies)
        if duplicates_found > 0:
            print(f"–ù–∞–π–¥–µ–Ω–æ –∏ —É–¥–∞–ª–µ–Ω–æ {duplicates_found} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –º–µ–∂–¥—É –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º–∏")

        logger.info(f"–ú–µ–∂–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–∞—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è: {len(all_vacancies)} -> {len(unique_vacancies)} –≤–∞–∫–∞–Ω—Å–∏–π")
        return unique_vacancies

    def get_vacancies_from_sources(self, search_query: str, sources: List[str] = None, **kwargs: dict[str, Any]) -> List[Dict]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–π –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Å –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–µ–π

        Args:
            search_query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            sources: –°–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ ['hh', 'sj']
            **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è API

        Returns:
            List[Dict]: –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π
        """
        if sources is None:
            sources = self.get_available_sources()
        else:
            sources = self.validate_sources(sources)

        all_vacancies = []
        hh_vacancies = []
        sj_vacancies = []

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑ HeadHunter —Å –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–µ–π
        if "hh" in sources:
            try:
                logger.info(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–π —Å HH.ru –ø–æ –∑–∞–ø—Ä–æ—Å—É: '{search_query}'")
                hh_data = self.hh_api.get_vacancies_with_deduplication(search_query, **kwargs)
                hh_vacancies = [Vacancy.from_dict(item).to_dict() for item in hh_data]

                if hh_vacancies:
                    logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(hh_vacancies)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π —Å HH.ru")
                    all_vacancies.extend(hh_vacancies)

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–π —Å HH.ru: {e}")

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç SuperJob —Å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ–º
        if "sj" in sources:
            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–µ—Ä–∏–æ–¥–∞ –º–µ–∂–¥—É API
            sj_kwargs = kwargs.copy()
            if "period" in kwargs:
                sj_kwargs["published"] = kwargs["period"]
                sj_kwargs.pop("period", None)  # –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä

            # –ü–æ–ª—É—á–∞–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ SuperJob
            sj_data = self.sj_api.get_vacancies(search_query, **sj_kwargs)

            if sj_data:
                logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(sj_data)} —Å—ã—Ä—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π SuperJob")
                # –î–æ–±–∞–≤–ª—è–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –±–µ–∑ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
                all_vacancies.extend(sj_data)


        # –í—ã–≤–æ–¥–∏–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –ø—Ä–∏–º–µ–Ω—è–µ–º –º–µ–∂–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—É—é –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—é
        if all_vacancies:
            print(f"\n–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ {len(all_vacancies)} –≤–∞–∫–∞–Ω—Å–∏–π")

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É–∂–µ –ø–æ–∫–∞–∑–∞–Ω–∞ –≤—ã—à–µ –¥–ª—è —Ü–µ–ª–µ–≤—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π
            return self._deduplicate_cross_platform(all_vacancies)
        else:
            return []

    def get_hh_vacancies(self, query: str, **kwargs) -> List[Vacancy]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–π —Ç–æ–ª—å–∫–æ —Å HH.ru —Å –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–µ–π"""
        try:
            hh_data = self.hh_api.get_vacancies_with_deduplication(query, **kwargs)
            return [Vacancy.from_dict(item) for item in hh_data]
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–π HH: {e}")
            return []

    def get_sj_vacancies(self, query: str, **kwargs) -> List[Vacancy]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–π —Ç–æ–ª—å–∫–æ —Å SuperJob —Å –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–µ–π"""
        try:
            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–µ—Ä–∏–æ–¥–∞
            sj_kwargs = kwargs.copy()
            if "period" in kwargs:
                # HH –∏—Å–ø–æ–ª—å–∑—É–µ—Ç 'period', SuperJob –∏—Å–ø–æ–ª—å–∑—É–µ—Ç 'published'
                sj_kwargs["published"] = kwargs["period"]
                sj_kwargs.pop("period", None)  # –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä

            sj_data = self.sj_api.get_vacancies_with_deduplication(query, **sj_kwargs)

            # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ SuperJob –≤ –æ–±—ä–µ–∫—Ç—ã SuperJobVacancy
            if sj_data:
                from tqdm import tqdm

                print(f"–ü–∞—Ä—Å–∏–Ω–≥ {len(sj_data)} –≤–∞–∫–∞–Ω—Å–∏–π SuperJob...")
                sj_vacancies_raw = self.parser.parse_vacancies(sj_data)

                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º SuperJobVacancy –≤ —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
                sj_vacancies = []
                print("–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∞–∫–∞–Ω—Å–∏–π SuperJob –≤ —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç...")

                with tqdm(total=len(sj_vacancies_raw), desc="–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è SJ", unit="–≤–∞–∫–∞–Ω—Å–∏—è") as pbar:
                    for sj_vac in sj_vacancies_raw:
                        try:
                            unified_data = self.parser.convert_to_unified_format(sj_vac)
                            vacancy = Vacancy.from_dict(unified_data)
                            sj_vacancies.append(vacancy)
                        except Exception as e:
                            logger.warning(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∞–∫–∞–Ω—Å–∏–∏ SuperJob: {e}")
                        finally:
                            pbar.update(1)

                return sj_vacancies
            return []
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–π SJ: {e}")
            return []

    def clear_cache(self, sources: Dict[str, bool]) -> None:
        """
        –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤

        Args:
            sources: –°–ª–æ–≤–∞—Ä—å —Å –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
        """
        try:
            if sources.get("hh", False):
                self.hh_api.clear_cache("hh")
                logger.info("–ö—ç—à HH.ru –æ—á–∏—â–µ–Ω")
                print("‚úÖ –ö—ç—à HH.ru –æ—á–∏—â–µ–Ω")

            if sources.get("sj", False):
                self.sj_api.clear_cache("sj")
                logger.info("–ö—ç—à SuperJob –æ—á–∏—â–µ–Ω")
                print("‚úÖ –ö—ç—à SuperJob –æ—á–∏—â–µ–Ω")

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã –∫—ç—à–∞
            import os
            import glob

            cache_dir = "data/cache"
            if sources.get("hh", False):
                hh_files = glob.glob(f"{cache_dir}/hh/hh_*.json")
                for file in hh_files:
                    try:
                        os.remove(file)
                    except Exception as e:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª {file}: {e}")
                print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ {len(hh_files)} —Ñ–∞–π–ª–æ–≤ –∫—ç—à–∞ HH.ru")

            if sources.get("sj", False):
                sj_files = glob.glob(f"{cache_dir}/sj/sj_*.json")
                for file in sj_files:
                    try:
                        os.remove(file)
                    except Exception as e:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª {file}: {e}")
                print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ {len(sj_files)} —Ñ–∞–π–ª–æ–≤ –∫—ç—à–∞ SuperJob")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫—ç—à–∞: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫—ç—à–∞: {e}")
            raise

    def get_vacancies_from_target_companies(self, search_query: str = "", sources: List[str] = None, **kwargs) -> List[Dict]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–π —Ç–æ–ª—å–∫–æ –æ—Ç —Ü–µ–ª–µ–≤—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π

        Args:
            search_query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            sources: –°–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ ['hh', 'sj']
            **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è API

        Returns:
            List[Dict]: –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π –æ—Ç —Ü–µ–ª–µ–≤—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π
        """
        if sources is None:
            sources = ["hh"]  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–æ–ª—å–∫–æ HH, —Ç–∞–∫ –∫–∞–∫ —É SuperJob –Ω–µ—Ç —Ç–∞–∫–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        else:
            sources = self.validate_sources(sources)

        # –õ–æ–≥–∏—Ä—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
        logger.info(f"–í—ã–±—Ä–∞–Ω–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞: {sources}")

        all_vacancies = []
        hh_vacancies = []
        sj_vacancies = []

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç —Ü–µ–ª–µ–≤—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π —Å HH.ru
        if "hh" in sources:
            try:
                logger.info(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–π –æ—Ç —Ü–µ–ª–µ–≤—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π —Å HH.ru –ø–æ –∑–∞–ø—Ä–æ—Å—É: '{search_query}'")
                hh_data = self.hh_api.get_vacancies_from_target_companies(search_query, **kwargs)
                hh_vacancies = [Vacancy.from_dict(item).to_dict() for item in hh_data]

                if hh_vacancies:
                    logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(hh_vacancies)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π –æ—Ç —Ü–µ–ª–µ–≤—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π —Å HH.ru")
                    all_vacancies.extend(hh_vacancies)

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–π –æ—Ç —Ü–µ–ª–µ–≤—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π —Å HH.ru: {e}")

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç —Ü–µ–ª–µ–≤—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π —Å SuperJob (–ø–æ—Å—Ç-—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è)
        if "sj" in sources:
            try:
                logger.info(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–π –æ—Ç —Ü–µ–ª–µ–≤—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π —Å SuperJob –ø–æ –∑–∞–ø—Ä–æ—Å—É: '{search_query}'")
                # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–µ—Ä–∏–æ–¥–∞ –º–µ–∂–¥—É API
                sj_kwargs = kwargs.copy()
                if "period" in kwargs:
                    sj_kwargs["published"] = kwargs["period"]
                    sj_kwargs.pop("period", None)

                sj_data = self.sj_api.get_vacancies_from_target_companies(search_query, **sj_kwargs)

                if sj_data:
                    from tqdm import tqdm

                    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ SuperJob –≤ –æ–±—ä–µ–∫—Ç—ã SuperJobVacancy —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º
                    print(f"–ü–∞—Ä—Å–∏–Ω–≥ {len(sj_data)} –≤–∞–∫–∞–Ω—Å–∏–π SuperJob –æ—Ç —Ü–µ–ª–µ–≤—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π...")
                    sj_vacancies_raw = self.parser.parse_vacancies(sj_data)

                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º SuperJobVacancy –≤ —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º
                    sj_vacancies = []
                    print("–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∞–∫–∞–Ω—Å–∏–π SuperJob –≤ —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç...")

                    with tqdm(total=len(sj_vacancies_raw), desc="–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è SJ", unit="–≤–∞–∫–∞–Ω—Å–∏—è") as pbar:
                        for sj_vac in sj_vacancies_raw:
                            try:
                                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º SuperJobVacancy –≤ —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
                                unified_data = self.parser.convert_to_unified_format(sj_vac)
                                vacancy = Vacancy.from_dict(unified_data)
                                sj_vacancies.append(vacancy.to_dict())
                            except Exception as e:
                                logger.warning(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∞–∫–∞–Ω—Å–∏–∏ SuperJob: {e}")
                            finally:
                                pbar.update(1)

                    if sj_vacancies:
                        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(sj_vacancies)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π –æ—Ç —Ü–µ–ª–µ–≤—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π —Å SuperJob")
                        all_vacancies.extend(sj_vacancies)

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–π –æ—Ç —Ü–µ–ª–µ–≤—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π —Å SuperJob: {e}")

        # –í—ã–≤–æ–¥–∏–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –ø—Ä–∏–º–µ–Ω—è–µ–º –º–µ–∂–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—É—é –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—é
        if all_vacancies:
            logger.info(f"–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ {len(all_vacancies)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π –æ—Ç —Ü–µ–ª–µ–≤—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π")
            print(f"–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ {len(all_vacancies)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π –æ—Ç —Ü–µ–ª–µ–≤—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π")

            return all_vacancies
        else:
            return []

    def clear_all_cache(self) -> None:
        """–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –≤—Å–µ—Ö API"""
        # –û—á–∏—â–∞–µ–º –∫—ç—à –∫–∞–∂–¥–æ–≥–æ API –æ—Ç–¥–µ–ª—å–Ω–æ, —á—Ç–æ–±—ã –æ—à–∏–±–∫–∞ –≤ –æ–¥–Ω–æ–º –Ω–µ –≤–ª–∏—è–ª–∞ –Ω–∞ –¥—Ä—É–≥–æ–π
        try:
            self.hh_api.clear_cache("hh")
            logger.info("–ö—ç—à HH.ru –æ—á–∏—â–µ–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞ HH.ru: {e}")

        try:
            self.sj_api.clear_cache("sj")
            logger.info("–ö—ç—à SuperJob –æ—á–∏—â–µ–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞ SuperJob: {e}")

    @staticmethod
    def get_available_sources() -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
        return ["hh", "sj"]

    def validate_sources(self, sources: List[str]) -> List[str]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
        available = self.get_available_sources()
        valid_sources = [s for s in sources if s in available]

        if not valid_sources:
            logger.warning(f"–ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –≤ {sources}, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ")
            return available

        return valid_sources

    def get_all_vacancies(self, query: str, **kwargs: dict[str, Any]) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –≤–∞–∫–∞–Ω—Å–∏–π –∏–∑ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
        sources = self.get_available_sources()
        return self.get_vacancies_from_sources(query, sources=sources, **kwargs)

    def get_vacancies_from_all_sources(self, query: str, **kwargs: dict[str, Any]) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–π –∏–∑ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
        return self.get_all_vacancies(query, sources=["hh", "sj"], **kwargs)

    def get_vacancies_from_source(self, query: str, source: str, **kwargs: dict[str, Any]) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–π –∏–∑ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞"""
        if source.lower() == "hh":
            return self.get_hh_vacancies(query, **kwargs)
        elif source.lower() in ["sj", "superjob"]:
            return self.get_sj_vacancies(query, **kwargs)
        else:
            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫: {source}")
            return []

    def get_companies_from_all_sources(self, **kwargs: dict[str, Any]) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–π –∏–∑ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
        companies = []

        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–ø–∞–Ω–∏–∏ —Å HH
            hh_companies = self.hh_api.get_companies(**kwargs)
            if hh_companies:
                companies.extend(hh_companies)

            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–ø–∞–Ω–∏–∏ —Å SJ
            sj_companies = self.sj_api.get_companies(**kwargs)
            if sj_companies:
                companies.extend(sj_companies)

            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(companies)} –∫–æ–º–ø–∞–Ω–∏–π –∏–∑ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤")
            return companies
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–º–ø–∞–Ω–∏–π –∏–∑ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {e}")
            return []

    def get_companies_from_source(self, source: str, **kwargs: dict[str, Any]) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–π –∏–∑ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞"""
        try:
            if source.lower() == "hh":
                return self.hh_api.get_companies(**kwargs)
            elif source.lower() in ["sj", "superjob"]:
                return self.sj_api.get_companies(**kwargs)
            else:
                logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫: {source}")
                return []
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–º–ø–∞–Ω–∏–π –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ {source}: {e}")
            return []

    def search_with_multiple_keywords(self, keywords: List[str], **kwargs: dict[str, Any]) -> List[Dict[str, Any]]:
        """–ü–æ–∏—Å–∫ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏"""
        all_results = []

        for keyword in keywords:
            try:
                results = self.get_all_vacancies(keyword, **kwargs)
                if results:
                    all_results.extend(results)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É '{keyword}': {e}")
                continue

        # –î–µ–¥—É–ø–ª–∏—Ü–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ ID
        seen_ids = set()
        unique_results = []

        for result in all_results:
            vacancy_id = result.get('id') or result.get('vacancy_id')
            if vacancy_id not in seen_ids:
                seen_ids.add(vacancy_id)
                unique_results.append(result)

        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(unique_results)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π –ø–æ {len(keywords)} –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º")
        return unique_results