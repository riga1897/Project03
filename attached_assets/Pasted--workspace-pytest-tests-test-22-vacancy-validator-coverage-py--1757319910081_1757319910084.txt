~/workspace$ pytest tests/test_22_vacancy_validator_coverage.py
=================================== test session starts ====================================
platform linux -- Python 3.11.13, pytest-8.4.2, pluggy-1.6.0
rootdir: /home/runner/workspace
configfile: pyproject.toml
plugins: cov-6.2.1, mock-3.15.0
collected 42 items                                                                         

tests/test_22_vacancy_validator_coverage.py .F....FFFFFFFFFF...F.FF...FFF....FF.FF.F [ 95%]
FF                                                                                   [100%]

========================================= FAILURES =========================================
____________________ TestVacancyValidator.test_validate_vacancy_success ____________________

self = <tests.test_22_vacancy_validator_coverage.TestVacancyValidator object at 0x7f9bdbbfdf50>

    def test_validate_vacancy_success(self):
        """Покрытие успешной валидации вакансии"""
        validator = VacancyValidator()
        vacancy = MockAbstractVacancy()
    
>       result = validator.validate_vacancy(vacancy)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_22_vacancy_validator_coverage.py:60: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/storage/components/vacancy_validator.py:61: in validate_vacancy
    if not self._validate_data_types(vacancy):
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/storage/components/vacancy_validator.py:98: in _validate_data_types
    if not isinstance(value, expected_types):
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = typing.Any, obj = 'Test Company'

    def __instancecheck__(self, obj):
        if self is Any:
>           raise TypeError("typing.Any cannot be used with isinstance()")
E           TypeError: typing.Any cannot be used with isinstance()

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/typing.py:515: TypeError
___________ TestVacancyValidator.test_validate_vacancy_wrong_type_optional_field ___________

self = <tests.test_22_vacancy_validator_coverage.TestVacancyValidator object at 0x7f9bdbbff910>

    def test_validate_vacancy_wrong_type_optional_field(self):
        """Покрытие валидации с неверным типом опционального поля"""
        validator = VacancyValidator()
        vacancy = MockAbstractVacancy()
        vacancy.description = 123  # Число вместо строки
    
>       result = validator.validate_vacancy(vacancy)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_22_vacancy_validator_coverage.py:119: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/storage/components/vacancy_validator.py:61: in validate_vacancy
    if not self._validate_data_types(vacancy):
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/storage/components/vacancy_validator.py:98: in _validate_data_types
    if not isinstance(value, expected_types):
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = typing.Any, obj = 'Test Company'

    def __instancecheck__(self, obj):
        if self is Any:
>           raise TypeError("typing.Any cannot be used with isinstance()")
E           TypeError: typing.Any cannot be used with isinstance()

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/typing.py:515: TypeError
______________ TestVacancyValidator.test_validate_vacancy_none_optional_field ______________

self = <tests.test_22_vacancy_validator_coverage.TestVacancyValidator object at 0x7f9bdbbfff10>

    def test_validate_vacancy_none_optional_field(self):
        """Покрытие валидации с None в опциональном поле"""
        validator = VacancyValidator()
        vacancy = MockAbstractVacancy()
        vacancy.description = None  # None разрешен в опциональных полях
    
>       result = validator.validate_vacancy(vacancy)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_22_vacancy_validator_coverage.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/storage/components/vacancy_validator.py:61: in validate_vacancy
    if not self._validate_data_types(vacancy):
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/storage/components/vacancy_validator.py:98: in _validate_data_types
    if not isinstance(value, expected_types):
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = typing.Any, obj = 'Test Company'

    def __instancecheck__(self, obj):
        if self is Any:
>           raise TypeError("typing.Any cannot be used with isinstance()")
E           TypeError: typing.Any cannot be used with isinstance()

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/typing.py:515: TypeError
____________ TestVacancyValidator.test_validate_vacancy_missing_optional_field _____________

self = <tests.test_22_vacancy_validator_coverage.TestVacancyValidator object at 0x7f9bdb704550>

    def test_validate_vacancy_missing_optional_field(self):
        """Покрытие валидации с отсутствующим опциональным полем"""
        validator = VacancyValidator()
        vacancy = MockAbstractVacancy()
        delattr(vacancy, 'description')  # Удаляем опциональное поле
    
>       result = validator.validate_vacancy(vacancy)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_22_vacancy_validator_coverage.py:142: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/storage/components/vacancy_validator.py:61: in validate_vacancy
    if not self._validate_data_types(vacancy):
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/storage/components/vacancy_validator.py:98: in _validate_data_types
    if not isinstance(value, expected_types):
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = typing.Any, obj = 'Test Company'

    def __instancecheck__(self, obj):
        if self is Any:
>           raise TypeError("typing.Any cannot be used with isinstance()")
E           TypeError: typing.Any cannot be used with isinstance()

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/typing.py:515: TypeError
____________ TestVacancyValidator.test_validate_vacancy_invalid_url_no_protocol ____________

self = <tests.test_22_vacancy_validator_coverage.TestVacancyValidator object at 0x7f9bdb704b10>

    def test_validate_vacancy_invalid_url_no_protocol(self):
        """Покрытие валидации с URL без протокола"""
        validator = VacancyValidator()
        vacancy = MockAbstractVacancy()
        vacancy.url = "example.com/job"  # Без http/https
    
>       result = validator.validate_vacancy(vacancy)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_22_vacancy_validator_coverage.py:153: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/storage/components/vacancy_validator.py:61: in validate_vacancy
    if not self._validate_data_types(vacancy):
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/storage/components/vacancy_validator.py:98: in _validate_data_types
    if not isinstance(value, expected_types):
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = typing.Any, obj = 'Test Company'

    def __instancecheck__(self, obj):
        if self is Any:
>           raise TypeError("typing.Any cannot be used with isinstance()")
E           TypeError: typing.Any cannot be used with isinstance()

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/typing.py:515: TypeError
________________ TestVacancyValidator.test_validate_vacancy_valid_http_url _________________

self = <tests.test_22_vacancy_validator_coverage.TestVacancyValidator object at 0x7f9bdb705110>

    def test_validate_vacancy_valid_http_url(self):
        """Покрытие валидации с корректным HTTP URL"""
        validator = VacancyValidator()
        vacancy = MockAbstractVacancy()
        vacancy.url = "http://example.com/job"
    
>       result = validator.validate_vacancy(vacancy)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_22_vacancy_validator_coverage.py:165: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/storage/components/vacancy_validator.py:61: in validate_vacancy
    if not self._validate_data_types(vacancy):
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/storage/components/vacancy_validator.py:98: in _validate_data_types
    if not isinstance(value, expected_types):
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = typing.Any, obj = 'Test Company'

    def __instancecheck__(self, obj):
        if self is Any:
>           raise TypeError("typing.Any cannot be used with isinstance()")
E           TypeError: typing.Any cannot be used with isinstance()

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/typing.py:515: TypeError
________________ TestVacancyValidator.test_validate_vacancy_valid_https_url ________________

self = <tests.test_22_vacancy_validator_coverage.TestVacancyValidator object at 0x7f9bdb705710>

    def test_validate_vacancy_valid_https_url(self):
        """Покрытие валидации с корректным HTTPS URL"""
        validator = VacancyValidator()
        vacancy = MockAbstractVacancy()
        vacancy.url = "https://example.com/job"
    
>       result = validator.validate_vacancy(vacancy)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_22_vacancy_validator_coverage.py:176: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/storage/components/vacancy_validator.py:61: in validate_vacancy
    if not self._validate_data_types(vacancy):
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/storage/components/vacancy_validator.py:98: in _validate_data_types
    if not isinstance(value, expected_types):
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = typing.Any, obj = 'Test Company'

    def __instancecheck__(self, obj):
        if self is Any:
>           raise TypeError("typing.Any cannot be used with isinstance()")
E           TypeError: typing.Any cannot be used with isinstance()

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/typing.py:515: TypeError
__________________ TestVacancyValidator.test_validate_vacancy_too_long_id __________________

self = <tests.test_22_vacancy_validator_coverage.TestVacancyValidator object at 0x7f9bdb705d50>

    def test_validate_vacancy_too_long_id(self):
        """Покрытие валидации со слишком длинным ID"""
        validator = VacancyValidator()
        vacancy = MockAbstractVacancy()
        vacancy.vacancy_id = "x" * 101  # Превышает лимит в 100 символов
    
>       result = validator.validate_vacancy(vacancy)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_22_vacancy_validator_coverage.py:187: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/storage/components/vacancy_validator.py:61: in validate_vacancy
    if not self._validate_data_types(vacancy):
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/storage/components/vacancy_validator.py:98: in _validate_data_types
    if not isinstance(value, expected_types):
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = typing.Any, obj = 'Test Company'

    def __instancecheck__(self, obj):
        if self is Any:
>           raise TypeError("typing.Any cannot be used with isinstance()")
E           TypeError: typing.Any cannot be used with isinstance()

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/typing.py:515: TypeError
_________________ TestVacancyValidator.test_validate_vacancy_max_length_id _________________

self = <tests.test_22_vacancy_validator_coverage.TestVacancyValidator object at 0x7f9bdb706350>

    def test_validate_vacancy_max_length_id(self):
        """Покрытие валидации с ID максимальной длины"""
        validator = VacancyValidator()
        vacancy = MockAbstractVacancy()
        vacancy.vacancy_id = "x" * 100  # Ровно на границе лимита
    
>       result = validator.validate_vacancy(vacancy)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_22_vacancy_validator_coverage.py:199: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/storage/components/vacancy_validator.py:61: in validate_vacancy
    if not self._validate_data_types(vacancy):
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/storage/components/vacancy_validator.py:98: in _validate_data_types
    if not isinstance(value, expected_types):
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = typing.Any, obj = 'Test Company'

    def __instancecheck__(self, obj):
        if self is Any:
>           raise TypeError("typing.Any cannot be used with isinstance()")
E           TypeError: typing.Any cannot be used with isinstance()

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/typing.py:515: TypeError
________________ TestVacancyValidator.test_validate_vacancy_too_long_title _________________

self = <tests.test_22_vacancy_validator_coverage.TestVacancyValidator object at 0x7f9bdb706950>

    def test_validate_vacancy_too_long_title(self):
        """Покрытие валидации со слишком длинным заголовком"""
        validator = VacancyValidator()
        vacancy = MockAbstractVacancy()
        vacancy.title = "x" * 501  # Превышает лимит в 500 символов
    
>       result = validator.validate_vacancy(vacancy)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_22_vacancy_validator_coverage.py:210: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/storage/components/vacancy_validator.py:61: in validate_vacancy
    if not self._validate_data_types(vacancy):
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/storage/components/vacancy_validator.py:98: in _validate_data_types
    if not isinstance(value, expected_types):
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = typing.Any, obj = 'Test Company'

    def __instancecheck__(self, obj):
        if self is Any:
>           raise TypeError("typing.Any cannot be used with isinstance()")
E           TypeError: typing.Any cannot be used with isinstance()

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/typing.py:515: TypeError
_______________ TestVacancyValidator.test_validate_vacancy_max_length_title ________________

self = <tests.test_22_vacancy_validator_coverage.TestVacancyValidator object at 0x7f9bdb706f50>

    def test_validate_vacancy_max_length_title(self):
        """Покрытие валидации с заголовком максимальной длины"""
        validator = VacancyValidator()
        vacancy = MockAbstractVacancy()
        vacancy.title = "x" * 500  # Ровно на границе лимита
    
>       result = validator.validate_vacancy(vacancy)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_22_vacancy_validator_coverage.py:222: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/storage/components/vacancy_validator.py:61: in validate_vacancy
    if not self._validate_data_types(vacancy):
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/storage/components/vacancy_validator.py:98: in _validate_data_types
    if not isinstance(value, expected_types):
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = typing.Any, obj = 'Test Company'

    def __instancecheck__(self, obj):
        if self is Any:
>           raise TypeError("typing.Any cannot be used with isinstance()")
E           TypeError: typing.Any cannot be used with isinstance()

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/typing.py:515: TypeError
_______ TestVacancyValidator.test_validate_vacancy_errors_cleared_on_new_validation ________

self = <tests.test_22_vacancy_validator_coverage.TestVacancyValidator object at 0x7f9bdb70c850>

    def test_validate_vacancy_errors_cleared_on_new_validation(self):
        """Покрытие сброса ошибок при новой валидации"""
        validator = VacancyValidator()
    
        # Первая валидация с ошибкой
        invalid_vacancy = MockAbstractVacancy()
        invalid_vacancy.title = None
    
        result1 = validator.validate_vacancy(invalid_vacancy)
        assert result1 is False
        assert len(validator.get_validation_errors()) > 0
    
        # Вторая валидация успешная
        valid_vacancy = MockAbstractVacancy()
    
>       result2 = validator.validate_vacancy(valid_vacancy)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_22_vacancy_validator_coverage.py:278: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/storage/components/vacancy_validator.py:61: in validate_vacancy
    if not self._validate_data_types(vacancy):
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/storage/components/vacancy_validator.py:98: in _validate_data_types
    if not isinstance(value, expected_types):
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = typing.Any, obj = 'Test Company'

    def __instancecheck__(self, obj):
        if self is Any:
>           raise TypeError("typing.Any cannot be used with isinstance()")
E           TypeError: typing.Any cannot be used with isinstance()

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/typing.py:515: TypeError
_____________________ TestVacancyValidator.test_validate_batch_success _____________________

self = <tests.test_22_vacancy_validator_coverage.TestVacancyValidator object at 0x7f9bdb70d590>
mock_logger = <MagicMock name='logger' id='140307370700752'>

    @patch('src.storage.components.vacancy_validator.logger')
    def test_validate_batch_success(self, mock_logger):
        """Покрытие успешной пакетной валидации"""
        validator = VacancyValidator()
        vacancies = [
            MockAbstractVacancy("id_1", "Job 1"),
            MockAbstractVacancy("id_2", "Job 2"),
            MockAbstractVacancy("id_3", "Job 3")
        ]
    
        result = validator.validate_batch(vacancies)
    
        expected = {
            "id_1": True,
            "id_2": True,
            "id_3": True
        }
>       assert result == expected
E       AssertionError: assert {'id_1': Fals...'id_3': False} == {'id_1': True... 'id_3': True}
E         
E         Differing items:
E         {'id_3': False} != {'id_3': True}
E         {'id_1': False} != {'id_1': True}
E         {'id_2': False} != {'id_2': True}
E         Use -v to get more diff

tests/test_22_vacancy_validator_coverage.py:307: AssertionError
__________________ TestVacancyValidator.test_validate_batch_mixed_results __________________

self = <tests.test_22_vacancy_validator_coverage.TestVacancyValidator object at 0x7f9bdb70dc10>
mock_logger = <MagicMock name='logger' id='140307370811728'>

    @patch('src.storage.components.vacancy_validator.logger')
    def test_validate_batch_mixed_results(self, mock_logger):
        """Покрытие пакетной валидации со смешанными результатами"""
        validator = VacancyValidator()
    
        # Валидная вакансия
        valid_vacancy = MockAbstractVacancy("valid_id", "Valid Job")
    
        # Невалидная вакансия (неверный URL)
        invalid_vacancy = MockAbstractVacancy("invalid_id", "Invalid Job")
        invalid_vacancy.url = "invalid-url"
    
        # Невалидная вакансия (отсутствует заголовок)
        missing_title_vacancy = MockAbstractVacancy("missing_title_id")
        missing_title_vacancy.title = None
    
        vacancies = [valid_vacancy, invalid_vacancy, missing_title_vacancy]
    
        result = validator.validate_batch(vacancies)
    
        expected = {
            "valid_id": True,
            "invalid_id": False,
            "missing_title_id": False
        }
>       assert result == expected
E       AssertionError: assert {'invalid_id'...id_id': False} == {'invalid_id'...lid_id': True}
E         
E         Omitting 2 identical items, use -vv to show
E         Differing items:
E         {'valid_id': False} != {'valid_id': True}
E         Use -v to get more diff

tests/test_22_vacancy_validator_coverage.py:336: AssertionError
__ TestVacancyValidatorHelperMethods.test_validate_required_fields_all_present_and_valid ___

self = <tests.test_22_vacancy_validator_coverage.TestVacancyValidatorHelperMethods object at 0x7f9bdbbfee90>

    def test_validate_required_fields_all_present_and_valid(self):
        """Покрытие проверки всех присутствующих и валидных обязательных полей"""
        validator = VacancyValidator()
        vacancy = MockAbstractVacancy()
    
        # Вызываем validate_vacancy, который внутри вызовет _validate_required_fields
>       result = validator.validate_vacancy(vacancy)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_22_vacancy_validator_coverage.py:406: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/storage/components/vacancy_validator.py:61: in validate_vacancy
    if not self._validate_data_types(vacancy):
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/storage/components/vacancy_validator.py:98: in _validate_data_types
    if not isinstance(value, expected_types):
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = typing.Any, obj = 'Test Company'

    def __instancecheck__(self, obj):
        if self is Any:
>           raise TypeError("typing.Any cannot be used with isinstance()")
E           TypeError: typing.Any cannot be used with isinstance()

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/typing.py:515: TypeError
_____ TestVacancyValidatorHelperMethods.test_validate_data_types_valid_optional_fields _____

self = <tests.test_22_vacancy_validator_coverage.TestVacancyValidatorHelperMethods object at 0x7f9bdb70ddd0>

    def test_validate_data_types_valid_optional_fields(self):
        """Покрытие валидации типов данных для корректных опциональных полей"""
        validator = VacancyValidator()
        vacancy = MockAbstractVacancy()
    
        # Устанавливаем корректные типы для опциональных полей
        vacancy.description = "Valid description"
        vacancy.requirements = "Valid requirements"
        vacancy.responsibilities = None  # None разрешен
    
>       result = validator.validate_vacancy(vacancy)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_22_vacancy_validator_coverage.py:419: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/storage/components/vacancy_validator.py:61: in validate_vacancy
    if not self._validate_data_types(vacancy):
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/storage/components/vacancy_validator.py:98: in _validate_data_types
    if not isinstance(value, expected_types):
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = typing.Any, obj = 'Test Company'

    def __instancecheck__(self, obj):
        if self is Any:
>           raise TypeError("typing.Any cannot be used with isinstance()")
E           TypeError: typing.Any cannot be used with isinstance()

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/typing.py:515: TypeError
_________ TestVacancyValidatorHelperMethods.test_validate_business_rules_all_valid _________

self = <tests.test_22_vacancy_validator_coverage.TestVacancyValidatorHelperMethods object at 0x7f9bdb70d0d0>

    def test_validate_business_rules_all_valid(self):
        """Покрытие валидации бизнес-правил для корректных данных"""
        validator = VacancyValidator()
        vacancy = MockAbstractVacancy()
    
        # Устанавливаем корректные значения для всех проверяемых полей
        vacancy.url = "https://example.com/job"
        vacancy.vacancy_id = "valid_id_123"
        vacancy.title = "Valid Job Title"
    
>       result = validator.validate_vacancy(vacancy)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_22_vacancy_validator_coverage.py:432: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/storage/components/vacancy_validator.py:61: in validate_vacancy
    if not self._validate_data_types(vacancy):
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/storage/components/vacancy_validator.py:98: in _validate_data_types
    if not isinstance(value, expected_types):
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = typing.Any, obj = 'Test Company'

    def __instancecheck__(self, obj):
        if self is Any:
>           raise TypeError("typing.Any cannot be used with isinstance()")
E           TypeError: typing.Any cannot be used with isinstance()

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/typing.py:515: TypeError
_________ TestVacancyValidatorEdgeCases.test_validate_vacancy_multiple_type_errors _________

self = <tests.test_22_vacancy_validator_coverage.TestVacancyValidatorEdgeCases object at 0x7f9bdb70fcd0>

    def test_validate_vacancy_multiple_type_errors(self):
        """Покрытие множественных ошибок типов данных"""
        validator = VacancyValidator()
        vacancy = MockAbstractVacancy()
    
        # Ошибки типов данных в опциональных полях
        vacancy.description = 123  # Неверный тип
        vacancy.requirements = 456  # Неверный тип
    
>       result = validator.validate_vacancy(vacancy)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_22_vacancy_validator_coverage.py:493: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/storage/components/vacancy_validator.py:61: in validate_vacancy
    if not self._validate_data_types(vacancy):
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/storage/components/vacancy_validator.py:98: in _validate_data_types
    if not isinstance(value, expected_types):
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = typing.Any, obj = 'Test Company'

    def __instancecheck__(self, obj):
        if self is Any:
>           raise TypeError("typing.Any cannot be used with isinstance()")
E           TypeError: typing.Any cannot be used with isinstance()

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/typing.py:515: TypeError
_______ TestVacancyValidatorEdgeCases.test_validate_vacancy_with_special_characters ________

self = <tests.test_22_vacancy_validator_coverage.TestVacancyValidatorEdgeCases object at 0x7f9bdb718310>

    def test_validate_vacancy_with_special_characters(self):
        """Покрытие валидации с специальными символами"""
        validator = VacancyValidator()
        vacancy = MockAbstractVacancy()
    
        # Устанавливаем специальные символы
        vacancy.vacancy_id = "job_123-456.789"
        vacancy.title = "Senior Python Developer (Remote) №1 ★★★"
        vacancy.description = "Job with émojis 🚀 and special chars: ®™©\nNew line\tTab"
    
>       result = validator.validate_vacancy(vacancy)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_22_vacancy_validator_coverage.py:509: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/storage/components/vacancy_validator.py:61: in validate_vacancy
    if not self._validate_data_types(vacancy):
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/storage/components/vacancy_validator.py:98: in _validate_data_types
    if not isinstance(value, expected_types):
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = typing.Any, obj = 'Test Company'

    def __instancecheck__(self, obj):
        if self is Any:
>           raise TypeError("typing.Any cannot be used with isinstance()")
E           TypeError: typing.Any cannot be used with isinstance()

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/typing.py:515: TypeError
___________ TestVacancyValidatorEdgeCases.test_validate_vacancy_with_complex_url ___________

self = <tests.test_22_vacancy_validator_coverage.TestVacancyValidatorEdgeCases object at 0x7f9bdb718f50>

    def test_validate_vacancy_with_complex_url(self):
        """Покрытие валидации со сложным URL"""
        validator = VacancyValidator()
        vacancy = MockAbstractVacancy()
    
        complex_url = "https://subdomain.example.com:8080/path/to/job?id=123&ref=search&utm_source=test#section"
        vacancy.url = complex_url
    
>       result = validator.validate_vacancy(vacancy)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_22_vacancy_validator_coverage.py:529: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/storage/components/vacancy_validator.py:61: in validate_vacancy
    if not self._validate_data_types(vacancy):
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/storage/components/vacancy_validator.py:98: in _validate_data_types
    if not isinstance(value, expected_types):
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = typing.Any, obj = 'Test Company'

    def __instancecheck__(self, obj):
        if self is Any:
>           raise TypeError("typing.Any cannot be used with isinstance()")
E           TypeError: typing.Any cannot be used with isinstance()

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/typing.py:515: TypeError
______________ TestVacancyValidatorEdgeCases.test_optional_fields_tuple_types ______________

self = <tests.test_22_vacancy_validator_coverage.TestVacancyValidatorEdgeCases object at 0x7f9bdb719550>

    def test_optional_fields_tuple_types(self):
        """Покрытие опциональных полей с кортежами типов"""
        validator = VacancyValidator()
        vacancy = MockAbstractVacancy()
    
        # Проверяем поля, которые могут быть str или None
        vacancy.requirements = None  # Первый тип из кортежа (str, type(None))
        vacancy.responsibilities = "Valid responsibilities"  # Второй тип
    
>       result = validator.validate_vacancy(vacancy)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_22_vacancy_validator_coverage.py:541: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/storage/components/vacancy_validator.py:61: in validate_vacancy
    if not self._validate_data_types(vacancy):
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/storage/components/vacancy_validator.py:98: in _validate_data_types
    if not isinstance(value, expected_types):
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = typing.Any, obj = 'Test Company'

    def __instancecheck__(self, obj):
        if self is Any:
>           raise TypeError("typing.Any cannot be used with isinstance()")
E           TypeError: typing.Any cannot be used with isinstance()

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/typing.py:515: TypeError
__________ TestVacancyValidatorIntegration.test_comprehensive_validation_workflow __________

self = <tests.test_22_vacancy_validator_coverage.TestVacancyValidatorIntegration object at 0x7f9bdb71a210>
mock_logger = <MagicMock name='logger' id='140307366615056'>

    @patch('src.storage.components.vacancy_validator.logger')
    def test_comprehensive_validation_workflow(self, mock_logger):
        """Покрытие комплексного рабочего процесса валидации"""
        validator = VacancyValidator()
    
        # Создаем набор разнообразных вакансий
        vacancies = []
    
        # 1. Полностью валидная вакансия
        perfect_vacancy = MockAbstractVacancy("perfect_1", "Software Engineer")
        perfect_vacancy.description = "Great job opportunity"
        perfect_vacancy.requirements = "Python, Django"
        vacancies.append(perfect_vacancy)
    
        # 2. Валидная минималистичная вакансия
        minimal_vacancy = MockAbstractVacancy("minimal_1", "Simple Job")
        minimal_vacancy.description = None
        minimal_vacancy.requirements = None
        vacancies.append(minimal_vacancy)
    
        # 3. Вакансия с ошибками в обязательных полях
        missing_title = MockAbstractVacancy("error_1")
        missing_title.title = None
        vacancies.append(missing_title)
    
        # 4. Вакансия с ошибками в бизнес-правилах
        bad_url = MockAbstractVacancy("error_2")
        bad_url.url = "ftp://invalid-protocol.com"
        vacancies.append(bad_url)
    
        # 5. Вакансия с ошибками типов данных
        wrong_types = MockAbstractVacancy("error_3")
        wrong_types.description = 123  # Неверный тип
        vacancies.append(wrong_types)
    
        # Пакетная валидация
        batch_results = validator.validate_batch(vacancies)
    
        expected_results = {
            "perfect_1": True,
            "minimal_1": True,
            "error_1": False,
            "error_2": False,
            "error_3": False
        }
    
>       assert batch_results == expected_results
E       AssertionError: assert {'error_1': F...': False, ...} == {'error_1': F...1': True, ...}
E         
E         Omitting 3 identical items, use -vv to show
E         Differing items:
E         {'minimal_1': False} != {'minimal_1': True}
E         {'perfect_1': False} != {'perfect_1': True}
E         Use -v to get more diff

tests/test_22_vacancy_validator_coverage.py:613: AssertionError
____________ TestVacancyValidatorIntegration.test_validator_state_independence _____________

self = <tests.test_22_vacancy_validator_coverage.TestVacancyValidatorIntegration object at 0x7f9bdb71a810>

    def test_validator_state_independence(self):
        """Покрытие независимости состояния валидатора"""
        validator = VacancyValidator()
    
        # Множественные валидации должны быть независимыми
        for i in range(5):
            if i % 2 == 0:
                # Валидная вакансия
                vacancy = MockAbstractVacancy(f"valid_{i}", f"Job {i}")
>               result = validator.validate_vacancy(vacancy)
                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_22_vacancy_validator_coverage.py:627: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/storage/components/vacancy_validator.py:61: in validate_vacancy
    if not self._validate_data_types(vacancy):
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/storage/components/vacancy_validator.py:98: in _validate_data_types
    if not isinstance(value, expected_types):
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = typing.Any, obj = 'Test Company'

    def __instancecheck__(self, obj):
        if self is Any:
>           raise TypeError("typing.Any cannot be used with isinstance()")
E           TypeError: typing.Any cannot be used with isinstance()

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/typing.py:515: TypeError
_____________ TestVacancyValidatorIntegration.test_concurrent_usage_simulation _____________

self = <tests.test_22_vacancy_validator_coverage.TestVacancyValidatorIntegration object at 0x7f9bdb71ae10>

    def test_concurrent_usage_simulation(self):
        """Покрытие имитации конкурентного использования"""
        # Создаем несколько независимых валидаторов
        validators = [VacancyValidator() for _ in range(3)]
    
        for i, validator in enumerate(validators):
            # Каждый валидатор обрабатывает свою вакансию
            vacancy = MockAbstractVacancy(f"concurrent_{i}", f"Concurrent Job {i}")
    
            if i == 1:
                vacancy.title = None  # Делаем одну невалидной
    
>           result = validator.validate_vacancy(vacancy)
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_22_vacancy_validator_coverage.py:650: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/storage/components/vacancy_validator.py:61: in validate_vacancy
    if not self._validate_data_types(vacancy):
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/storage/components/vacancy_validator.py:98: in _validate_data_types
    if not isinstance(value, expected_types):
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = typing.Any, obj = 'Test Company'

    def __instancecheck__(self, obj):
        if self is Any:
>           raise TypeError("typing.Any cannot be used with isinstance()")
E           TypeError: typing.Any cannot be used with isinstance()

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/typing.py:515: TypeError
================================= short test summary info ==================================
FAILED tests/test_22_vacancy_validator_coverage.py::TestVacancyValidator::test_validate_vacancy_success - TypeError: typing.Any cannot be used with isinstance()
FAILED tests/test_22_vacancy_validator_coverage.py::TestVacancyValidator::test_validate_vacancy_wrong_type_optional_field - TypeError: typing.Any cannot be used with isinstance()
FAILED tests/test_22_vacancy_validator_coverage.py::TestVacancyValidator::test_validate_vacancy_none_optional_field - TypeError: typing.Any cannot be used with isinstance()
FAILED tests/test_22_vacancy_validator_coverage.py::TestVacancyValidator::test_validate_vacancy_missing_optional_field - TypeError: typing.Any cannot be used with isinstance()
FAILED tests/test_22_vacancy_validator_coverage.py::TestVacancyValidator::test_validate_vacancy_invalid_url_no_protocol - TypeError: typing.Any cannot be used with isinstance()
FAILED tests/test_22_vacancy_validator_coverage.py::TestVacancyValidator::test_validate_vacancy_valid_http_url - TypeError: typing.Any cannot be used with isinstance()
FAILED tests/test_22_vacancy_validator_coverage.py::TestVacancyValidator::test_validate_vacancy_valid_https_url - TypeError: typing.Any cannot be used with isinstance()
FAILED tests/test_22_vacancy_validator_coverage.py::TestVacancyValidator::test_validate_vacancy_too_long_id - TypeError: typing.Any cannot be used with isinstance()
FAILED tests/test_22_vacancy_validator_coverage.py::TestVacancyValidator::test_validate_vacancy_max_length_id - TypeError: typing.Any cannot be used with isinstance()
FAILED tests/test_22_vacancy_validator_coverage.py::TestVacancyValidator::test_validate_vacancy_too_long_title - TypeError: typing.Any cannot be used with isinstance()
FAILED tests/test_22_vacancy_validator_coverage.py::TestVacancyValidator::test_validate_vacancy_max_length_title - TypeError: typing.Any cannot be used with isinstance()
FAILED tests/test_22_vacancy_validator_coverage.py::TestVacancyValidator::test_validate_vacancy_errors_cleared_on_new_validation - TypeError: typing.Any cannot be used with isinstance()
FAILED tests/test_22_vacancy_validator_coverage.py::TestVacancyValidator::test_validate_batch_success - AssertionError: assert {'id_1': Fals...'id_3': False} == {'id_1': True... 'id_3': True}
FAILED tests/test_22_vacancy_validator_coverage.py::TestVacancyValidator::test_validate_batch_mixed_results - AssertionError: assert {'invalid_id'...id_id': False} == {'invalid_id'...lid_id': True}
FAILED tests/test_22_vacancy_validator_coverage.py::TestVacancyValidatorHelperMethods::test_validate_required_fields_all_present_and_valid - TypeError: typing.Any cannot be used with isinstance()
FAILED tests/test_22_vacancy_validator_coverage.py::TestVacancyValidatorHelperMethods::test_validate_data_types_valid_optional_fields - TypeError: typing.Any cannot be used with isinstance()
FAILED tests/test_22_vacancy_validator_coverage.py::TestVacancyValidatorHelperMethods::test_validate_business_rules_all_valid - TypeError: typing.Any cannot be used with isinstance()
FAILED tests/test_22_vacancy_validator_coverage.py::TestVacancyValidatorEdgeCases::test_validate_vacancy_multiple_type_errors - TypeError: typing.Any cannot be used with isinstance()
FAILED tests/test_22_vacancy_validator_coverage.py::TestVacancyValidatorEdgeCases::test_validate_vacancy_with_special_characters - TypeError: typing.Any cannot be used with isinstance()
FAILED tests/test_22_vacancy_validator_coverage.py::TestVacancyValidatorEdgeCases::test_validate_vacancy_with_complex_url - TypeError: typing.Any cannot be used with isinstance()
FAILED tests/test_22_vacancy_validator_coverage.py::TestVacancyValidatorEdgeCases::test_optional_fields_tuple_types - TypeError: typing.Any cannot be used with isinstance()
FAILED tests/test_22_vacancy_validator_coverage.py::TestVacancyValidatorIntegration::test_comprehensive_validation_workflow - AssertionError: assert {'error_1': F...': False, ...} == {'error_1': F...1': True, ...}
FAILED tests/test_22_vacancy_validator_coverage.py::TestVacancyValidatorIntegration::test_validator_state_independence - TypeError: typing.Any cannot be used with isinstance()
FAILED tests/test_22_vacancy_validator_coverage.py::TestVacancyValidatorIntegration::test_concurrent_usage_simulation - TypeError: typing.Any cannot be used with isinstance()
============================== 24 failed, 18 passed in 2.17s ===============================
~/workspace$ 