~/workspace$ pytest
===================================== test session starts ======================================
platform linux -- Python 3.11.13, pytest-8.4.1, pluggy-1.6.0
rootdir: /home/runner/workspace
configfile: pyproject.toml
plugins: mock-3.14.1, cov-6.2.1
collected 798 items                                                                            

tests/test_abstract.py ........                                                          [  1%]
tests/test_abstract_db_manager.py ....                                                   [  1%]
tests/test_api_config.py ....                                                            [  2%]
tests/test_api_data_filter.py ........                                                   [  3%]
tests/test_api_modules.py .............................                                  [  6%]
tests/test_app_config.py .....                                                           [  7%]
tests/test_base_api.py ......                                                            [  8%]
tests/test_base_formatter.py ..........                                                  [  9%]
tests/test_base_parser.py ......                                                         [ 10%]
tests/test_cache.py .......                                                              [ 10%]
tests/test_cache_manager.py ....................                                         [ 13%]
tests/test_cached_api.py ...........                                                     [ 14%]
tests/test_complete_module_coverage.py .F.............FF                                 [ 16%]
tests/test_comprehensive_coverage.py ........................                            [ 19%]
tests/test_console_interface.py ......                                                   [ 20%]
tests/test_db_config.py .....                                                            [ 21%]
tests/test_db_manager.py .................                                               [ 23%]
tests/test_db_manager_demo.py ..F.....F........                                          [ 25%]
tests/test_decorators.py .......                                                         [ 26%]
tests/test_env_loader.py ................                                                [ 28%]
tests/test_extended_coverage.py .............................FF..                        [ 32%]
tests/test_file_handlers.py ............                                                 [ 34%]
tests/test_full_src_coverage.py ........F......                                          [ 35%]
tests/test_get_api.py ......                                                             [ 36%]
tests/test_hh_api.py .......                                                             [ 37%]
tests/test_hh_api_config.py .....                                                        [ 38%]
tests/test_hh_parser.py ........                                                         [ 39%]
tests/test_integration.py .............                                                  [ 40%]
tests/test_main_module.py ..............                                                 [ 42%]
tests/test_menu_manager.py ..........                                                    [ 43%]
tests/test_menu_system.py ....................                                           [ 46%]
tests/test_missing_components.py .........                                               [ 47%]
tests/test_paginator.py ......                                                           [ 48%]
tests/test_postgres_saver.py .......                                                     [ 49%]
tests/test_salary_fixed.py ...........                                                   [ 50%]
tests/test_salary_utils.py ......................                                        [ 53%]
tests/test_search_utils.py ............................                                  [ 56%]
tests/test_sj_api.py ..............                                                      [ 58%]
tests/test_sj_api_config.py .....                                                        [ 59%]
tests/test_sj_parser.py ........                                                         [ 60%]
tests/test_source_manager.py .................                                           [ 62%]
tests/test_source_selector.py ..................                                         [ 64%]
tests/test_storage_factory.py ........                                                   [ 65%]
tests/test_target_companies.py .....                                                     [ 66%]
tests/test_ui_config.py .......................                                          [ 69%]
tests/test_ui_helpers.py ...........                                                     [ 70%]
tests/test_ui_navigation.py ......................                                       [ 73%]
tests/test_unified_api.py .................                                              [ 75%]
tests/test_user_interface.py ......................                                      [ 78%]
tests/test_user_interface_comprehensive.py .....EE.........                              [ 80%]
tests/test_user_interface_main.py FFFF.FF..FF                                            [ 81%]
tests/test_vacancy_display_handler.py ..............                                     [ 83%]
tests/test_vacancy_formatter.py ........                                                 [ 84%]
tests/test_vacancy_models.py .................................................           [ 90%]
tests/test_vacancy_operations.py ......                                                  [ 91%]
tests/test_vacancy_operations_coordinator.py ...........................                 [ 94%]
tests/test_vacancy_search_handler.py .......................                             [ 97%]
tests/test_vacancy_stats.py .E.FFFF.F.FF                                                 [ 98%]
tests/test_vacancy_stats_fixed.py .........                                              [100%]

============================================ ERRORS ============================================
__________ ERROR at setup of TestUserInterfaceComprehensive.test_run_advanced_search ___________

self = <workspace.tests.test_user_interface_comprehensive.TestUserInterfaceComprehensive object at 0x7f4950f3a090>

    @pytest.fixture
    def sample_vacancies(self) -> List[Vacancy]:
        """
        Создание тестовых вакансий
    
        Returns:
            List[Vacancy]: Список тестовых объектов вакансий
        """
        vacancies = []
    
        # Вакансия с полной информацией - используем правильный конструктор Salary
        salary1 = Salary({"from": 100000, "to": 150000, "currency": "RUR"})
>       vacancy1 = Vacancy(
            title="Python Developer",
            vacancy_id="1",
            url="https://example.com/1",
            source="hh.ru",
            employer={"name": "Яндекс"},
            salary=salary1,
            description="Работа с Python и Django"
        )

tests/test_user_interface_comprehensive.py:34: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/vacancies/models.py:74: in __init__
    self.salary = self._validate_salary(salary)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/vacancies/models.py:100: in _validate_salary
    return Salary(salary_data) if salary_data else Salary()
           ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <src.utils.salary.Salary object at 0x7f494f0eac20>
salary_data = <src.utils.salary.Salary object at 0x7f494f0eac80>

    def __init__(self, salary_data: Optional[Dict[str, Any]] = None):
        if salary_data is None:
            salary_data = {}
    
        self.amount_from = 0
        self.amount_to = 0
        self.gross = False
        self.period = "month"
    
        # Сначала проверяем, есть ли строковый диапазон для парсинга
        if isinstance(salary_data, str):
            salary_data = self._parse_salary_range_string(salary_data)
        elif isinstance(salary_data, dict) and salary_data.get("salary_range"):
            range_data = self._parse_salary_range_string(salary_data["salary_range"])
            salary_data.update(range_data)
    
>       self._salary_from = self._validate_salary_value(salary_data.get("from"))
                                                        ^^^^^^^^^^^^^^^
E       AttributeError: 'Salary' object has no attribute 'get'

src/utils/salary.py:25: AttributeError
___________ ERROR at setup of TestUserInterfaceComprehensive.test_run_salary_filter ____________

self = <workspace.tests.test_user_interface_comprehensive.TestUserInterfaceComprehensive object at 0x7f4950f3aed0>

    @pytest.fixture
    def sample_vacancies(self) -> List[Vacancy]:
        """
        Создание тестовых вакансий
    
        Returns:
            List[Vacancy]: Список тестовых объектов вакансий
        """
        vacancies = []
    
        # Вакансия с полной информацией - используем правильный конструктор Salary
        salary1 = Salary({"from": 100000, "to": 150000, "currency": "RUR"})
>       vacancy1 = Vacancy(
            title="Python Developer",
            vacancy_id="1",
            url="https://example.com/1",
            source="hh.ru",
            employer={"name": "Яндекс"},
            salary=salary1,
            description="Работа с Python и Django"
        )

tests/test_user_interface_comprehensive.py:34: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/vacancies/models.py:74: in __init__
    self.salary = self._validate_salary(salary)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/vacancies/models.py:100: in _validate_salary
    return Salary(salary_data) if salary_data else Salary()
           ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <src.utils.salary.Salary object at 0x7f494f0eb7c0>
salary_data = <src.utils.salary.Salary object at 0x7f494f0ebca0>

    def __init__(self, salary_data: Optional[Dict[str, Any]] = None):
        if salary_data is None:
            salary_data = {}
    
        self.amount_from = 0
        self.amount_to = 0
        self.gross = False
        self.period = "month"
    
        # Сначала проверяем, есть ли строковый диапазон для парсинга
        if isinstance(salary_data, str):
            salary_data = self._parse_salary_range_string(salary_data)
        elif isinstance(salary_data, dict) and salary_data.get("salary_range"):
            range_data = self._parse_salary_range_string(salary_data["salary_range"])
            salary_data.update(range_data)
    
>       self._salary_from = self._validate_salary_value(salary_data.get("from"))
                                                        ^^^^^^^^^^^^^^^
E       AttributeError: 'Salary' object has no attribute 'get'

src/utils/salary.py:25: AttributeError
_____________ ERROR at setup of TestVacancyStats.test_calculate_salary_statistics ______________

self = <workspace.tests.test_vacancy_stats.TestVacancyStats object at 0x7f494ff695d0>
sample_vacancies = [{'description': 'Работа с Python и Django', 'employer': {'name': 'Яндекс'}, 'salary': {'currency': 'RUR', 'from': 100...ption': 'Работа с React и TypeScript', 'employer': {'name': 'Тинькофф'}, 'salary': None, 'source': 'superjob.ru', ...}]

    @pytest.fixture
    def vacancy_objects(self, sample_vacancies: List[Dict[str, Any]]) -> List[Vacancy]:
        """
        Создание объектов Vacancy из тестовых данных
    
        Args:
            sample_vacancies: Тестовые данные вакансий
    
        Returns:
            List[Vacancy]: Список объектов вакансий
        """
        vacancies = []
        for data in sample_vacancies:
            # Создаем объект Salary если есть данные - используем правильный конструктор
            salary = None
            if data.get('salary'):
                salary_data = data['salary']
                salary = Salary({"from": salary_data.get('from'), "to": salary_data.get('to'), "currency": salary_data.get('currency', 'RUR')})
    
>           vacancy = Vacancy(
                title=data['title'],
                vacancy_id=data['vacancy_id'],
                url=data['url'],
                source=data['source'],
                employer=data.get('employer'),
                salary=salary,
                description=data.get('description')
            )

tests/test_vacancy_stats.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/vacancies/models.py:74: in __init__
    self.salary = self._validate_salary(salary)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/vacancies/models.py:100: in _validate_salary
    return Salary(salary_data) if salary_data else Salary()
           ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <src.utils.salary.Salary object at 0x7f494f0ebfa0>
salary_data = <src.utils.salary.Salary object at 0x7f494f0eb7c0>

    def __init__(self, salary_data: Optional[Dict[str, Any]] = None):
        if salary_data is None:
            salary_data = {}
    
        self.amount_from = 0
        self.amount_to = 0
        self.gross = False
        self.period = "month"
    
        # Сначала проверяем, есть ли строковый диапазон для парсинга
        if isinstance(salary_data, str):
            salary_data = self._parse_salary_range_string(salary_data)
        elif isinstance(salary_data, dict) and salary_data.get("salary_range"):
            range_data = self._parse_salary_range_string(salary_data["salary_range"])
            salary_data.update(range_data)
    
>       self._salary_from = self._validate_salary_value(salary_data.get("from"))
                                                        ^^^^^^^^^^^^^^^
E       AttributeError: 'Salary' object has no attribute 'get'

src/utils/salary.py:25: AttributeError
=========================================== FAILURES ===========================================
_________________ TestCompleteModuleCoverage.test_vacancy_model_comprehensive __________________

self = <workspace.tests.test_complete_module_coverage.TestCompleteModuleCoverage object at 0x7f495132a090>

    def test_vacancy_model_comprehensive(self) -> None:
        """
        Тест комплексной функциональности модели Vacancy
        """
        # Создаем зарплату правильным способом
        salary_data = {"from": 100000, "to": 150000, "currency": "RUR"}
        salary = Salary(salary_data)
    
        # Создаем вакансию
>       vacancy = Vacancy(
            title="Senior Python Developer",
            vacancy_id="test123",
            url="https://hh.ru/vacancy/12345",
            source="hh.ru",
            employer={"name": "Яндекс", "id": "1740"},
            salary=salary,
            description="Разработка высоконагруженных систем",
            experience={"name": "От 3 до 6 лет"},
            employment={"name": "Полная занятость"},
            area={"name": "Москва"}
        )

tests/test_complete_module_coverage.py:113: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/vacancies/models.py:74: in __init__
    self.salary = self._validate_salary(salary)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/vacancies/models.py:100: in _validate_salary
    return Salary(salary_data) if salary_data else Salary()
           ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <src.utils.salary.Salary object at 0x7f495034f2e0>
salary_data = <src.utils.salary.Salary object at 0x7f495034eb60>

    def __init__(self, salary_data: Optional[Dict[str, Any]] = None):
        if salary_data is None:
            salary_data = {}
    
        self.amount_from = 0
        self.amount_to = 0
        self.gross = False
        self.period = "month"
    
        # Сначала проверяем, есть ли строковый диапазон для парсинга
        if isinstance(salary_data, str):
            salary_data = self._parse_salary_range_string(salary_data)
        elif isinstance(salary_data, dict) and salary_data.get("salary_range"):
            range_data = self._parse_salary_range_string(salary_data["salary_range"])
            salary_data.update(range_data)
    
>       self._salary_from = self._validate_salary_value(salary_data.get("from"))
                                                        ^^^^^^^^^^^^^^^
E       AttributeError: 'Salary' object has no attribute 'get'

src/utils/salary.py:25: AttributeError
_________________ TestCompleteModuleCoverage.test_comprehensive_type_checking __________________

self = <workspace.tests.test_complete_module_coverage.TestCompleteModuleCoverage object at 0x7f4951336fd0>

    def test_comprehensive_type_checking(self) -> None:
        """
        Тест комплексной проверки типов
        """
        # Тестируем типы основных объектов
    
        # Salary
        salary = Salary({"from": 100000, "currency": "RUR"})
        assert isinstance(salary, Salary)
    
        # Vacancy
        vacancy = Vacancy("Test", "1", "https://test.com", "test")
        assert isinstance(vacancy, Vacancy)
    
        # VacancyStats
        from src.utils.vacancy_stats import VacancyStats
        stats = VacancyStats()
        assert isinstance(stats, VacancyStats)
    
        # Проверяем что методы возвращают правильные типы
        vacancy_list = [vacancy]
>       result = stats.calculate_salary_statistics(vacancy_list)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_complete_module_coverage.py:521: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <src.utils.vacancy_stats.VacancyStats object at 0x7f4950380610>
vacancies = [<src.vacancies.models.Vacancy object at 0x7f4950bbf930>]

    def calculate_salary_statistics(self, vacancies):
        """Подсчет статистики по зарплатам"""
        salaries = []
        for vacancy in vacancies:
            if vacancy.salary:
>               if vacancy.salary.from_amount:
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^
E               AttributeError: 'Salary' object has no attribute 'from_amount'

src/utils/vacancy_stats.py:24: AttributeError
_____________ TestCompleteModuleCoverage.test_integration_with_mocked_dependencies _____________

self = <MagicMock name='AppConfig' id='139952850850192'>

    def assert_called(self):
        """assert that the mock was called at least once
        """
        if self.call_count == 0:
            msg = ("Expected '%s' to have been called." %
                   (self._mock_name or 'mock'))
>           raise AssertionError(msg)
E           AssertionError: Expected 'AppConfig' to have been called.

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:908: AssertionError

During handling of the above exception, another exception occurred:

self = <workspace.tests.test_complete_module_coverage.TestCompleteModuleCoverage object at 0x7f4951337690>

    def test_integration_with_mocked_dependencies(self) -> None:
        """
        Тест интеграции с замокированными зависимостями
        """
        # Мокаем все внешние зависимости
        with patch('src.storage.db_manager.DBManager') as mock_db:
            with patch('src.config.app_config.AppConfig') as mock_config:
                with patch('src.storage.storage_factory.StorageFactory') as mock_factory:
    
                    # Настройка моков
                    mock_db_instance = Mock()
                    mock_db_instance.check_connection.return_value = True
                    mock_db.return_value = mock_db_instance
    
                    mock_config_instance = Mock()
                    mock_config_instance.default_storage_type = "postgres"
                    mock_config.return_value = mock_config_instance
    
                    mock_storage = Mock()
                    mock_factory.create_storage.return_value = mock_storage
    
                    # Тестируем интеграцию
                    from src.user_interface import main
    
                    with patch('src.ui_interfaces.console_interface.UserInterface') as mock_ui:
                        mock_ui_instance = Mock()
                        mock_ui.return_value = mock_ui_instance
    
                        # Выполняем функцию
                        main()
    
                        # Проверяем что все компоненты были использованы
                        mock_db.assert_called()
>                       mock_config.assert_called()
E                       AssertionError: Expected 'AppConfig' to have been called.

tests/test_complete_module_coverage.py:557: AssertionError
------------------------------------- Captured stdout call -------------------------------------

Критическая ошибка: object of type 'Mock' has no len()
Обратитесь к разработчику для решения проблемы.
-------------------------------------- Captured log call ---------------------------------------
ERROR    src.user_interface:user_interface.py:67 Критическая ошибка: object of type 'Mock' has no len()
_____________________ TestDBManagerDemo.test_demo_methods_call_db_manager ______________________

self = <workspace.tests.test_db_manager_demo.TestDBManagerDemo object at 0x7f495138ef50>
mock_print = <MagicMock name='print' id='139952850510416'>
db_manager_demo = <src.utils.db_manager_demo.DBManagerDemo object at 0x7f494ff0a150>

    @patch('builtins.print')
    def test_demo_methods_call_db_manager(self, mock_print, db_manager_demo):
        """Тест что демонстрация вызывает методы DB менеджера"""
        # Запускаем полную демонстрацию
        db_manager_demo.run_full_demo()
    
        # Проверяем что методы DBManager были вызваны
        db_manager = db_manager_demo.db_manager
    
        assert db_manager.get_target_companies_analysis.called
>       assert db_manager.get_companies_and_vacancies_count.called
E       AssertionError: assert False
E        +  where False = <Mock name='mock.get_companies_and_vacancies_count' id='139952850509136'>.called
E        +    where <Mock name='mock.get_companies_and_vacancies_count' id='139952850509136'> = <Mock id='139952850517776'>.get_companies_and_vacancies_count

tests/test_db_manager_demo.py:156: AssertionError
________________________ TestDBManagerDemo.test_demo_individual_methods ________________________

self = <workspace.tests.test_db_manager_demo.TestDBManagerDemo object at 0x7f49513997d0>
db_manager_demo = <src.utils.db_manager_demo.DBManagerDemo object at 0x7f494f038dd0>

    def test_demo_individual_methods(self, db_manager_demo):
        """Тест отдельных методов демонстрации"""
        # Тестируем что можем вызвать приватные методы через публичный интерфейс
        with patch('builtins.print'):
            # Основной метод должен вызывать все подметоды
            db_manager_demo.run_full_demo()
    
        # Проверяем что все ключевые методы DBManager были вызваны
        db_manager = db_manager_demo.db_manager
    
        # Проверяем вызовы основных методов
        methods_to_check = [
            'get_companies_and_vacancies_count',
            'get_all_vacancies',
            'get_avg_salary',
            'get_vacancies_with_higher_salary',
            'get_vacancies_with_keyword'
        ]
    
        for method_name in methods_to_check:
            method = getattr(db_manager, method_name)
>           assert method.called, f"Метод {method_name} не был вызван"
E           AssertionError: Метод get_companies_and_vacancies_count не был вызван
E           assert False
E            +  where False = <Mock name='mock.get_companies_and_vacancies_count' id='139952834970064'>.called

tests/test_db_manager_demo.py:281: AssertionError
______________________ TestAdvancedCoverage.test_module_interoperability _______________________

self = <workspace.tests.test_extended_coverage.TestAdvancedCoverage object at 0x7f495076b4d0>

    def test_module_interoperability(self) -> None:
        """Тест взаимодействия между модулями"""
        if EXTENDED_SRC_AVAILABLE:
            try:
                # Тестируем взаимодействие между компонентами
                from src.vacancies.models import Vacancy
                from src.utils.salary import Salary
    
                # Создаем объекты и тестируем их взаимодействие
                # Исправлено: Salary.from_range не существует, используем конструктор
                salary_data = {"from": 100000, "to": 150000, "currency": "RUR"}
                salary = Salary(salary_data)
    
>               vacancy = Vacancy(
                    title="Test Developer",
                    vacancy_id="test_1",
                    url="https://example.com/test",
                    source="test",
                    salary=salary # Убедимся, что salary передается корректно
                )

tests/test_extended_coverage.py:839: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/vacancies/models.py:74: in __init__
    self.salary = self._validate_salary(salary)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/vacancies/models.py:100: in _validate_salary
    return Salary(salary_data) if salary_data else Salary()
           ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <src.utils.salary.Salary object at 0x7f49542d1720>
salary_data = <src.utils.salary.Salary object at 0x7f495037c100>

    def __init__(self, salary_data: Optional[Dict[str, Any]] = None):
        if salary_data is None:
            salary_data = {}
    
        self.amount_from = 0
        self.amount_to = 0
        self.gross = False
        self.period = "month"
    
        # Сначала проверяем, есть ли строковый диапазон для парсинга
        if isinstance(salary_data, str):
            salary_data = self._parse_salary_range_string(salary_data)
        elif isinstance(salary_data, dict) and salary_data.get("salary_range"):
            range_data = self._parse_salary_range_string(salary_data["salary_range"])
            salary_data.update(range_data)
    
>       self._salary_from = self._validate_salary_value(salary_data.get("from"))
                                                        ^^^^^^^^^^^^^^^
E       AttributeError: 'Salary' object has no attribute 'get'

src/utils/salary.py:25: AttributeError
_______________________ TestAdvancedCoverage.test_configuration_coverage _______________________

self = <workspace.tests.test_extended_coverage.TestAdvancedCoverage object at 0x7f495076bed0>

    def test_configuration_coverage(self) -> None:
        """Тест покрытия конфигурационных модулей"""
        config_modules = [
            "src.config.app_config",
            "src.config.db_config",
            "src.config.ui_config",
            "src.config.target_companies"
        ]
    
        for module_name in config_modules:
            try:
                import importlib
                module = importlib.import_module(module_name)
    
                # Проверяем что модуль загружен
                assert module is not None
    
                # Получаем все публичные атрибуты
                public_attrs = [attr for attr in dir(module) if not attr.startswith('_')]
    
                # Проверяем каждый атрибут
                for attr_name in public_attrs:
                    attr = getattr(module, attr_name)
    
                    # Проверяем что атрибут имеет допустимый тип
>                   assert attr is None or isinstance(attr, (str, int, float, bool, list, dict, type, type(lambda: None)))
E                   AssertionError: assert (typing.Dict is None or False)
E                    +  where False = isinstance(typing.Dict, (<class 'str'>, <class 'int'>, <class 'float'>, <class 'bool'>, <class 'list'>, <class 'dict'>, ...))

tests/test_extended_coverage.py:891: AssertionError
_____________________ TestFullSrcCoverage.test_comprehensive_method_calls ______________________

self = <workspace.tests.test_full_src_coverage.TestFullSrcCoverage object at 0x7f4950b43090>

    def test_comprehensive_method_calls(self) -> None:
        """Тест покрытия вызовов методов"""
        try:
            from src.utils.vacancy_stats import VacancyStats
            from src.vacancies.models import Vacancy
            from src.utils.salary import Salary
    
            # Создаем экземпляры
            stats = VacancyStats()
    
            # Используем правильный конструктор для Salary
            salary = Salary({"from": 100000, "to": 150000, "currency": "RUR"})
    
            vacancy = Vacancy(
                title="Test Developer",
                vacancy_id="test_1",
                url="https://example.com/test",
                source="test"
            )
    
            # Тестируем методы
            result = stats.calculate_salary_statistics([])
            assert result is not None or result is None
    
            # Тестируем с реальными данными
            vacancy.salary = salary
>           result = stats.calculate_salary_statistics([vacancy])
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_full_src_coverage.py:281: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <src.utils.vacancy_stats.VacancyStats object at 0x7f495036f7d0>
vacancies = [<src.vacancies.models.Vacancy object at 0x7f494f056a90>]

    def calculate_salary_statistics(self, vacancies):
        """Подсчет статистики по зарплатам"""
        salaries = []
        for vacancy in vacancies:
            if vacancy.salary:
>               if vacancy.salary.from_amount:
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^
E               AttributeError: 'Salary' object has no attribute 'from_amount'

src/utils/vacancy_stats.py:24: AttributeError
_______________________ TestUserInterfaceMain.test_main_function_success _______________________

args = (<workspace.tests.test_user_interface_main.TestUserInterfaceMain object at 0x7f4950f3b150>,)
keywargs = {}

    @wraps(func)
    def patched(*args, **keywargs):
>       with self.decoration_helper(patched,
                                    args,
                                    keywargs) as (newargs, newkeywargs):

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1375: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
           ^^^^^^^^^^^^^^
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1357: in decoration_helper
    arg = exit_stack.enter_context(patching)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/contextlib.py:517: in enter_context
    result = _enter(cm)
             ^^^^^^^^^^
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1446: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f4950bba050>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'src.user_interface' from '/home/runner/workspace/tests/../src/user_interface.py'> does not have the attribute 'DBManager'

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1419: AttributeError
________________ TestUserInterfaceMain.test_main_function_db_connection_failure ________________

args = (<workspace.tests.test_user_interface_main.TestUserInterfaceMain object at 0x7f4950f3a610>,)
keywargs = {}

    @wraps(func)
    def patched(*args, **keywargs):
>       with self.decoration_helper(patched,
                                    args,
                                    keywargs) as (newargs, newkeywargs):

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1375: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
           ^^^^^^^^^^^^^^
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1357: in decoration_helper
    arg = exit_stack.enter_context(patching)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/contextlib.py:517: in enter_context
    result = _enter(cm)
             ^^^^^^^^^^
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1446: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f4950bbae10>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'src.user_interface' from '/home/runner/workspace/tests/../src/user_interface.py'> does not have the attribute 'DBManager'

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1419: AttributeError
_________________ TestUserInterfaceMain.test_main_function_keyboard_interrupt __________________

args = (<workspace.tests.test_user_interface_main.TestUserInterfaceMain object at 0x7f4950f3aad0>,)
keywargs = {}

    @wraps(func)
    def patched(*args, **keywargs):
>       with self.decoration_helper(patched,
                                    args,
                                    keywargs) as (newargs, newkeywargs):

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1375: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
           ^^^^^^^^^^^^^^
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1357: in decoration_helper
    arg = exit_stack.enter_context(patching)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/contextlib.py:517: in enter_context
    result = _enter(cm)
             ^^^^^^^^^^
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1446: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f4950bbbc90>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'src.user_interface' from '/home/runner/workspace/tests/../src/user_interface.py'> does not have the attribute 'DBManager'

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1419: AttributeError
__________________ TestUserInterfaceMain.test_main_function_generic_exception __________________

args = (<workspace.tests.test_user_interface_main.TestUserInterfaceMain object at 0x7f49507ec490>,)
keywargs = {}

    @wraps(func)
    def patched(*args, **keywargs):
>       with self.decoration_helper(patched,
                                    args,
                                    keywargs) as (newargs, newkeywargs):

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1375: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
           ^^^^^^^^^^^^^^
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1357: in decoration_helper
    arg = exit_stack.enter_context(patching)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/contextlib.py:517: in enter_context
    result = _enter(cm)
             ^^^^^^^^^^
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1446: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f4950bba750>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'src.user_interface' from '/home/runner/workspace/tests/../src/user_interface.py'> does not have the attribute 'DBManager'

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1419: AttributeError
_______________________ TestUserInterfaceMain.test_logging_configuration _______________________

self = <workspace.tests.test_user_interface_main.TestUserInterfaceMain object at 0x7f4950fc7150>

    def test_logging_configuration(self) -> None:
        """Тест конфигурации логирования"""
        import logging
    
        # Проверяем что логгер настроен правильно
        logger = logging.getLogger('src.user_interface')
        assert logger is not None
    
        # Проверяем уровень логирования
        root_logger = logging.getLogger()
>       assert root_logger.level <= logging.INFO
E       AssertionError: assert 30 <= 20
E        +  where 30 = <RootLogger root (WARNING)>.level
E        +  and   20 = <module 'logging' from '/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/logging/__init__.py'>.INFO

tests/test_user_interface_main.py:189: AssertionError
___________________________ TestUserInterfaceMain.test_logging_calls ___________________________

args = (<workspace.tests.test_user_interface_main.TestUserInterfaceMain object at 0x7f4950fc7890>,)
keywargs = {}

    @wraps(func)
    def patched(*args, **keywargs):
>       with self.decoration_helper(patched,
                                    args,
                                    keywargs) as (newargs, newkeywargs):

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1375: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
           ^^^^^^^^^^^^^^
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1357: in decoration_helper
    arg = exit_stack.enter_context(patching)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/contextlib.py:517: in enter_context
    result = _enter(cm)
             ^^^^^^^^^^
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1446: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f4950bb8dd0>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'src.user_interface' from '/home/runner/workspace/tests/../src/user_interface.py'> does not have the attribute 'DBManager'

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1419: AttributeError
________________________ TestErrorHandling.test_database_error_handling ________________________

args = (<workspace.tests.test_user_interface_main.TestErrorHandling object at 0x7f4950fc6590>,)
keywargs = {}

    @wraps(func)
    def patched(*args, **keywargs):
>       with self.decoration_helper(patched,
                                    args,
                                    keywargs) as (newargs, newkeywargs):

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1375: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
           ^^^^^^^^^^^^^^
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1357: in decoration_helper
    arg = exit_stack.enter_context(patching)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/contextlib.py:517: in enter_context
    result = _enter(cm)
             ^^^^^^^^^^
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1446: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f4950bbac50>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'src.user_interface' from '/home/runner/workspace/tests/../src/user_interface.py'> does not have the attribute 'DBManager'

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1419: AttributeError
_____________________________ TestErrorHandling.test_error_logging _____________________________

args = (<workspace.tests.test_user_interface_main.TestErrorHandling object at 0x7f4950fc6d50>,)
keywargs = {}

    @wraps(func)
    def patched(*args, **keywargs):
>       with self.decoration_helper(patched,
                                    args,
                                    keywargs) as (newargs, newkeywargs):

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1375: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
           ^^^^^^^^^^^^^^
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1357: in decoration_helper
    arg = exit_stack.enter_context(patching)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/contextlib.py:517: in enter_context
    result = _enter(cm)
             ^^^^^^^^^^
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1446: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f4950bde890>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'src.user_interface' from '/home/runner/workspace/tests/../src/user_interface.py'> does not have the attribute 'DBManager'

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1419: AttributeError
________________________ TestVacancyStats.test_vacancies_without_salary ________________________

self = <workspace.tests.test_vacancy_stats.TestVacancyStats object at 0x7f494ff6a610>
vacancy_stats = <src.utils.vacancy_stats.VacancyStats object at 0x7f494f180290>

    def test_vacancies_without_salary(self, vacancy_stats: VacancyStats) -> None:
        """Тест обработки вакансий без зарплаты"""
        # Создаем вакансию без зарплаты
        vacancy_no_salary = Vacancy(
            title="Developer",
            vacancy_id="1",
            url="https://example.com/1",
            source="hh.ru",
            employer={"name": "Company1"},
            salary=None,
            description="Job description"
        )
    
        vacancies = [vacancy_no_salary]
>       stats = vacancy_stats.calculate_salary_statistics(vacancies)
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_vacancy_stats.py:148: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <src.utils.vacancy_stats.VacancyStats object at 0x7f494f180290>
vacancies = [<src.vacancies.models.Vacancy object at 0x7f494f877110>]

    def calculate_salary_statistics(self, vacancies):
        """Подсчет статистики по зарплатам"""
        salaries = []
        for vacancy in vacancies:
            if vacancy.salary:
>               if vacancy.salary.from_amount:
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^
E               AttributeError: 'Salary' object has no attribute 'from_amount'

src/utils/vacancy_stats.py:24: AttributeError
________________________ TestVacancyStats.test_salary_range_calculation ________________________

self = <workspace.tests.test_vacancy_stats.TestVacancyStats object at 0x7f494ff6bb50>
vacancy_stats = <src.utils.vacancy_stats.VacancyStats object at 0x7f494f009a50>

    def test_salary_range_calculation(self, vacancy_stats: VacancyStats) -> None:
        """Тест расчета диапазона зарплат"""
        # Создаем вакансию с диапазоном зарплат - используем правильный конструктор
        salary = Salary({"from": 50000, "to": 100000, "currency": "RUR"})
    
>       vacancy_with_range = Vacancy(
            title="Developer",
            vacancy_id="1",
            url="https://example.com/1",
            source="hh.ru",
            employer={"name": "Company1"},
            salary=salary,
            description="Job description"
        )

tests/test_vacancy_stats.py:161: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/vacancies/models.py:74: in __init__
    self.salary = self._validate_salary(salary)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/vacancies/models.py:100: in _validate_salary
    return Salary(salary_data) if salary_data else Salary()
           ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <src.utils.salary.Salary object at 0x7f494f14fa00>
salary_data = <src.utils.salary.Salary object at 0x7f494f14ee60>

    def __init__(self, salary_data: Optional[Dict[str, Any]] = None):
        if salary_data is None:
            salary_data = {}
    
        self.amount_from = 0
        self.amount_to = 0
        self.gross = False
        self.period = "month"
    
        # Сначала проверяем, есть ли строковый диапазон для парсинга
        if isinstance(salary_data, str):
            salary_data = self._parse_salary_range_string(salary_data)
        elif isinstance(salary_data, dict) and salary_data.get("salary_range"):
            range_data = self._parse_salary_range_string(salary_data["salary_range"])
            salary_data.update(range_data)
    
>       self._salary_from = self._validate_salary_value(salary_data.get("from"))
                                                        ^^^^^^^^^^^^^^^
E       AttributeError: 'Salary' object has no attribute 'get'

src/utils/salary.py:25: AttributeError
___________________________ TestVacancyStats.test_mixed_salary_types ___________________________

self = <workspace.tests.test_vacancy_stats.TestVacancyStats object at 0x7f494ff6aed0>
vacancy_stats = <src.utils.vacancy_stats.VacancyStats object at 0x7f494fbf6cd0>

    def test_mixed_salary_types(self, vacancy_stats: VacancyStats) -> None:
        """Тест обработки различных типов зарплат"""
        vacancies = []
    
        # Вакансия с полным диапазоном
        salary1 = Salary({"from": 80000, "to": 120000, "currency": "RUR"})
>       vacancy1 = Vacancy(
            title="Python Developer",
            vacancy_id="1",
            url="https://example.com/1",
            source="hh.ru",
            salary=salary1
        )

tests/test_vacancy_stats.py:185: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/vacancies/models.py:74: in __init__
    self.salary = self._validate_salary(salary)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/vacancies/models.py:100: in _validate_salary
    return Salary(salary_data) if salary_data else Salary()
           ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <src.utils.salary.Salary object at 0x7f494f14eaa0>
salary_data = <src.utils.salary.Salary object at 0x7f494f14fca0>

    def __init__(self, salary_data: Optional[Dict[str, Any]] = None):
        if salary_data is None:
            salary_data = {}
    
        self.amount_from = 0
        self.amount_to = 0
        self.gross = False
        self.period = "month"
    
        # Сначала проверяем, есть ли строковый диапазон для парсинга
        if isinstance(salary_data, str):
            salary_data = self._parse_salary_range_string(salary_data)
        elif isinstance(salary_data, dict) and salary_data.get("salary_range"):
            range_data = self._parse_salary_range_string(salary_data["salary_range"])
            salary_data.update(range_data)
    
>       self._salary_from = self._validate_salary_value(salary_data.get("from"))
                                                        ^^^^^^^^^^^^^^^
E       AttributeError: 'Salary' object has no attribute 'get'

src/utils/salary.py:25: AttributeError
______________ TestVacancyStats.test_salary_statistics_with_different_currencies _______________

self = <workspace.tests.test_vacancy_stats.TestVacancyStats object at 0x7f494ff6b550>
vacancy_stats = <src.utils.vacancy_stats.VacancyStats object at 0x7f494f03b890>

    def test_salary_statistics_with_different_currencies(self, vacancy_stats: VacancyStats) -> None:
        """Тест статистики с различными валютами"""
        vacancies = []
    
        # Вакансия в рублях
        salary_rur = Salary({"from": 100000, "to": 150000, "currency": "RUR"})
>       vacancy_rur = Vacancy(
            title="Developer RUR",
            vacancy_id="1",
            url="https://example.com/1",
            source="hh.ru",
            salary=salary_rur
        )

tests/test_vacancy_stats.py:239: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/vacancies/models.py:74: in __init__
    self.salary = self._validate_salary(salary)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/vacancies/models.py:100: in _validate_salary
    return Salary(salary_data) if salary_data else Salary()
           ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <src.utils.salary.Salary object at 0x7f494f1be380>
salary_data = <src.utils.salary.Salary object at 0x7f494f0eac80>

    def __init__(self, salary_data: Optional[Dict[str, Any]] = None):
        if salary_data is None:
            salary_data = {}
    
        self.amount_from = 0
        self.amount_to = 0
        self.gross = False
        self.period = "month"
    
        # Сначала проверяем, есть ли строковый диапазон для парсинга
        if isinstance(salary_data, str):
            salary_data = self._parse_salary_range_string(salary_data)
        elif isinstance(salary_data, dict) and salary_data.get("salary_range"):
            range_data = self._parse_salary_range_string(salary_data["salary_range"])
            salary_data.update(range_data)
    
>       self._salary_from = self._validate_salary_value(salary_data.get("from"))
                                                        ^^^^^^^^^^^^^^^
E       AttributeError: 'Salary' object has no attribute 'get'

src/utils/salary.py:25: AttributeError
________________ TestVacancyStats.test_calculate_salary_statistics_performance _________________

self = <workspace.tests.test_vacancy_stats.TestVacancyStats object at 0x7f494ff68350>
vacancy_stats = <src.utils.vacancy_stats.VacancyStats object at 0x7f494f976c90>

    def test_calculate_salary_statistics_performance(self, vacancy_stats: VacancyStats) -> None:
        """Тест производительности расчета статистики"""
        import time
    
        # Создаем большое количество вакансий
        large_vacancy_list = []
        for i in range(100):
            salary = Salary({"from": 50000 + i * 1000, "to": 100000 + i * 1000, "currency": "RUR"})
>           vacancy = Vacancy(
                title=f"Developer {i}",
                vacancy_id=str(i),
                url=f"https://example.com/{i}",
                source="hh.ru",
                salary=salary
            )

tests/test_vacancy_stats.py:279: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/vacancies/models.py:74: in __init__
    self.salary = self._validate_salary(salary)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/vacancies/models.py:100: in _validate_salary
    return Salary(salary_data) if salary_data else Salary()
           ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <src.utils.salary.Salary object at 0x7f494f1bd7e0>
salary_data = <src.utils.salary.Salary object at 0x7f494f1be1a0>

    def __init__(self, salary_data: Optional[Dict[str, Any]] = None):
        if salary_data is None:
            salary_data = {}
    
        self.amount_from = 0
        self.amount_to = 0
        self.gross = False
        self.period = "month"
    
        # Сначала проверяем, есть ли строковый диапазон для парсинга
        if isinstance(salary_data, str):
            salary_data = self._parse_salary_range_string(salary_data)
        elif isinstance(salary_data, dict) and salary_data.get("salary_range"):
            range_data = self._parse_salary_range_string(salary_data["salary_range"])
            salary_data.update(range_data)
    
>       self._salary_from = self._validate_salary_value(salary_data.get("from"))
                                                        ^^^^^^^^^^^^^^^
E       AttributeError: 'Salary' object has no attribute 'get'

src/utils/salary.py:25: AttributeError
_______________________ TestVacancyStats.test_salary_statistics_detailed _______________________

self = <workspace.tests.test_vacancy_stats.TestVacancyStats object at 0x7f494ff68ed0>
vacancy_stats = <src.utils.vacancy_stats.VacancyStats object at 0x7f494ff6ae50>

    def test_salary_statistics_detailed(self, vacancy_stats: VacancyStats) -> None:
        """Тест детальной статистики зарплат"""
        # Создаем вакансии с известными зарплатами для проверки расчетов
        vacancies = []
    
        # Вакансии с конкретными зарплатами
        salaries_data = [
            (100000, 150000),  # средняя: 125000
            (200000, 250000),  # средняя: 225000
            (80000, 120000),   # средняя: 100000
        ]
    
        for i, (min_sal, max_sal) in enumerate(salaries_data):
            salary = Salary({"from": min_sal, "to": max_sal, "currency": "RUR"})
>           vacancy = Vacancy(
                title=f"Developer {i}",
                vacancy_id=str(i),
                url=f"https://example.com/{i}",
                source="hh.ru",
                salary=salary
            )

tests/test_vacancy_stats.py:329: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/vacancies/models.py:74: in __init__
    self.salary = self._validate_salary(salary)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/vacancies/models.py:100: in _validate_salary
    return Salary(salary_data) if salary_data else Salary()
           ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <src.utils.salary.Salary object at 0x7f494f1bd240>
salary_data = <src.utils.salary.Salary object at 0x7f494f1bd0c0>

    def __init__(self, salary_data: Optional[Dict[str, Any]] = None):
        if salary_data is None:
            salary_data = {}
    
        self.amount_from = 0
        self.amount_to = 0
        self.gross = False
        self.period = "month"
    
        # Сначала проверяем, есть ли строковый диапазон для парсинга
        if isinstance(salary_data, str):
            salary_data = self._parse_salary_range_string(salary_data)
        elif isinstance(salary_data, dict) and salary_data.get("salary_range"):
            range_data = self._parse_salary_range_string(salary_data["salary_range"])
            salary_data.update(range_data)
    
>       self._salary_from = self._validate_salary_value(salary_data.get("from"))
                                                        ^^^^^^^^^^^^^^^
E       AttributeError: 'Salary' object has no attribute 'get'

src/utils/salary.py:25: AttributeError
______________________ TestVacancyStats.test_salary_statistics_formatting ______________________

self = <workspace.tests.test_vacancy_stats.TestVacancyStats object at 0x7f494ff4e210>
vacancy_stats = <src.utils.vacancy_stats.VacancyStats object at 0x7f494ff38990>

    def test_salary_statistics_formatting(self, vacancy_stats: VacancyStats) -> None:
        """Тест форматирования результатов статистики"""
        # Создаем простую вакансию для тестирования
        salary = Salary({"from": 100000, "to": 150000, "currency": "RUR"})
>       vacancy = Vacancy(
            title="Test Developer",
            vacancy_id="test_1",
            url="https://example.com/test",
            source="hh.ru",
            salary=salary
        )

tests/test_vacancy_stats.py:354: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/vacancies/models.py:74: in __init__
    self.salary = self._validate_salary(salary)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/vacancies/models.py:100: in _validate_salary
    return Salary(salary_data) if salary_data else Salary()
           ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <src.utils.salary.Salary object at 0x7f494f1bcf40>
salary_data = <src.utils.salary.Salary object at 0x7f494f1be860>

    def __init__(self, salary_data: Optional[Dict[str, Any]] = None):
        if salary_data is None:
            salary_data = {}
    
        self.amount_from = 0
        self.amount_to = 0
        self.gross = False
        self.period = "month"
    
        # Сначала проверяем, есть ли строковый диапазон для парсинга
        if isinstance(salary_data, str):
            salary_data = self._parse_salary_range_string(salary_data)
        elif isinstance(salary_data, dict) and salary_data.get("salary_range"):
            range_data = self._parse_salary_range_string(salary_data["salary_range"])
            salary_data.update(range_data)
    
>       self._salary_from = self._validate_salary_value(salary_data.get("from"))
                                                        ^^^^^^^^^^^^^^^
E       AttributeError: 'Salary' object has no attribute 'get'

src/utils/salary.py:25: AttributeError
=================================== short test summary info ====================================
FAILED tests/test_complete_module_coverage.py::TestCompleteModuleCoverage::test_vacancy_model_comprehensive - AttributeError: 'Salary' object has no attribute 'get'
FAILED tests/test_complete_module_coverage.py::TestCompleteModuleCoverage::test_comprehensive_type_checking - AttributeError: 'Salary' object has no attribute 'from_amount'
FAILED tests/test_complete_module_coverage.py::TestCompleteModuleCoverage::test_integration_with_mocked_dependencies - AssertionError: Expected 'AppConfig' to have been called.
FAILED tests/test_db_manager_demo.py::TestDBManagerDemo::test_demo_methods_call_db_manager - AssertionError: assert False
FAILED tests/test_db_manager_demo.py::TestDBManagerDemo::test_demo_individual_methods - AssertionError: Метод get_companies_and_vacancies_count не был вызван
FAILED tests/test_extended_coverage.py::TestAdvancedCoverage::test_module_interoperability - AttributeError: 'Salary' object has no attribute 'get'
FAILED tests/test_extended_coverage.py::TestAdvancedCoverage::test_configuration_coverage - Asse