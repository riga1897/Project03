~/workspace$ pytest
========================== test session starts ==========================
platform linux -- Python 3.11.13, pytest-8.4.1, pluggy-1.6.0
rootdir: /home/runner/workspace
configfile: pyproject.toml
plugins: mock-3.14.1, cov-6.2.1
collected 341 items                                                     

tests/test_abstract.py ........                                   [  2%]
tests/test_abstract_db_manager.py ....                            [  3%]
tests/test_api_config.py ....                                     [  4%]
tests/test_app_config.py .....                                    [  6%]
tests/test_base_api.py ......                                     [  7%]
tests/test_base_parser.py ......                                  [  9%]
tests/test_cache.py .......                                       [ 11%]
tests/test_cached_api.py FFFFFFFFFFF                              [ 14%]
tests/test_db_manager.py .................                        [ 19%]
tests/test_decorators.py .......                                  [ 21%]
tests/test_env_loader.py ............                             [ 25%]
tests/test_file_handlers.py ............                          [ 29%]
tests/test_get_api.py ......                                      [ 30%]
tests/test_hh_api.py .......                                      [ 32%]
tests/test_hh_api_config.py .....                                 [ 34%]
tests/test_hh_parser.py ........                                  [ 36%]
tests/test_menu_manager.py ..........                             [ 39%]
tests/test_paginator.py ......                                    [ 41%]
tests/test_postgres_saver.py .......                              [ 43%]
tests/test_salary_utils.py ......................                 [ 49%]
tests/test_search_utils.py ..................                     [ 55%]
tests/test_sj_api.py ..FF.........F                               [ 59%]
tests/test_sj_api_config.py .....                                 [ 60%]
tests/test_sj_parser.py ........                                  [ 63%]
tests/test_storage_factory.py ........                            [ 65%]
tests/test_target_companies.py .....                              [ 66%]
tests/test_ui_config.py .....                                     [ 68%]
tests/test_ui_helpers.py ...........                              [ 71%]
tests/test_unified_api.py .................                       [ 76%]
tests/test_user_interface.py ........                             [ 78%]
tests/test_vacancy_display_handler.py .........                   [ 81%]
tests/test_vacancy_formatter.py ...F..........                    [ 85%]
tests/test_vacancy_models.py F..FF...FF.....F.FF..FF..            [ 92%]
tests/test_vacancy_operations_coordinator.py ...........          [ 96%]
tests/test_vacancy_search_handler.py ......                       [ 97%]
tests/test_vacancy_stats.py .......                               [100%]

=============================== FAILURES ================================
_____________ TestCachedAPI.test_cached_api_initialization ______________

self = <workspace.tests.test_cached_api.TestCachedAPI object at 0x7fcbe7362a10>
mock_file_cache = <MagicMock name='FileCache' id='140513717356944'>

    @patch("src.utils.cache.FileCache")
    def test_cached_api_initialization(self, mock_file_cache):
        """Тест инициализации CachedAPI"""
        mock_cache_instance = Mock()
        mock_file_cache.return_value = mock_cache_instance
    
>       api = ConcreteCachedAPI()
              ^^^^^^^^^^^^^^^^^^^

tests/test_cached_api.py:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <workspace.tests.test_cached_api.ConcreteCachedAPI object at 0x7fcbe7a78c90>

    def __init__(self):
>       super().__init__()
E       TypeError: CachedAPI.__init__() missing 1 required positional argument: 'cache_dir'

tests/test_cached_api.py:18: TypeError
___________ TestCachedAPI.test_cached_api_with_cache_manager ____________

self = <workspace.tests.test_cached_api.TestCachedAPI object at 0x7fcbe7363150>
mock_file_cache = <MagicMock name='FileCache' id='140513717384848'>

    @patch("src.utils.cache.FileCache")
    def test_cached_api_with_cache_manager(self, mock_file_cache):
        """Тест CachedAPI с кэш менеджером"""
        mock_cache_instance = Mock()
        mock_file_cache.return_value = mock_cache_instance
    
>       api = ConcreteCachedAPI()
              ^^^^^^^^^^^^^^^^^^^

tests/test_cached_api.py:61: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <workspace.tests.test_cached_api.ConcreteCachedAPI object at 0x7fcbe635f1d0>

    def __init__(self):
>       super().__init__()
E       TypeError: CachedAPI.__init__() missing 1 required positional argument: 'cache_dir'

tests/test_cached_api.py:18: TypeError
____________ TestCachedAPI.test_cached_api_abstract_methods _____________

self = <workspace.tests.test_cached_api.TestCachedAPI object at 0x7fcbe73637d0>
mock_file_cache = <MagicMock name='FileCache' id='140513717366032'>

    @patch("src.utils.cache.FileCache")
    def test_cached_api_abstract_methods(self, mock_file_cache):
        """Тест реализации абстрактных методов CachedAPI"""
>       api = ConcreteCachedAPI()
              ^^^^^^^^^^^^^^^^^^^

tests/test_cached_api.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <workspace.tests.test_cached_api.ConcreteCachedAPI object at 0x7fcbe635a890>

    def __init__(self):
>       super().__init__()
E       TypeError: CachedAPI.__init__() missing 1 required positional argument: 'cache_dir'

tests/test_cached_api.py:18: TypeError
_________________ TestCachedAPI.test_cache_integration __________________

self = <workspace.tests.test_cached_api.TestCachedAPI object at 0x7fcbe736e850>
mock_file_cache = <MagicMock name='FileCache' id='140513717386384'>

    @patch("src.utils.cache.FileCache")
    def test_cache_integration(self, mock_file_cache):
        """Тест интеграции с кэшем"""
        mock_cache_instance = Mock()
        mock_cache_instance.get.return_value = None
        mock_cache_instance.set.return_value = None
        mock_file_cache.return_value = mock_cache_instance
    
>       api = ConcreteCachedAPI()
              ^^^^^^^^^^^^^^^^^^^

tests/test_cached_api.py:85: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <workspace.tests.test_cached_api.ConcreteCachedAPI object at 0x7fcbe6369c10>

    def __init__(self):
>       super().__init__()
E       TypeError: CachedAPI.__init__() missing 1 required positional argument: 'cache_dir'

tests/test_cached_api.py:18: TypeError
_________________ TestCachedAPI.test_clear_cache_method _________________

self = <workspace.tests.test_cached_api.TestCachedAPI object at 0x7fcbe736e290>
mock_file_cache = <MagicMock name='FileCache' id='140513713223440'>

    @patch("src.utils.cache.FileCache")
    def test_clear_cache_method(self, mock_file_cache):
        """Тест метода очистки кэша"""
        mock_cache_instance = Mock()
        mock_cache_instance.clear.return_value = None
        mock_file_cache.return_value = mock_cache_instance
    
>       api = ConcreteCachedAPI()
              ^^^^^^^^^^^^^^^^^^^

tests/test_cached_api.py:104: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <workspace.tests.test_cached_api.ConcreteCachedAPI object at 0x7fcbe6773e50>

    def __init__(self):
>       super().__init__()
E       TypeError: CachedAPI.__init__() missing 1 required positional argument: 'cache_dir'

tests/test_cached_api.py:18: TypeError
_________ TestCachedAPIEdgeCases.test_cached_api_empty_response _________

self = <workspace.tests.test_cached_api.TestCachedAPIEdgeCases object at 0x7fcbe736ec90>
mock_file_cache = <MagicMock name='FileCache' id='140513713184848'>

    @patch("src.utils.cache.FileCache")
    def test_cached_api_empty_response(self, mock_file_cache):
        """Тест обработки пустого ответа"""
        mock_cache_instance = Mock()
        mock_cache_instance.get.return_value = None
        mock_file_cache.return_value = mock_cache_instance
    
>       api = ConcreteCachedAPI()
              ^^^^^^^^^^^^^^^^^^^

tests/test_cached_api.py:125: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <workspace.tests.test_cached_api.ConcreteCachedAPI object at 0x7fcbe8b1e890>

    def __init__(self):
>       super().__init__()
E       TypeError: CachedAPI.__init__() missing 1 required positional argument: 'cache_dir'

tests/test_cached_api.py:18: TypeError
___________ TestCachedAPIEdgeCases.test_cached_api_cache_miss ___________

self = <workspace.tests.test_cached_api.TestCachedAPIEdgeCases object at 0x7fcbe736f310>
mock_file_cache = <MagicMock name='FileCache' id='140513713324816'>

    @patch("src.utils.cache.FileCache")
    def test_cached_api_cache_miss(self, mock_file_cache):
        """Тест кэш-промаха"""
        mock_cache_instance = Mock()
        mock_cache_instance.get.return_value = None  # Кэш-промах
        mock_file_cache.return_value = mock_cache_instance
    
>       api = ConcreteCachedAPI()
              ^^^^^^^^^^^^^^^^^^^

tests/test_cached_api.py:137: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <workspace.tests.test_cached_api.ConcreteCachedAPI object at 0x7fcbe5f81690>

    def __init__(self):
>       super().__init__()
E       TypeError: CachedAPI.__init__() missing 1 required positional argument: 'cache_dir'

tests/test_cached_api.py:18: TypeError
___________ TestCachedAPIEdgeCases.test_cached_api_cache_hit ____________

self = <workspace.tests.test_cached_api.TestCachedAPIEdgeCases object at 0x7fcbe736fd90>
mock_file_cache = <MagicMock name='FileCache' id='140513734222096'>

    @patch("src.utils.cache.FileCache")
    def test_cached_api_cache_hit(self, mock_file_cache):
        """Тест кэш-попадания"""
        cached_data = [
            Vacancy("123", "Python Developer", "https://test.com", "test_source")
        ]
    
        mock_cache_instance = Mock()
        mock_cache_instance.get.return_value = cached_data
        mock_file_cache.return_value = mock_cache_instance
    
>       api = ConcreteCachedAPI()
              ^^^^^^^^^^^^^^^^^^^

tests/test_cached_api.py:152: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <workspace.tests.test_cached_api.ConcreteCachedAPI object at 0x7fcbe7a9dfd0>

    def __init__(self):
>       super().__init__()
E       TypeError: CachedAPI.__init__() missing 1 required positional argument: 'cache_dir'

tests/test_cached_api.py:18: TypeError
_____________ TestCachedAPIHelpers.test_make_request_method _____________

self = <workspace.tests.test_cached_api.TestCachedAPIHelpers object at 0x7fcbe736d2d0>
mock_file_cache = <MagicMock name='FileCache' id='140513717357968'>

    @patch("src.utils.cache.FileCache")
    def test_make_request_method(self, mock_file_cache):
        """Тест метода _make_request"""
>       api = ConcreteCachedAPI()
              ^^^^^^^^^^^^^^^^^^^

tests/test_cached_api.py:165: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <workspace.tests.test_cached_api.ConcreteCachedAPI object at 0x7fcbe635ab50>

    def __init__(self):
>       super().__init__()
E       TypeError: CachedAPI.__init__() missing 1 required positional argument: 'cache_dir'

tests/test_cached_api.py:18: TypeError
____________ TestCachedAPIHelpers.test_parse_response_method ____________

self = <workspace.tests.test_cached_api.TestCachedAPIHelpers object at 0x7fcbe736cfd0>
mock_file_cache = <MagicMock name='FileCache' id='140513713610320'>

    @patch("src.utils.cache.FileCache")
    def test_parse_response_method(self, mock_file_cache):
        """Тест метода _parse_response"""
>       api = ConcreteCachedAPI()
              ^^^^^^^^^^^^^^^^^^^

tests/test_cached_api.py:173: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <workspace.tests.test_cached_api.ConcreteCachedAPI object at 0x7fcbe5fc4610>

    def __init__(self):
>       super().__init__()
E       TypeError: CachedAPI.__init__() missing 1 required positional argument: 'cache_dir'

tests/test_cached_api.py:18: TypeError
___________ TestCachedAPIHelpers.test_cached_api_inheritance ____________

self = <workspace.tests.test_cached_api.TestCachedAPIHelpers object at 0x7fcbe736d310>
mock_file_cache = <MagicMock name='FileCache' id='140513717381520'>

    @patch("src.utils.cache.FileCache")
    def test_cached_api_inheritance(self, mock_file_cache):
        """Тест наследования от CachedAPI"""
>       api = ConcreteCachedAPI()
              ^^^^^^^^^^^^^^^^^^^

tests/test_cached_api.py:182: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <workspace.tests.test_cached_api.ConcreteCachedAPI object at 0x7fcbe635f690>

    def __init__(self):
>       super().__init__()
E       TypeError: CachedAPI.__init__() missing 1 required positional argument: 'cache_dir'

tests/test_cached_api.py:18: TypeError
______________ TestSuperJobAPI.test_get_companies_success _______________

self = <workspace.tests.test_sj_api.TestSuperJobAPI object at 0x7fcbe6327090>
mock_paginator = <MagicMock name='Paginator' id='140513717427216'>
mock_api_config = <MagicMock name='APIConfig' id='140513721648208'>
mock_cache = <MagicMock name='FileCache' id='140513712881360'>
mock_connector = <MagicMock name='APIConnector' id='140513712875984'>

    @patch('src.api_modules.sj_api.APIConnector')
    @patch('src.utils.cache.FileCache')
    @patch('src.api_modules.sj_api.APIConfig')
    @patch('src.api_modules.sj_api.Paginator')
    def test_get_companies_success(self, mock_paginator, mock_api_config, mock_cache, mock_connector):
        """Тест успешного получения компаний"""
        mock_config = Mock()
        mock_config.superjob_base_url = "https://api.superjob.ru"
        mock_config.superjob_api_key = "test_key"
        mock_api_config.return_value = mock_config
    
        mock_connector_instance = Mock()
        mock_connector.return_value = mock_connector_instance
        mock_connector_instance.get.return_value = {"objects": [], "total": 0}
    
        api = SuperJobAPI()
    
        # Мокируем метод получения компаний
        api._get_companies_from_api = Mock(return_value=[])
>       result = api.get_companies()
                 ^^^^^^^^^^^^^^^^^
E       AttributeError: 'SuperJobAPI' object has no attribute 'get_companies'

tests/test_sj_api.py:90: AttributeError
________________ TestSuperJobAPI.test_parse_vacancy_data ________________

self = <workspace.tests.test_sj_api.TestSuperJobAPI object at 0x7fcbe6326dd0>
mock_paginator = <MagicMock name='Paginator' id='140513713723280'>
mock_api_config = <MagicMock name='APIConfig' id='140513713722448'>
mock_cache = <MagicMock name='FileCache' id='140513713585808'>
mock_connector = <MagicMock name='APIConnector' id='140513717574864'>

    @patch('src.api_modules.sj_api.APIConnector')
    @patch('src.utils.cache.FileCache')
    @patch('src.api_modules.sj_api.APIConfig')
    @patch('src.api_modules.sj_api.Paginator')
    def test_parse_vacancy_data(self, mock_paginator, mock_api_config, mock_cache, mock_connector):
        """Тест парсинга данных вакансии"""
        mock_config = Mock()
        mock_config.superjob_base_url = "https://api.superjob.ru"
        mock_config.superjob_api_key = "test_key"
        mock_api_config.return_value = mock_config
    
        api = SuperJobAPI()
    
        # Тестовые данные вакансии
        vacancy_data = {
            "id": 123,
            "profession": "Python Developer",
            "link": "https://superjob.ru/vacancy/123",
            "payment_from": 100000,
            "payment_to": 150000,
            "currency": "rub",
            "firm": {"title": "Test Company"}
        }
    
        # Создаем мок парсера в модуле
>       with patch('src.vacancies.parsers.sj_parser.SJParser') as mock_parser:

tests/test_sj_api.py:118: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1446: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <unittest.mock._patch object at 0x7fcbe6370750>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'src.vacancies.parsers.sj_parser' from '/home/runner/workspace/tests/../src/vacancies/parsers/sj_parser.py'> does not have the attribute 'SJParser'

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1419: AttributeError
___________ TestSuperJobAPIHelpers.test_api_response_parsing ____________

self = <workspace.tests.test_sj_api.TestSuperJobAPIHelpers object at 0x7fcbe67645d0>
mock_paginator = <MagicMock name='Paginator' id='140513713331984'>
mock_api_config = <MagicMock name='APIConfig' id='140513709639504'>
mock_cache = <MagicMock name='FileCache' id='140513709644880'>
mock_connector = <MagicMock name='APIConnector' id='140513709650128'>

    @patch('src.api_modules.sj_api.APIConnector')
    @patch('src.utils.cache.FileCache')
    @patch('src.api_modules.sj_api.APIConfig')
    @patch('src.api_modules.sj_api.Paginator')
    def test_api_response_parsing(self, mock_paginator, mock_api_config, mock_cache, mock_connector):
        """Тест парсинга ответа API"""
        mock_config = Mock()
        mock_config.superjob_base_url = "https://api.superjob.ru"
        mock_config.superjob_api_key = "test_key"
        mock_api_config.return_value = mock_config
    
        api = SuperJobAPI()
    
        # Тестируем парсинг ответа
        test_response = {
            "objects": [
                {"id": 123, "profession": "Python Developer"},
                {"id": 124, "profession": "Java Developer"}
            ],
            "total": 2
        }
    
        # Мокируем методы парсинга
>       with patch('src.vacancies.parsers.sj_parser.SJParser') as mock_parser:

tests/test_sj_api.py:376: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1446: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <unittest.mock._patch object at 0x7fcbe5bb7010>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'src.vacancies.parsers.sj_parser' from '/home/runner/workspace/tests/../src/vacancies/parsers/sj_parser.py'> does not have the attribute 'SJParser'

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1419: AttributeError
__________ TestVacancyFormatter.test_format_vacancy_info_full ___________

self = <workspace.tests.test_vacancy_formatter.TestVacancyFormatter object at 0x7fcbe5f3ec50>

    def test_format_vacancy_info_full(self):
        """Тест полного форматирования вакансии"""
        salary_dict = {
            "from": 100000,
            "to": 150000,
            "currency": "RUR"
        }
        employer_dict = {"name": "Test Company", "id": "123"}
    
        vacancy = Vacancy(
            vacancy_id="123",
            title="Python Developer",
            url="https://test.com/vacancy/123",
            source="hh.ru",
            salary=salary_dict,
            employer=employer_dict,
            area="Москва",
            experience="От 1 года до 3 лет",
            employment="Полная занятость",
        )
    
        formatter = VacancyFormatter()
        result = formatter.format_vacancy_info(vacancy)
    
        assert "Python Developer" in result
        assert "Test Company" in result
        # Проверяем отформатированные числа
>       assert "100 000" in result or "150 000" in result
E       AssertionError: assert ('100 000' in 'ID: 123\nНазвание: Python Developer\nКомпания: Test Company\nЗарплата: от 100,000 до 150,000 руб. в месяц\nОпыт: От 1 года до 3 лет\nЗанятость: Полная занятость\nИсточник: hh.ru\nСсылка: https://test.com/vacancy/123' or '150 000' in 'ID: 123\nНазвание: Python Developer\nКомпания: Test Company\nЗарплата: от 100,000 до 150,000 руб. в месяц\nОпыт: От 1 года до 3 лет\nЗанятость: Полная занятость\nИсточник: hh.ru\nСсылка: https://test.com/vacancy/123')

tests/test_vacancy_formatter.py:122: AssertionError
________________ TestVacancy.test_vacancy_initialization ________________

self = <workspace.tests.test_vacancy_models.TestVacancy object at 0x7fcbe5b12f90>

    def test_vacancy_initialization(self):
        """Тест инициализации вакансии"""
        vacancy = Vacancy("123", "Python Developer", "https://test.com", "hh.ru")
>       assert vacancy.vacancy_id == "123"
E       AssertionError: assert '870d2c49-df7...-aa52c1598dd3' == '123'
E         
E         - 123
E         + 870d2c49-df74-45bc-ad05-aa52c1598dd3

tests/test_vacancy_models.py:76: AssertionError
__________________ TestVacancy.test_vacancy_comparison __________________

self = <workspace.tests.test_vacancy_models.TestVacancy object at 0x7fcbe5b12c50>

    def test_vacancy_comparison(self):
        """Тест сравнения вакансий"""
        vacancy1 = TestableVacancy("123", "Python Developer", "https://test.com", "hh.ru")
        vacancy2 = TestableVacancy("123", "Python Developer", "https://test.com", "hh.ru")
        vacancy3 = TestableVacancy("124", "Java Developer", "https://test2.com", "hh.ru")
    
>       assert vacancy1 == vacancy2
E       AssertionError: assert Vacancy(id=06fd9165-c531-4851-b96b-08022480052d, title='123', source='unknown') == Vacancy(id=43cc5169-e0e4-41a1-86ed-dbeaf12fc682, title='123', source='unknown')

tests/test_vacancy_models.py:116: AssertionError
_____________________ TestVacancy.test_vacancy_hash _____________________

self = <workspace.tests.test_vacancy_models.TestVacancy object at 0x7fcbe5b12b90>

    def test_vacancy_hash(self):
        """Тест хэширования вакансий"""
        vacancy1 = TestableVacancy("123", "Python Developer", "https://test.com", "hh.ru")
        vacancy2 = TestableVacancy("123", "Python Developer", "https://test.com", "hh.ru")
    
>       assert hash(vacancy1) == hash(vacancy2)
E       AssertionError: assert -2407322564407247031 == -1997515343945524935
E        +  where -2407322564407247031 = hash(Vacancy(id=2bd1f707-ba70-40ca-a09e-51cc6b472763, title='123', source='unknown'))
E        +  and   -1997515343945524935 = hash(Vacancy(id=f878c9a1-9b73-4035-af12-1ec4be04f24e, title='123', source='unknown'))

tests/test_vacancy_models.py:124: AssertionError
___________________ TestVacancy.test_vacancy_to_dict ____________________

self = <workspace.tests.test_vacancy_models.TestVacancy object at 0x7fcbe5b10310>

    def test_vacancy_to_dict(self):
        """Тест преобразования вакансии в словарь"""
        # Создаем зарплату с правильными параметрами
        salary_data = {"from": 100000, "to": 150000, "currency": "RUR"}
    
        vacancy = Vacancy(
            vacancy_id="123",
            title="Python Developer",
            url="https://test.com",
            source="hh.ru",
            salary=salary_data
        )
    
>       result = vacancy.to_dict()
                 ^^^^^^^^^^^^^^^^^

tests/test_vacancy_models.py:167: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <src.vacancies.models.Vacancy object at 0x7fcbe5bdb790>

    def to_dict(self) -> Dict[str, Any]:
        """Преобразование вакансии в словарь"""
        result = {
            "vacancy_id": self.vacancy_id,
            "title": self.title,
            "url": self.url,
            "source": self.source,
            "area": self.area,
            "experience": self.experience,
            "employment": self.employment,
            "description": self.description,
            "published_at": self.published_at,
        }
    
        if self.salary:
            result["salary"] = {
>               "from_amount": self.salary.from_amount,
                               ^^^^^^^^^^^^^^^^^^^^^^^
                "to_amount": self.salary.to_amount,
                "currency": self.salary.currency,
            }
E           AttributeError: 'Salary' object has no attribute 'from_amount'

src/vacancies/models.py:364: AttributeError
_________________ TestVacancy.test_vacancy_minimal_data _________________

self = <workspace.tests.test_vacancy_models.TestVacancy object at 0x7fcbe5b11510>

    def test_vacancy_minimal_data(self):
        """Тест создания вакансии с минимальными данными"""
        vacancy = Vacancy("123", "Python Developer", "https://test.com", "hh.ru")
>       assert vacancy.vacancy_id == "123"
E       AssertionError: assert 'f99fe8e2-898...-20a9f3c24c43' == '123'
E         
E         - 123
E         + f99fe8e2-8989-4c93-bac3-20a9f3c24c43

tests/test_vacancy_models.py:175: AssertionError
______________ TestVacancy.test_vacancy_source_formatting _______________

self = <workspace.tests.test_vacancy_models.TestVacancy object at 0x7fcbe5b03b50>

    def test_vacancy_source_formatting(self):
        """Тест форматирования источника вакансии"""
        hh_vacancy = TestableVacancy("123", "Python Developer", "https://test.com", "hh.ru")
>       assert hh_vacancy.get_formatted_source() == "HH.RU"
E       AssertionError: assert 'UNKNOWN' == 'HH.RU'
E         
E         - HH.RU
E         + UNKNOWN

tests/test_vacancy_models.py:256: AssertionError
____________ TestVacancyEdgeCases.test_vacancy_empty_fields _____________

self = <workspace.tests.test_vacancy_models.TestVacancyEdgeCases object at 0x7fcbe5b01790>

    def test_vacancy_empty_fields(self):
        """Тест вакансии с пустыми полями"""
        vacancy = Vacancy("", "", "", "")
>       assert vacancy.vacancy_id == ""
E       AssertionError: assert '406cc633-b24...-0e0f518c26e5' == ''
E         
E         + 406cc633-b24b-4c33-8004-0e0f518c26e5

tests/test_vacancy_models.py:282: AssertionError
_____________ TestVacancyEdgeCases.test_vacancy_none_salary _____________

self = <workspace.tests.test_vacancy_models.TestVacancyEdgeCases object at 0x7fcbe5b01010>

    def test_vacancy_none_salary(self):
        """Тест вакансии без зарплаты"""
>       vacancy = Vacancy("123", "Python Developer", "https://test.com", "hh.ru", salary=None)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       TypeError: Vacancy.__init__() got multiple values for argument 'salary'

tests/test_vacancy_models.py:289: TypeError
_______ TestVacancyDataTransformation.test_vacancy_dict_roundtrip _______

self = <workspace.tests.test_vacancy_models.TestVacancyDataTransformation object at 0x7fcbe5b02250>

    def test_vacancy_dict_roundtrip(self):
        """Тест преобразования вакансии в словарь и обратно"""
        # Создаем оригинальную вакансию
        salary_data = {"from": 100000, "to": 150000, "currency": "RUR"}
    
        original_vacancy = Vacancy(
            vacancy_id="123",
            title="Python Developer",
            url="https://test.com",
            source="hh.ru",
            salary=salary_data
        )
    
        # Преобразуем в словарь
>       vacancy_dict = original_vacancy.to_dict()
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_vacancy_models.py:355: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <src.vacancies.models.Vacancy object at 0x7fcbe5f39090>

    def to_dict(self) -> Dict[str, Any]:
        """Преобразование вакансии в словарь"""
        result = {
            "vacancy_id": self.vacancy_id,
            "title": self.title,
            "url": self.url,
            "source": self.source,
            "area": self.area,
            "experience": self.experience,
            "employment": self.employment,
            "description": self.description,
            "published_at": self.published_at,
        }
    
        if self.salary:
            result["salary"] = {
>               "from_amount": self.salary.from_amount,
                               ^^^^^^^^^^^^^^^^^^^^^^^
                "to_amount": self.salary.to_amount,
                "currency": self.salary.currency,
            }
E           AttributeError: 'Salary' object has no attribute 'from_amount'

src/vacancies/models.py:364: AttributeError
___ TestVacancyDataTransformation.test_vacancy_dict_with_complex_data ___

self = <workspace.tests.test_vacancy_models.TestVacancyDataTransformation object at 0x7fcbe5ff7890>

    def test_vacancy_dict_with_complex_data(self):
        """Тест преобразования сложных данных в словарь"""
        employer = {"name": "Test Company", "id": "123", "trusted": True}
        salary_data = {"from": 100000, "to": 150000, "currency": "RUR"}
    
        vacancy = Vacancy(
            vacancy_id="123",
            title="Python Developer",
            url="https://test.com",
            source="hh.ru",
            salary=salary_data,
            employer=employer,
            description="Long description",
            area="Москва"
        )
    
>       result = vacancy.to_dict()
                 ^^^^^^^^^^^^^^^^^

tests/test_vacancy_models.py:382: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <src.vacancies.models.Vacancy object at 0x7fcbe5bd31e0>

    def to_dict(self) -> Dict[str, Any]:
        """Преобразование вакансии в словарь"""
        result = {
            "vacancy_id": self.vacancy_id,
            "title": self.title,
            "url": self.url,
            "source": self.source,
            "area": self.area,
            "experience": self.experience,
            "employment": self.employment,
            "description": self.description,
            "published_at": self.published_at,
        }
    
        if self.salary:
            result["salary"] = {
>               "from_amount": self.salary.from_amount,
                               ^^^^^^^^^^^^^^^^^^^^^^^
                "to_amount": self.salary.to_amount,
                "currency": self.salary.currency,
            }
E           AttributeError: 'Salary' object has no attribute 'from_amount'

src/vacancies/models.py:364: AttributeError
=========================== warnings summary ============================
tests/test_sj_api.py:13
  /home/runner/workspace/tests/test_sj_api.py:13: PytestCollectionWarning: cannot collect test class 'TestableSuperjobAPI' because it has a __init__ constructor (from: tests/test_sj_api.py)
    class TestableSuperjobAPI(SuperJobAPI):

tests/test_vacancy_display_handler.py:30
  /home/runner/workspace/tests/test_vacancy_display_handler.py:30: PytestCollectionWarning: cannot collect test class 'TestableVacancyDisplayHandler' because it has a __init__ constructor (from: tests/test_vacancy_display_handler.py)
    class TestableVacancyDisplayHandler(VacancyDisplayHandler):

tests/test_vacancy_formatter.py:15
  /home/runner/workspace/tests/test_vacancy_formatter.py:15: PytestCollectionWarning: cannot collect test class 'TestableVacancyFormatter' because it has a __init__ constructor (from: tests/test_vacancy_formatter.py)
    class TestableVacancyFormatter(VacancyFormatter):

tests/test_vacancy_models.py:17
  /home/runner/workspace/tests/test_vacancy_models.py:17: PytestCollectionWarning: cannot collect test class 'TestableVacancy' because it has a __init__ constructor (from: tests/test_vacancy_models.py)
    class TestableVacancy(Vacancy):

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
======================== short test summary info ========================
FAILED tests/test_cached_api.py::TestCachedAPI::test_cached_api_initialization - TypeError: CachedAPI.__init__() missing 1 required positional argume...
FAILED tests/test_cached_api.py::TestCachedAPI::test_cached_api_with_cache_manager - TypeError: CachedAPI.__init__() missing 1 required positional argume...
FAILED tests/test_cached_api.py::TestCachedAPI::test_cached_api_abstract_methods - TypeError: CachedAPI.__init__() missing 1 required positional argume...
FAILED tests/test_cached_api.py::TestCachedAPI::test_cache_integration - TypeError: CachedAPI.__init__() missing 1 required positional argume...
FAILED tests/test_cached_api.py::TestCachedAPI::test_clear_cache_method - TypeError: CachedAPI.__init__() missing 1 required positional argume...
FAILED tests/test_cached_api.py::TestCachedAPIEdgeCases::test_cached_api_empty_response - TypeError: CachedAPI.__init__() missing 1 required positional argume...
FAILED tests/test_cached_api.py::TestCachedAPIEdgeCases::test_cached_api_cache_miss - TypeError: CachedAPI.__init__() missing 1 required positional argume...
FAILED tests/test_cached_api.py::TestCachedAPIEdgeCases::test_cached_api_cache_hit - TypeError: CachedAPI.__init__() missing 1 required positional argume...
FAILED tests/test_cached_api.py::TestCachedAPIHelpers::test_make_request_method - TypeError: CachedAPI.__init__() missing 1 required positional argume...
FAILED tests/test_cached_api.py::TestCachedAPIHelpers::test_parse_response_method - TypeError: CachedAPI.__init__() missing 1 required positional argume...
FAILED tests/test_cached_api.py::TestCachedAPIHelpers::test_cached_api_inheritance - TypeError: CachedAPI.__init__() missing 1 required positional argume...
FAILED tests/test_sj_api.py::TestSuperJobAPI::test_get_companies_success - AttributeError: 'SuperJobAPI' object has no attribute 'get_companies'
FAILED tests/test_sj_api.py::TestSuperJobAPI::test_parse_vacancy_data - AttributeError: <module 'src.vacancies.parsers.sj_parser' from '/hom...
FAILED tests/test_sj_api.py::TestSuperJobAPIHelpers::test_api_response_parsing - AttributeError: <module 'src.vacancies.parsers.sj_parser' from '/hom...
FAILED tests/test_vacancy_formatter.py::TestVacancyFormatter::test_format_vacancy_info_full - AssertionError: assert ('100 000' in 'ID: 123\nНазвание: Python Deve...
FAILED tests/test_vacancy_models.py::TestVacancy::test_vacancy_initialization - AssertionError: assert '870d2c49-df7...-aa52c1598dd3' == '123'
FAILED tests/test_vacancy_models.py::TestVacancy::test_vacancy_comparison - AssertionError: assert Vacancy(id=06fd9165-c531-4851-b96b-0802248005...
FAILED tests/test_vacancy_models.py::TestVacancy::test_vacancy_hash - AssertionError: assert -2407322564407247031 == -1997515343945524935
FAILED tests/test_vacancy_models.py::TestVacancy::test_vacancy_to_dict - AttributeError: 'Salary' object has no attribute 'from_amount'
FAILED tests/test_vacancy_models.py::TestVacancy::test_vacancy_minimal_data - AssertionError: assert 'f99fe8e2-898...-20a9f3c24c43' == '123'
FAILED tests/test_vacancy_models.py::TestVacancy::test_vacancy_source_formatting - AssertionError: assert 'UNKNOWN' == 'HH.RU'
FAILED tests/test_vacancy_models.py::TestVacancyEdgeCases::test_vacancy_empty_fields - AssertionError: assert '406cc633-b24...-0e0f518c26e5' == ''
FAILED tests/test_vacancy_models.py::TestVacancyEdgeCases::test_vacancy_none_salary - TypeError: Vacancy.__init__() got multiple values for argument 'salary'
FAILED tests/test_vacancy_models.py::TestVacancyDataTransformation::test_vacancy_dict_roundtrip - AttributeError: 'Salary' object has no attribute 'from_amount'
FAILED tests/test_vacancy_models.py::TestVacancyDataTransformation::test_vacancy_dict_with_complex_data - AttributeError: 'Salary' object has no attribute 'from_amount'
============== 25 failed, 316 passed, 4 warnings in 2.04s ===============
~/workspace$ 