=============================== test session starts ================================
platform linux -- Python 3.11.13, pytest-8.4.2, pluggy-1.6.0
rootdir: /home/runner/workspace
configfile: pyproject.toml
plugins: cov-6.2.1, mock-3.15.0
collected 1280 items                                                               

tests/test_abstract.py ........                                              [  0%]
tests/test_abstract_db_manager.py ....                                       [  0%]
tests/test_abstract_filter_complete.py .FFFFFFFF                             [  1%]
tests/test_api_complete.py ...................                               [  3%]
tests/test_api_config.py ....                                                [  3%]
tests/test_api_data_filter.py ......                                         [  3%]
tests/test_api_fixes.py ...F...                                              [  4%]
tests/test_api_modules.py .............................                      [  6%]
tests/test_api_modules_consolidated.py ....                                  [  7%]
tests/test_app_config.py .........                                           [  7%]
tests/test_base_api.py ...............                                       [  8%]
tests/test_base_formatter.py ....FFFFFFFFFF                                  [ 10%]
tests/test_base_formatter_complete.py ..............................         [ 12%]
tests/test_base_parser.py ......                                             [ 12%]
tests/test_cache.py ......................                                   [ 14%]
tests/test_cached_api.py ....                                                [ 14%]
tests/test_cached_api_complete.py sssssssssssssssssssFFFsssssss              [ 17%]
tests/test_components_fixed.py ...                                           [ 17%]
tests/test_comprehensive_fixed.py s....                                      [ 17%]
tests/test_config_consolidated.py .....                                      [ 18%]
tests/test_config_missing_coverage.py ssssssssss.............ss...           [ 20%]
tests/test_config_modules_consolidated.py ......                             [ 20%]
tests/test_console_interface.py ......                                       [ 21%]
tests/test_core_functionality_consolidated.py .....                          [ 21%]
tests/test_core_modules_comprehensive.py ........                            [ 22%]
tests/test_data_normalizers_comprehensive.py ............................    [ 24%]
tests/test_database_connection.py ........                                   [ 25%]
tests/test_db_config.py .....                                                [ 25%]
tests/test_db_manager.py .................                                   [ 26%]
tests/test_decorators.py .......                                             [ 27%]
tests/test_description_parser.py ..........                                  [ 28%]
tests/test_env_loader.py ................                                    [ 29%]
tests/test_filter_utils.py ssssss                                            [ 29%]
tests/test_get_api_complete.py ssssssssssssssssssss                          [ 31%]
tests/test_hh_api_complete.py .................                              [ 32%]
tests/test_hh_api_config.py .....                                            [ 33%]
tests/test_hh_parser.py ........                                             [ 33%]
tests/test_integration.py .............                                      [ 34%]
tests/test_interfaces.py Fss                                                 [ 35%]
tests/test_main_application_interface.py F.F                                 [ 35%]
tests/test_main_application_interface_complete.py F..FFFFFFFFFFFFFFFFFFFFFFF [ 37%]
FFFFFFFFFFFFFFFFF                                                            [ 38%]
tests/test_main_consolidated.py .........                                    [ 39%]
tests/test_menu_manager.py ..........                                        [ 40%]
tests/test_missing_components.py .........                                   [ 40%]
tests/test_missing_coverage_components.py ......EEEE..FFF..                  [ 42%]
tests/test_models_fixed.py ...                                               [ 42%]
tests/test_paginator.py ......                                               [ 42%]
tests/test_parsers_complete.py sss.sss.ssss                                  [ 43%]
tests/test_repository_fixed.py ..                                            [ 43%]
tests/test_salary_fixed.py ...........                                       [ 44%]
tests/test_salary_utils.py ......................                            [ 46%]
tests/test_search_utils.py ............................                      [ 48%]
tests/test_search_utils_complete.py .................FF.FFFFFFF............. [ 51%]
......                                                                       [ 52%]
tests/test_services_consolidated.py ....                                     [ 52%]
tests/test_services_storage_consolidated.py ..........                       [ 53%]
tests/test_simple_db_adapter.py ........F                                    [ 54%]
tests/test_sj_api.py ..............                                          [ 55%]
tests/test_sj_api_complete.py .............F....                             [ 56%]
tests/test_sj_api_config.py .....                                            [ 56%]
tests/test_sj_parser.py ........                                             [ 57%]
tests/test_sj_parser_complete.py ssssssssssssss                              [ 58%]
tests/test_source_manager.py .................                               [ 60%]
tests/test_source_selector.py .................                              [ 61%]
tests/test_storage_abstractions.py ssssssss                                  [ 61%]
tests/test_storage_complete.py .............                                 [ 62%]
tests/test_storage_factory.py ........                                       [ 63%]
tests/test_storage_modules_consolidated.py .F..                              [ 63%]
tests/test_target_companies.py .....                                         [ 64%]
tests/test_typed_data_processor.py ................                          [ 65%]
tests/test_ui_components_extended.py .F................                      [ 66%]
tests/test_ui_config.py .......................                              [ 68%]
tests/test_ui_helpers_comprehensive.py ..................................... [ 71%]
..                                                                           [ 71%]
tests/test_ui_helpers_extended.py ........................................   [ 74%]
tests/test_ui_modules_consolidated.py .....                                  [ 75%]
tests/test_ui_navigation.py ......................                           [ 77%]
tests/test_ui_navigation_complete.py ..s..                                   [ 77%]
tests/test_ui_navigation_comprehensive.py ......                             [ 77%]
tests/test_ui_navigation_extended.py .......FF..........................     [ 80%]
tests/test_unified_api.py ................F...F.                             [ 82%]
tests/test_unified_api_complete.py ......F......................             [ 84%]
tests/test_unified_api_fixed.py ...                                          [ 84%]
tests/test_user_interface.py ...............                                 [ 86%]
tests/test_user_interface_consolidated.py F.F                                [ 86%]
tests/test_user_interface_fixed.py ...                                       [ 86%]
tests/test_utils_consolidated.py .....                                       [ 86%]
tests/test_utils_ui_consolidated.py ......                                   [ 87%]
tests/test_vacancy_abstractions.py .................                         [ 88%]
tests/test_vacancy_display_handler.py F..................                    [ 90%]
tests/test_vacancy_formatter.py ........                                     [ 90%]
tests/test_vacancy_models_complete.py F...                                   [ 91%]
tests/test_vacancy_models_consolidated.py ..F.                               [ 91%]
tests/test_vacancy_operations.py ......                                      [ 91%]
tests/test_vacancy_operations_coordinator.py ...........................     [ 93%]
tests/test_vacancy_operations_coordinator_complete.py F..................... [ 95%]
                                                                             [ 95%]
tests/test_vacancy_processing_coordinator.py .............                   [ 96%]
tests/test_vacancy_repository.py F........                                   [ 97%]
tests/test_vacancy_stats.py ............                                     [ 98%]
tests/test_vacancy_stats_fixed.py .........                                  [ 99%]
tests/test_vacancy_validator.py ............                                 [100%]

====================================== ERRORS ======================================
_ ERROR at setup of TestVacancyRepositoryFixed.test_repository_init_with_dependencies _

self = <tests.test_missing_coverage_components.TestVacancyRepositoryFixed object at 0x7f1dd8fcb050>

    @pytest.fixture
    def mock_db_connection(self):
        """Фикстура мок подключения к БД"""
        connection = Mock()
        cursor = Mock()
        cursor.fetchall.return_value = []
        cursor.fetchone.return_value = None
>       connection.cursor.return_value.__enter__.return_value = cursor
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_missing_coverage_components.py:161: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Mock name='mock.cursor()' id='139766165938384'>, name = '__enter__'

    def __getattr__(self, name):
        if name in {'_mock_methods', '_mock_unsafe'}:
            raise AttributeError(name)
        elif self._mock_methods is not None:
            if name not in self._mock_methods or name in _all_magics:
                raise AttributeError("Mock object has no attribute %r" % name)
        elif _is_magic(name):
>           raise AttributeError(name)
E           AttributeError: __enter__

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:655: AttributeError
__________ ERROR at setup of TestVacancyRepositoryFixed.test_save_vacancy __________

self = <tests.test_missing_coverage_components.TestVacancyRepositoryFixed object at 0x7f1dd8fcb410>

    @pytest.fixture
    def mock_db_connection(self):
        """Фикстура мок подключения к БД"""
        connection = Mock()
        cursor = Mock()
        cursor.fetchall.return_value = []
        cursor.fetchone.return_value = None
>       connection.cursor.return_value.__enter__.return_value = cursor
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_missing_coverage_components.py:161: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Mock name='mock.cursor()' id='139766156035088'>, name = '__enter__'

    def __getattr__(self, name):
        if name in {'_mock_methods', '_mock_unsafe'}:
            raise AttributeError(name)
        elif self._mock_methods is not None:
            if name not in self._mock_methods or name in _all_magics:
                raise AttributeError("Mock object has no attribute %r" % name)
        elif _is_magic(name):
>           raise AttributeError(name)
E           AttributeError: __enter__

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:655: AttributeError
_______ ERROR at setup of TestVacancyRepositoryFixed.test_get_all_vacancies ________

self = <tests.test_missing_coverage_components.TestVacancyRepositoryFixed object at 0x7f1dd8fcb8d0>

    @pytest.fixture
    def mock_db_connection(self):
        """Фикстура мок подключения к БД"""
        connection = Mock()
        cursor = Mock()
        cursor.fetchall.return_value = []
        cursor.fetchone.return_value = None
>       connection.cursor.return_value.__enter__.return_value = cursor
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_missing_coverage_components.py:161: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Mock name='mock.cursor()' id='139766156682832'>, name = '__enter__'

    def __getattr__(self, name):
        if name in {'_mock_methods', '_mock_unsafe'}:
            raise AttributeError(name)
        elif self._mock_methods is not None:
            if name not in self._mock_methods or name in _all_magics:
                raise AttributeError("Mock object has no attribute %r" % name)
        elif _is_magic(name):
>           raise AttributeError(name)
E           AttributeError: __enter__

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:655: AttributeError
________ ERROR at setup of TestVacancyRepositoryFixed.test_find_by_keyword _________

self = <tests.test_missing_coverage_components.TestVacancyRepositoryFixed object at 0x7f1dd8fcbf90>

    @pytest.fixture
    def mock_db_connection(self):
        """Фикстура мок подключения к БД"""
        connection = Mock()
        cursor = Mock()
        cursor.fetchall.return_value = []
        cursor.fetchone.return_value = None
>       connection.cursor.return_value.__enter__.return_value = cursor
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_missing_coverage_components.py:161: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Mock name='mock.cursor()' id='139766165876176'>, name = '__enter__'

    def __getattr__(self, name):
        if name in {'_mock_methods', '_mock_unsafe'}:
            raise AttributeError(name)
        elif self._mock_methods is not None:
            if name not in self._mock_methods or name in _all_magics:
                raise AttributeError("Mock object has no attribute %r" % name)
        elif _is_magic(name):
>           raise AttributeError(name)
E           AttributeError: __enter__

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:655: AttributeError
===================================== FAILURES =====================================
____________ TestAbstractDataFilter.test_concrete_implementation_works _____________

self = <tests.test_abstract_filter_complete.TestAbstractDataFilter object at 0x7f1dd958dad0>

    def test_concrete_implementation_works(self):
        """Тест что конкретная реализация работает"""
        if not ABSTRACT_FILTER_AVAILABLE:
            pytest.skip("AbstractDataFilter not available")
    
>       filter_obj = ConcreteDataFilter()
                     ^^^^^^^^^^^^^^^^^^^^
E       TypeError: Can't instantiate abstract class ConcreteDataFilter with abstract methods filter_by_company, filter_by_experience, filter_by_location

tests/test_abstract_filter_complete.py:57: TypeError
__________________ TestAbstractDataFilter.test_filter_empty_data ___________________

self = <tests.test_abstract_filter_complete.TestAbstractDataFilter object at 0x7f1dd958e0d0>

    def test_filter_empty_data(self):
        """Тест фильтрации пустых данных"""
        if not ABSTRACT_FILTER_AVAILABLE:
            pytest.skip("AbstractDataFilter not available")
    
>       filter_obj = ConcreteDataFilter()
                     ^^^^^^^^^^^^^^^^^^^^
E       TypeError: Can't instantiate abstract class ConcreteDataFilter with abstract methods filter_by_company, filter_by_experience, filter_by_location

tests/test_abstract_filter_complete.py:76: TypeError
___________________ TestAbstractDataFilter.test_filter_none_data ___________________

self = <tests.test_abstract_filter_complete.TestAbstractDataFilter object at 0x7f1dd958e710>

    def test_filter_none_data(self):
        """Тест фильтрации None данных"""
        if not ABSTRACT_FILTER_AVAILABLE:
            pytest.skip("AbstractDataFilter not available")
    
>       filter_obj = ConcreteDataFilter()
                     ^^^^^^^^^^^^^^^^^^^^
E       TypeError: Can't instantiate abstract class ConcreteDataFilter with abstract methods filter_by_company, filter_by_experience, filter_by_location

tests/test_abstract_filter_complete.py:85: TypeError
_____________ TestAbstractDataFilter.test_filter_no_salary_constraints _____________

self = <tests.test_abstract_filter_complete.TestAbstractDataFilter object at 0x7f1dd958ed10>

    def test_filter_no_salary_constraints(self):
        """Тест фильтрации без ограничений по зарплате"""
        if not ABSTRACT_FILTER_AVAILABLE:
            pytest.skip("AbstractDataFilter not available")
    
>       filter_obj = ConcreteDataFilter()
                     ^^^^^^^^^^^^^^^^^^^^
E       TypeError: Can't instantiate abstract class ConcreteDataFilter with abstract methods filter_by_company, filter_by_experience, filter_by_location

tests/test_abstract_filter_complete.py:94: TypeError
_____________ TestAbstractDataFilter.test_filter_items_without_salary ______________

self = <tests.test_abstract_filter_complete.TestAbstractDataFilter object at 0x7f1dd958f350>

    def test_filter_items_without_salary(self):
        """Тест фильтрации элементов без зарплаты"""
        if not ABSTRACT_FILTER_AVAILABLE:
            pytest.skip("AbstractDataFilter not available")
    
>       filter_obj = ConcreteDataFilter()
                     ^^^^^^^^^^^^^^^^^^^^
E       TypeError: Can't instantiate abstract class ConcreteDataFilter with abstract methods filter_by_company, filter_by_experience, filter_by_location

tests/test_abstract_filter_complete.py:108: TypeError
_______________ TestAbstractDataFilter.test_filter_with_edge_values ________________

self = <tests.test_abstract_filter_complete.TestAbstractDataFilter object at 0x7f1dd958fa10>

    def test_filter_with_edge_values(self):
        """Тест фильтрации с граничными значениями"""
        if not ABSTRACT_FILTER_AVAILABLE:
            pytest.skip("AbstractDataFilter not available")
    
>       filter_obj = ConcreteDataFilter()
                     ^^^^^^^^^^^^^^^^^^^^
E       TypeError: Can't instantiate abstract class ConcreteDataFilter with abstract methods filter_by_company, filter_by_experience, filter_by_location

tests/test_abstract_filter_complete.py:122: TypeError
___________ TestAbstractFilterIntegration.test_multiple_filters_chaining ___________

self = <tests.test_abstract_filter_complete.TestAbstractFilterIntegration object at 0x7f1dd9590310>

    def test_multiple_filters_chaining(self):
        """Тест цепочки фильтров"""
        if not ABSTRACT_FILTER_AVAILABLE:
            pytest.skip("AbstractDataFilter not available")
    
>       filter_instance = ConcreteDataFilter()
                          ^^^^^^^^^^^^^^^^^^^^
E       TypeError: Can't instantiate abstract class ConcreteDataFilter with abstract methods filter_by_company, filter_by_experience, filter_by_location

tests/test_abstract_filter_complete.py:143: TypeError
__________________ TestAbstractFilterIntegration.test_edge_cases ___________________

self = <tests.test_abstract_filter_complete.TestAbstractFilterIntegration object at 0x7f1dd9590990>

    def test_edge_cases(self):
        """Тест граничных случаев"""
        if not ABSTRACT_FILTER_AVAILABLE:
            pytest.skip("AbstractDataFilter not available")
    
>       filter_instance = ConcreteDataFilter()
                          ^^^^^^^^^^^^^^^^^^^^
E       TypeError: Can't instantiate abstract class ConcreteDataFilter with abstract methods filter_by_company, filter_by_experience, filter_by_location

tests/test_abstract_filter_complete.py:164: TypeError
______________ TestAPIFixes.test_unified_api_target_companies_filter _______________

self = <tests.test_api_fixes.TestAPIFixes object at 0x7f1dd9256e50>

    def test_unified_api_target_companies_filter(self):
        """Тест фильтрации по целевым компаниям"""
        if not UNIFIED_API_AVAILABLE:
            pytest.skip("UnifiedAPI not available")
    
        api = UnifiedAPI()
    
        # Создаем правильную структуру данных для фильтрации
        with patch('src.config.target_companies.TargetCompanies') as mock_target:
            instance = Mock()
            instance.get_hh_ids.return_value = ["company1"]
            instance.get_sj_ids.return_value = ["company2"]
            mock_target.return_value = instance
    
            test_vacancies = [
                {"id": "1", "employer": {"id": "company1"}, "source": "hh"}
            ]
    
            if hasattr(api, '_filter_by_target_companies'):
                # Мокаем создание объекта TargetCompanies в методе
>               with patch.object(api, '_get_target_companies', return_value=instance):

tests/test_api_fixes.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1446: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f1dd8ac2350>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <src.api_modules.unified_api.UnifiedAPI object at 0x7f1dd8c1b450> does not have the attribute '_get_target_companies'

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1419: AttributeError
-------------------------------- Captured log call ---------------------------------
WARNING  src.api_modules.sj_api:sj_api.py:55 Используется тестовый API ключ SuperJob.                 Для полной функциональности добавьте реальный ключ                 в переменную окружения SUPERJOB_API_KEY
__________________ TestBaseFormatter.test_format_item_with_index ___________________

self = <tests.test_base_formatter.TestBaseFormatter object at 0x7f1dd92bbdd0>
formatter = <tests.test_base_formatter.TestBaseFormatter.formatter.<locals>.ConcreteFormatter object at 0x7f1dd81d24d0>

    def test_format_item_with_index(self, formatter):
        """Тест форматирования элемента с индексом"""
        if not BASE_FORMATTER_AVAILABLE:
            # Mocking the method if BaseFormatter is not available
            formatter.format_item.return_value = "1. test"
>       result = formatter.format_item("test", 1)
                 ^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: 'ConcreteFormatter' object has no attribute 'format_item'

tests/test_base_formatter.py:139: AttributeError
_________________ TestBaseFormatter.test_format_item_without_index _________________

self = <tests.test_base_formatter.TestBaseFormatter object at 0x7f1dd92c0510>
formatter = <tests.test_base_formatter.TestBaseFormatter.formatter.<locals>.ConcreteFormatter object at 0x7f1dd81a7f90>

    def test_format_item_without_index(self, formatter):
        """Тест форматирования элемента без индекса"""
        if not BASE_FORMATTER_AVAILABLE:
            # Mocking the method if BaseFormatter is not available
            formatter.format_item.return_value = "test"
>       result = formatter.format_item("test")
                 ^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: 'ConcreteFormatter' object has no attribute 'format_item'

tests/test_base_formatter.py:147: AttributeError
__________________ TestBaseFormatter.test_format_item_none_index ___________________

self = <tests.test_base_formatter.TestBaseFormatter object at 0x7f1dd92c0c10>
formatter = <tests.test_base_formatter.TestBaseFormatter.formatter.<locals>.ConcreteFormatter object at 0x7f1dd81d8b90>

    def test_format_item_none_index(self, formatter):
        """Тест форматирования элемента с None индексом"""
        if not BASE_FORMATTER_AVAILABLE:
            # Mocking the method if BaseFormatter is not available
            formatter.format_item.return_value = "test"
>       result = formatter.format_item("test", None)
                 ^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: 'ConcreteFormatter' object has no attribute 'format_item'

tests/test_base_formatter.py:155: AttributeError
_____________________ TestBaseFormatter.test_format_list_basic _____________________

self = <tests.test_base_formatter.TestBaseFormatter object at 0x7f1dd92c1310>
formatter = <tests.test_base_formatter.TestBaseFormatter.formatter.<locals>.ConcreteFormatter object at 0x7f1dd81d4d90>

    def test_format_list_basic(self, formatter):
        """Тест базового форматирования списка"""
        items = ["item1", "item2", "item3"]
        if not BASE_FORMATTER_AVAILABLE:
            # Mocking the method if BaseFormatter is not available
            formatted_items = [f"{i+1}. {item}" for i, item in enumerate(items)]
            formatter.format_list.return_value = formatted_items
>       result = formatter.format_list(items)
                 ^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: 'ConcreteFormatter' object has no attribute 'format_list'

tests/test_base_formatter.py:165: AttributeError
______________ TestBaseFormatter.test_format_list_custom_start_index _______________

self = <tests.test_base_formatter.TestBaseFormatter object at 0x7f1dd92c1a10>
formatter = <tests.test_base_formatter.TestBaseFormatter.formatter.<locals>.ConcreteFormatter object at 0x7f1dd81e2150>

    def test_format_list_custom_start_index(self, formatter):
        """Тест форматирования списка с кастомным начальным индексом"""
        items = ["item1", "item2"]
        if not BASE_FORMATTER_AVAILABLE:
            # Mocking the method if BaseFormatter is not available
            formatted_items = [f"{i+5}. {item}" for i, item in enumerate(items, start=5)]
            formatter.format_list.return_value = formatted_items
>       result = formatter.format_list(items, start_index=5)
                 ^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: 'ConcreteFormatter' object has no attribute 'format_list'

tests/test_base_formatter.py:176: AttributeError
_____________________ TestBaseFormatter.test_format_list_empty _____________________

self = <tests.test_base_formatter.TestBaseFormatter object at 0x7f1dd92c20d0>
formatter = <tests.test_base_formatter.TestBaseFormatter.formatter.<locals>.ConcreteFormatter object at 0x7f1dd81cbb90>

    def test_format_list_empty(self, formatter):
        """Тест форматирования пустого списка"""
        if not BASE_FORMATTER_AVAILABLE:
            # Mocking the method if BaseFormatter is not available
            formatter.format_list.return_value = []
>       result = formatter.format_list([])
                 ^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: 'ConcreteFormatter' object has no attribute 'format_list'

tests/test_base_formatter.py:185: AttributeError
__________________ TestBaseFormatter.test_format_table_row_basic ___________________

self = <tests.test_base_formatter.TestBaseFormatter object at 0x7f1dd92bb310>
formatter = <tests.test_base_formatter.TestBaseFormatter.formatter.<locals>.ConcreteFormatter object at 0x7f1dd81b2610>

    def test_format_table_row_basic(self, formatter):
        """Тест форматирования строки таблицы"""
        data = {"name": "Test", "age": 25, "city": "Moscow"}
        columns = ["name", "age", "city"]
        if not BASE_FORMATTER_AVAILABLE:
            # Mocking the method if BaseFormatter is not available
            values = [str(data.get(col, "")) for col in columns]
            formatter.format_table_row.return_value = " | ".join(values)
>       result = formatter.format_table_row(data, columns)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: 'ConcreteFormatter' object has no attribute 'format_table_row'

tests/test_base_formatter.py:196: AttributeError
______________ TestBaseFormatter.test_format_table_row_missing_column ______________

self = <tests.test_base_formatter.TestBaseFormatter object at 0x7f1dd92b5c90>
formatter = <tests.test_base_formatter.TestBaseFormatter.formatter.<locals>.ConcreteFormatter object at 0x7f1dd81eeb50>

    def test_format_table_row_missing_column(self, formatter):
        """Тест форматирования строки таблицы с отсутствующей колонкой"""
        data = {"name": "Test", "age": 25}
        columns = ["name", "age", "city"]
        if not BASE_FORMATTER_AVAILABLE:
            # Mocking the method if BaseFormatter is not available
            values = [str(data.get(col, "")) for col in columns]
            formatter.format_table_row.return_value = " | ".join(values)
>       result = formatter.format_table_row(data, columns)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: 'ConcreteFormatter' object has no attribute 'format_table_row'

tests/test_base_formatter.py:207: AttributeError
______________ TestBaseFormatter.test_format_table_row_empty_columns _______________

self = <tests.test_base_formatter.TestBaseFormatter object at 0x7f1dd92c25d0>
formatter = <tests.test_base_formatter.TestBaseFormatter.formatter.<locals>.ConcreteFormatter object at 0x7f1dd81d81d0>

    def test_format_table_row_empty_columns(self, formatter):
        """Тест форматирования строки таблицы с пустыми колонками"""
        data = {"name": "Test"}
        columns = []
        if not BASE_FORMATTER_AVAILABLE:
            # Mocking the method if BaseFormatter is not available
            formatter.format_table_row.return_value = ""
>       result = formatter.format_table_row(data, columns)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: 'ConcreteFormatter' object has no attribute 'format_table_row'

tests/test_base_formatter.py:217: AttributeError
________________ TestBaseFormatter.test_format_item_complex_object _________________

self = <tests.test_base_formatter.TestBaseFormatter object at 0x7f1dd92c2950>
formatter = <tests.test_base_formatter.TestBaseFormatter.formatter.<locals>.ConcreteFormatter object at 0x7f1dd81d17d0>

    def test_format_item_complex_object(self, formatter):
        """Тест форматирования сложного объекта"""
        obj = {"key": "value", "nested": {"inner": "data"}}
        if not BASE_FORMATTER_AVAILABLE:
            # Mocking the method if BaseFormatter is not available
            formatter.format_item.return_value = "1. " + str(obj)
>       result = formatter.format_item(obj, 1)
                 ^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: 'ConcreteFormatter' object has no attribute 'format_item'

tests/test_base_formatter.py:226: AttributeError
_______________ TestCachedAPIComplete.test_get_vacancies_from_cache ________________

args = (<tests.test_cached_api_complete.TestCachedAPIComplete object at 0x7f1dd91500d0>,)
keywargs = {'cached_api': <tests.test_cached_api_complete.ConcreteCachedAPI object at 0x7f1dd8aaaa50>}

    @wraps(func)
    def patched(*args, **keywargs):
>       with self.decoration_helper(patched,
                                    args,
                                    keywargs) as (newargs, newkeywargs):

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1375: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
           ^^^^^^^^^^^^^^
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1357: in decoration_helper
    arg = exit_stack.enter_context(patching)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/contextlib.py:517: in enter_context
    result = _enter(cm)
             ^^^^^^^^^^
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1446: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f1dd913cc50>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <class 'tests.test_cached_api_complete.ConcreteCachedAPI'> does not have the attribute '_load_from_cache'

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1419: AttributeError
________________ TestCachedAPIComplete.test_get_vacancies_from_api _________________

args = (<tests.test_cached_api_complete.TestCachedAPIComplete object at 0x7f1dd91507d0>,)
keywargs = {'cached_api': <tests.test_cached_api_complete.ConcreteCachedAPI object at 0x7f1dd8a9a490>}

    @wraps(func)
    def patched(*args, **keywargs):
>       with self.decoration_helper(patched,
                                    args,
                                    keywargs) as (newargs, newkeywargs):

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1375: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
           ^^^^^^^^^^^^^^
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1357: in decoration_helper
    arg = exit_stack.enter_context(patching)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/contextlib.py:517: in enter_context
    result = _enter(cm)
             ^^^^^^^^^^
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1446: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f1dd913ce50>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <class 'tests.test_cached_api_complete.ConcreteCachedAPI'> does not have the attribute '_save_to_cache'

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1419: AttributeError
________________ TestCachedAPIComplete.test_get_vacancies_api_error ________________

args = (<tests.test_cached_api_complete.TestCachedAPIComplete object at 0x7f1dd9150b50>,)
keywargs = {'cached_api': <tests.test_cached_api_complete.ConcreteCachedAPI object at 0x7f1dd96a0b90>}

    @wraps(func)
    def patched(*args, **keywargs):
>       with self.decoration_helper(patched,
                                    args,
                                    keywargs) as (newargs, newkeywargs):

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1375: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
           ^^^^^^^^^^^^^^
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1357: in decoration_helper
    arg = exit_stack.enter_context(patching)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/contextlib.py:517: in enter_context
    result = _enter(cm)
             ^^^^^^^^^^
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1446: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f1dd913d050>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <class 'tests.test_cached_api_complete.ConcreteCachedAPI'> does not have the attribute '_load_from_cache'

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1419: AttributeError
_______________ TestMainApplicationInterface.test_interface_creation _______________

self = <tests.test_interfaces.TestMainApplicationInterface object at 0x7f1dd8f54350>
mock_dependencies = {'api': <Mock id='139766156419280'>, 'storage': <Mock id='139766156422800'>, 'ui': <Mock id='139766156419728'>}

    def test_interface_creation(self, mock_dependencies):
        """Тест создания интерфейса"""
        if not INTERFACES_AVAILABLE:
            pytest.skip("Interfaces not available")
    
        try:
>           interface = MainApplicationInterface(**mock_dependencies)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E           TypeError: Can't instantiate abstract class MainApplicationInterface with abstract method run_application

tests/test_interfaces.py:38: TypeError

During handling of the above exception, another exception occurred:

self = <tests.test_interfaces.TestMainApplicationInterface object at 0x7f1dd8f54350>
mock_dependencies = {'api': <Mock id='139766156419280'>, 'storage': <Mock id='139766156422800'>, 'ui': <Mock id='139766156419728'>}

    def test_interface_creation(self, mock_dependencies):
        """Тест создания интерфейса"""
        if not INTERFACES_AVAILABLE:
            pytest.skip("Interfaces not available")
    
        try:
            interface = MainApplicationInterface(**mock_dependencies)
            assert interface is not None
        except TypeError:
            # Если требуются другие аргументы
>           interface = MainApplicationInterface()
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^
E           TypeError: Can't instantiate abstract class MainApplicationInterface with abstract method run_application

tests/test_interfaces.py:42: TypeError
________ TestMainApplicationInterface.test_main_application_interface_init _________

self = <tests.test_main_application_interface.TestMainApplicationInterface object at 0x7f1dd8f55750>

    def test_main_application_interface_init(self):
        """Тест инициализации главного интерфейса приложения"""
        if not INTERFACE_AVAILABLE:
            pytest.skip("MainApplicationInterface not available")
    
        # Создаем конкретную реализацию абстрактного класса
        class ConcreteMainApplication(MainApplicationInterface):
            def run_application(self):
                pass
    
>       interface = ConcreteMainApplication()
                    ^^^^^^^^^^^^^^^^^^^^^^^^^
E       TypeError: MainApplicationInterface.__init__() missing 3 required positional arguments: 'provider', 'processor', and 'storage'

tests/test_main_application_interface.py:33: TypeError
_ TestMainApplicationInterface.test_main_application_interface_concrete_implementation _

self = <tests.test_main_application_interface.TestMainApplicationInterface object at 0x7f1dd8f56350>

    def test_main_application_interface_concrete_implementation(self):
        """Тест конкретной реализации"""
        if not INTERFACE_AVAILABLE:
            pytest.skip("MainApplicationInterface not available")
    
        class TestApplication(MainApplicationInterface):
            def run_application(self):
                return "Application started"
    
>       app = TestApplication()
              ^^^^^^^^^^^^^^^^^
E       TypeError: MainApplicationInterface.__init__() missing 3 required positional arguments: 'provider', 'processor', and 'storage'

tests/test_main_application_interface.py:53: TypeError
_________ TestMainApplicationInterfaceComplete.test_init_with_dependencies _________

self = <tests.test_main_application_interface_complete.TestMainApplicationInterfaceComplete object at 0x7f1dd8f59090>
mock_provider = <Mock id='139766156563408'>
mock_processor = <Mock id='139766156573520'>
mock_storage = <Mock id='139766156571728'>

    def test_init_with_dependencies(self, mock_provider, mock_processor, mock_storage):
        """Тест инициализации с зависимостями"""
        app = ConcreteMainApp(mock_provider, mock_processor, mock_storage)
>       assert app.data_provider == mock_provider
               ^^^^^^^^^^^^^^^^^
E       AttributeError: 'ConcreteMainApp' object has no attribute 'data_provider'

tests/test_main_application_interface_complete.py:59: AttributeError
____________ TestMainApplicationInterfaceComplete.test_get_data_sources ____________

self = <tests.test_main_application_interface_complete.TestMainApplicationInterfaceComplete object at 0x7f1dd8f59f50>
app_interface = <tests.test_main_application_interface_complete.ConcreteMainApp object at 0x7f1dd384bf90>

    def test_get_data_sources(self, app_interface):
        """Тест получения источников данных"""
        mock_sources = ["hh", "sj"]
>       app_interface.data_provider.get_available_sources.return_value = mock_sources
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: 'ConcreteMainApp' object has no attribute 'data_provider'

tests/test_main_application_interface_complete.py:78: AttributeError
_________ TestMainApplicationInterfaceComplete.test_get_data_sources_error _________

self = <tests.test_main_application_interface_complete.TestMainApplicationInterfaceComplete object at 0x7f1dd8f5a5d0>
app_interface = <tests.test_main_application_interface_complete.ConcreteMainApp object at 0x7f1dd81d8510>

    def test_get_data_sources_error(self, app_interface):
        """Тест обработки ошибок при получении источников"""
>       app_interface.data_provider.get_available_sources.side_effect = Exception("Provider error")
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: 'ConcreteMainApp' object has no attribute 'data_provider'

tests/test_main_application_interface_complete.py:85: AttributeError
____________ TestMainApplicationInterfaceComplete.test_validate_sources ____________

self = <tests.test_main_application_interface_complete.TestMainApplicationInterfaceComplete object at 0x7f1dd8f5ac50>
app_interface = <tests.test_main_application_interface_complete.ConcreteMainApp object at 0x7f1dd814bed0>

    def test_validate_sources(self, app_interface):
        """Тест валидации источников"""
        sources = ["hh", "sj"]
>       app_interface.data_provider.validate_sources.return_value = sources
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: 'ConcreteMainApp' object has no attribute 'data_provider'

tests/test_main_application_interface_complete.py:93: AttributeError
_________ TestMainApplicationInterfaceComplete.test_validate_sources_error _________

self = <tests.test_main_application_interface_complete.TestMainApplicationInterfaceComplete object at 0x7f1dd8f5b2d0>
app_interface = <tests.test_main_application_interface_complete.ConcreteMainApp object at 0x7f1dd39cba50>

    def test_validate_sources_error(self, app_interface):
        """Тест обработки ошибок валидации источников"""
>       app_interface.data_provider.validate_sources.side_effect = Exception("Validation error")
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: 'ConcreteMainApp' object has no attribute 'data_provider'

tests/test_main_application_interface_complete.py:100: AttributeError
______________ TestMainApplicationInterfaceComplete.test_process_data ______________

self = <tests.test_main_application_interface_complete.TestMainApplicationInterfaceComplete object at 0x7f1dd8f5b950>
app_interface = <tests.test_main_application_interface_complete.ConcreteMainApp object at 0x7f1dd81e35d0>

    def test_process_data(self, app_interface):
        """Тест обработки данных"""
        mock_data = [{"id": "1", "title": "Test Job"}]
        processed_data = [{"id": "1", "title": "Processed Job"}]
    
        app_interface.processor.process.return_value = processed_data
    
>       result = app_interface.process_data(mock_data)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: 'ConcreteMainApp' object has no attribute 'process_data'

tests/test_main_application_interface_complete.py:112: AttributeError
___________ TestMainApplicationInterfaceComplete.test_process_data_empty ___________

self = <tests.test_main_application_interface_complete.TestMainApplicationInterfaceComplete object at 0x7f1dd8f5bfd0>
app_interface = <tests.test_main_application_interface_complete.ConcreteMainApp object at 0x7f1dd3f16b50>

    def test_process_data_empty(self, app_interface):
        """Тест обработки пустых данных"""
>       result = app_interface.process_data([])
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: 'ConcreteMainApp' object has no attribute 'process_data'

tests/test_main_application_interface_complete.py:118: AttributeError
___________ TestMainApplicationInterfaceComplete.test_process_data_none ____________

self = <tests.test_main_application_interface_complete.TestMainApplicationInterfaceComplete object at 0x7f1dd8f64650>
app_interface = <tests.test_main_application_interface_complete.ConcreteMainApp object at 0x7f1dd3943310>

    def test_process_data_none(self, app_interface):
        """Тест обработки None данных"""
>       result = app_interface.process_data(None)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: 'ConcreteMainApp' object has no attribute 'process_data'

tests/test_main_application_interface_complete.py:123: AttributeError
___________ TestMainApplicationInterfaceComplete.test_process_data_error ___________

self = <tests.test_main_application_interface_complete.TestMainApplicationInterfaceComplete object at 0x7f1dd8f64cd0>
app_interface = <tests.test_main_application_interface_complete.ConcreteMainApp object at 0x7f1dd3848c10>

    def test_process_data_error(self, app_interface):
        """Тест обработки ошибок при обработке данных"""
        app_interface.processor.process.side_effect = Exception("Processing error")
    
>       result = app_interface.process_data([{"id": "1"}])
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: 'ConcreteMainApp' object has no attribute 'process_data'

tests/test_main_application_interface_complete.py:130: AttributeError
_______________ TestMainApplicationInterfaceComplete.test_store_data _______________

self = <tests.test_main_application_interface_complete.TestMainApplicationInterfaceComplete object at 0x7f1dd8f65350>
app_interface = <tests.test_main_application_interface_complete.ConcreteMainApp object at 0x7f1dd81af850>

    def test_store_data(self, app_interface):
        """Тест сохранения данных"""
        mock_data = [{"id": "1", "title": "Test Job"}]
        app_interface.storage.save.return_value = True
    
>       result = app_interface.store_data(mock_data)
                 ^^^^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: 'ConcreteMainApp' object has no attribute 'store_data'

tests/test_main_application_interface_complete.py:138: AttributeError
____________ TestMainApplicationInterfaceComplete.test_store_data_empty ____________

self = <tests.test_main_application_interface_complete.TestMainApplicationInterfaceComplete object at 0x7f1dd8f659d0>
app_interface = <tests.test_main_application_interface_complete.ConcreteMainApp object at 0x7f1dd8145690>

    def test_store_data_empty(self, app_interface):
        """Тест сохранения пустых данных"""
>       result = app_interface.store_data([])
                 ^^^^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: 'ConcreteMainApp' object has no attribute 'store_data'

tests/test_main_application_interface_complete.py:144: AttributeError
____________ TestMainApplicationInterfaceComplete.test_store_data_none _____________

self = <tests.test_main_application_interface_complete.TestMainApplicationInterfaceComplete object at 0x7f1dd8f66050>
app_interface = <tests.test_main_application_interface_complete.ConcreteMainApp object at 0x7f1dd3d6b910>

    def test_store_data_none(self, app_interface):
        """Тест сохранения None данных"""
>       result = app_interface.store_data(None)
                 ^^^^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: 'ConcreteMainApp' object has no attribute 'store_data'

tests/test_main_application_interface_complete.py:149: AttributeError
____________ TestMainApplicationInterfaceComplete.test_store_data_error ____________

self = <tests.test_main_application_interface_complete.TestMainApplicationInterfaceComplete object at 0x7f1dd8f666d0>
app_interface = <tests.test_main_application_interface_complete.ConcreteMainApp object at 0x7f1dd81e3290>

    def test_store_data_error(self, app_interface):
        """Тест обработки ошибок при сохранении данных"""
        app_interface.storage.save.side_effect = Exception("Storage error")
    
>       result = app_interface.store_data([{"id": "1"}])
                 ^^^^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: 'ConcreteMainApp' object has no attribute 'store_data'

tests/test_main_application_interface_complete.py:156: AttributeError
______________ TestMainApplicationInterfaceComplete.test_search_data _______________

self = <tests.test_main_application_interface_complete.TestMainApplicationInterfaceComplete object at 0x7f1dd8f66e10>
app_interface = <tests.test_main_application_interface_complete.ConcreteMainApp object at 0x7f1dd8a836d0>

    def test_search_data(self, app_interface):
        """Тест поиска данных"""
        mock_results = [{"id": "1", "title": "Python Job"}]
>       app_interface.data_provider.search.return_value = mock_results
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: 'ConcreteMainApp' object has no attribute 'data_provider'

tests/test_main_application_interface_complete.py:162: AttributeError
_________ TestMainApplicationInterfaceComplete.test_search_data_no_sources _________

self = <tests.test_main_application_interface_complete.TestMainApplicationInterfaceComplete object at 0x7f1dd8f67550>
app_interface = <tests.test_main_application_interface_complete.ConcreteMainApp object at 0x7f1dd8111490>

    def test_search_data_no_sources(self, app_interface):
        """Тест поиска данных без указания источников"""
        mock_results = [{"id": "1", "title": "Python Job"}]
        available_sources = ["hh", "sj"]
    
>       app_interface.data_provider.get_available_sources.return_value = available_sources
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: 'ConcreteMainApp' object has no attribute 'data_provider'

tests/test_main_application_interface_complete.py:173: AttributeError
________ TestMainApplicationInterfaceComplete.test_search_data_empty_query _________

self = <tests.test_main_application_interface_complete.TestMainApplicationInterfaceComplete object at 0x7f1dd8f67c90>
app_interface = <tests.test_main_application_interface_complete.ConcreteMainApp object at 0x7f1dd8aa9dd0>

    def test_search_data_empty_query(self, app_interface):
        """Тест поиска с пустым запросом"""
>       result = app_interface.search_data("")
                 ^^^^^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: 'ConcreteMainApp' object has no attribute 'search_data'

tests/test_main_application_interface_complete.py:182: AttributeError
_________ TestMainApplicationInterfaceComplete.test_search_data_none_query _________

self = <tests.test_main_application_interface_complete.TestMainApplicationInterfaceComplete object at 0x7f1dd8f59d10>
app_interface = <tests.test_main_application_interface_complete.ConcreteMainApp object at 0x7f1dd956afd0>

    def test_search_data_none_query(self, app_interface):
        """Тест поиска с None запросом"""
>       result = app_interface.search_data(None)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: 'ConcreteMainApp' object has no attribute 'search_data'

tests/test_main_application_interface_complete.py:187: AttributeError
___________ TestMainApplicationInterfaceComplete.test_search_data_error ____________

self = <tests.test_main_application_interface_complete.TestMainApplicationInterfaceComplete object at 0x7f1dd8f67750>
app_interface = <tests.test_main_application_interface_complete.ConcreteMainApp object at 0x7f1dd9229c10>

    def test_search_data_error(self, app_interface):
        """Тест обработки ошибок при поиске"""
>       app_interface.data_provider.search.side_effect = Exception("Search error")
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: 'ConcreteMainApp' object has no attribute 'data_provider'

tests/test_main_application_interface_complete.py:192: AttributeError
___________ TestMainApplicationInterfaceComplete.test_get_storage_stats ____________

self = <tests.test_main_application_interface_complete.TestMainApplicationInterfaceComplete object at 0x7f1dd8f661d0>
app_interface = <tests.test_main_application_interface_complete.ConcreteMainApp object at 0x7f1dd9078190>

    def test_get_storage_stats(self, app_interface):
        """Тест получения статистики хранилища"""
        mock_stats = {"total": 100, "sources": {"hh": 60, "sj": 40}}
        app_interface.storage.get_stats.return_value = mock_stats
    
>       result = app_interface.get_storage_stats()
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: 'ConcreteMainApp' object has no attribute 'get_storage_stats'

tests/test_main_application_interface_complete.py:202: AttributeError
________ TestMainApplicationInterfaceComplete.test_get_storage_stats_error _________

self = <tests.test_main_application_interface_complete.TestMainApplicationInterfaceComplete object at 0x7f1dd8f74090>
app_interface = <tests.test_main_application_interface_complete.ConcreteMainApp object at 0x7f1dd8f675d0>

    def test_get_storage_stats_error(self, app_interface):
        """Тест обработки ошибок при получении статистики"""
        app_interface.storage.get_stats.side_effect = Exception("Stats error")
    
>       result = app_interface.get_storage_stats()
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: 'ConcreteMainApp' object has no attribute 'get_storage_stats'

tests/test_main_application_interface_complete.py:210: AttributeError
___________ TestMainApplicationInterfaceComplete.test_clear_storage_data ___________

self = <tests.test_main_application_interface_complete.TestMainApplicationInterfaceComplete object at 0x7f1dd8f74450>
app_interface = <tests.test_main_application_interface_complete.ConcreteMainApp object at 0x7f1dd8ab2250>

    def test_clear_storage_data(self, app_interface):
        """Тест очистки данных хранилища"""
        app_interface.storage.clear.return_value = True
    
>       result = app_interface.clear_storage_data()
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: 'ConcreteMainApp' object has no attribute 'clear_storage_data'

tests/test_main_application_interface_complete.py:217: AttributeError
________ TestMainApplicationInterfaceComplete.test_clear_storage_data_error ________

self = <tests.test_main_application_interface_complete.TestMainApplicationInterfaceComplete object at 0x7f1dd8f74850>
app_interface = <tests.test_main_application_interface_complete.ConcreteMainApp object at 0x7f1dd8ab0190>

    def test_clear_storage_data_error(self, app_interface):
        """Тест обработки ошибок при очистке хранилища"""
        app_interface.storage.clear.side_effect = Exception("Clear error")
    
>       result = app_interface.clear_storage_data()
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: 'ConcreteMainApp' object has no attribute 'clear_storage_data'

tests/test_main_application_interface_complete.py:225: AttributeError
____________ TestMainApplicationInterfaceComplete.test_get_cached_data _____________

self = <tests.test_main_application_interface_complete.TestMainApplicationInterfaceComplete object at 0x7f1dd8f74c10>
app_interface = <tests.test_main_application_interface_complete.ConcreteMainApp object at 0x7f1dd814a550>

    def test_get_cached_data(self, app_interface):
        """Тест получения кэшированных данных"""
        mock_cached_data = [{"id": "1", "title": "Cached Job"}]
>       app_interface.data_provider.get_cached_data.return_value = mock_cached_data
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: 'ConcreteMainApp' object has no attribute 'data_provider'

tests/test_main_application_interface_complete.py:231: AttributeError
_________ TestMainApplicationInterfaceComplete.test_get_cached_data_error __________

self = <tests.test_main_application_interface_complete.TestMainApplicationInterfaceComplete object at 0x7f1dd8f75190>
app_interface = <tests.test_main_application_interface_complete.ConcreteMainApp object at 0x7f1dd38a34d0>

    def test_get_cached_data_error(self, app_interface):
        """Тест обработки ошибок при получении кэшированных данных"""
>       app_interface.data_provider.get_cached_data.side_effect = Exception("Cache error")
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: 'ConcreteMainApp' object has no attribute 'data_provider'

tests/test_main_application_interface_complete.py:239: AttributeError
____________ TestMainApplicationInterfaceComplete.test_clear_cache_data ____________

self = <tests.test_main_application_interface_complete.TestMainApplicationInterfaceComplete object at 0x7f1dd8f75810>
app_interface = <tests.test_main_application_interface_complete.ConcreteMainApp object at 0x7f1dd906b110>

    def test_clear_cache_data(self, app_interface):
        """Тест очистки кэшированных данных"""
        sources = {"hh": True, "sj": False}
>       app_interface.data_provider.clear_cache.return_value = True
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: 'ConcreteMainApp' object has no attribute 'data_provider'

tests/test_main_application_interface_complete.py:247: AttributeError
_________ TestMainApplicationInterfaceComplete.test_clear_cache_data_error _________

self = <tests.test_main_application_interface_complete.TestMainApplicationInterfaceComplete object at 0x7f1dd8f75e90>
app_interface = <tests.test_main_application_interface_complete.ConcreteMainApp object at 0x7f1dd8f599d0>

    def test_clear_cache_data_error(self, app_interface):
        """Тест обработки ошибок при очистке кэша"""
>       app_interface.data_provider.clear_cache.side_effect = Exception("Cache clear error")
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: 'ConcreteMainApp' object has no attribute 'data_provider'

tests/test_main_application_interface_complete.py:255: AttributeError
______________ TestMainApplicationInterfaceComplete.test_export_data _______________

self = <tests.test_main_application_interface_complete.TestMainApplicationInterfaceComplete object at 0x7f1dd8f76510>
app_interface = <tests.test_main_application_interface_complete.ConcreteMainApp object at 0x7f1dd96c4d50>

    def test_export_data(self, app_interface):
        """Тест экспорта данных"""
        mock_data = [{"id": "1", "title": "Export Job"}]
        app_interface.storage.export.return_value = "/path/to/export.json"
    
>       result = app_interface.export_data(mock_data, "json", "/tmp/export.json")
                 ^^^^^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: 'ConcreteMainApp' object has no attribute 'export_data'

tests/test_main_application_interface_complete.py:265: AttributeError
___________ TestMainApplicationInterfaceComplete.test_export_data_empty ____________

self = <tests.test_main_application_interface_complete.TestMainApplicationInterfaceComplete object at 0x7f1dd8f76b90>
app_interface = <tests.test_main_application_interface_complete.ConcreteMainApp object at 0x7f1dd8195550>

    def test_export_data_empty(self, app_interface):
        """Тест экспорта пустых данных"""
>       result = app_interface.export_data([], "json", "/tmp/export.json")
                 ^^^^^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: 'ConcreteMainApp' object has no attribute 'export_data'

tests/test_main_application_interface_complete.py:271: AttributeError
___________ TestMainApplicationInterfaceComplete.test_export_data_error ____________

self = <tests.test_main_application_interface_complete.TestMainApplicationInterfaceComplete object at 0x7f1dd8f77210>
app_interface = <tests.test_main_application_interface_complete.ConcreteMainApp object at 0x7f1dd8a54350>

    def test_export_data_error(self, app_interface):
        """Тест обработки ошибок при экспорте"""
        app_interface.storage.export.side_effect = Exception("Export error")
    
>       result = app_interface.export_data([{"id": "1"}], "json", "/tmp/export.json")
                 ^^^^^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: 'ConcreteMainApp' object has no attribute 'export_data'

tests/test_main_application_interface_complete.py:278: AttributeError
______________ TestMainApplicationInterfaceComplete.test_import_data _______________

self = <tests.test_main_application_interface_complete.TestMainApplicationInterfaceComplete object at 0x7f1dd8f77890>
app_interface = <tests.test_main_application_interface_complete.ConcreteMainApp object at 0x7f1dd8aa91d0>

    def test_import_data(self, app_interface):
        """Тест импорта данных"""
        mock_imported_data = [{"id": "1", "title": "Imported Job"}]
        app_interface.storage.import_data.return_value = mock_imported_data
    
>       result = app_interface.import_data("/path/to/import.json", "json")
                 ^^^^^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: 'ConcreteMainApp' object has no attribute 'import_data'

tests/test_main_application_interface_complete.py:286: AttributeError
___________ TestMainApplicationInterfaceComplete.test_import_data_error ____________

self = <tests.test_main_application_interface_complete.TestMainApplicationInterfaceComplete object at 0x7f1dd8f77f10>
app_interface = <tests.test_main_application_interface_complete.ConcreteMainApp object at 0x7f1dd81e1910>

    def test_import_data_error(self, app_interface):
        """Тест обработки ошибок при импорте"""
        app_interface.storage.import_data.side_effect = Exception("Import error")
    
>       result = app_interface.import_data("/path/to/import.json", "json")
                 ^^^^^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: 'ConcreteMainApp' object has no attribute 'import_data'

tests/test_main_application_interface_complete.py:294: AttributeError
_____________ TestMainApplicationInterfaceComplete.test_setup_logging ______________

self = <tests.test_main_application_interface_complete.TestMainApplicationInterfaceComplete object at 0x7f1dd8f805d0>
app_interface = <tests.test_main_application_interface_complete.ConcreteMainApp object at 0x7f1dd3d3aa50>

    def test_setup_logging(self, app_interface):
        """Тест настройки логирования"""
        with patch('logging.basicConfig') as mock_config:
>           app_interface.setup_logging("DEBUG")
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^
E           AttributeError: 'ConcreteMainApp' object has no attribute 'setup_logging'

tests/test_main_application_interface_complete.py:300: AttributeError
__________ TestMainApplicationInterfaceComplete.test_setup_logging_error ___________

self = <tests.test_main_application_interface_complete.TestMainApplicationInterfaceComplete object at 0x7f1dd8f80c50>
app_interface = <tests.test_main_application_interface_complete.ConcreteMainApp object at 0x7f1dd8aef890>

    def test_setup_logging_error(self, app_interface):
        """Тест обработки ошибок настройки логирования"""
        with patch('logging.basicConfig', side_effect=Exception("Logging error")):
            # Не должно падать
>           app_interface.setup_logging("DEBUG")
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^
E           AttributeError: 'ConcreteMainApp' object has no attribute 'setup_logging'

tests/test_main_application_interface_complete.py:307: AttributeError
_________ TestMainApplicationInterfaceComplete.test_validate_configuration _________

self = <tests.test_main_application_interface_complete.TestMainApplicationInterfaceComplete object at 0x7f1dd8f812d0>
app_interface = <tests.test_main_application_interface_complete.ConcreteMainApp object at 0x7f1dd8c01550>

    def test_validate_configuration(self, app_interface):
        """Тест валидации конфигурации"""
        mock_config = {"api_key": "test", "db_url": "postgres://test"}
    
>       with patch.object(app_interface, '_check_api_keys', return_value=True), \
             patch.object(app_interface, '_check_database_connection', return_value=True):

tests/test_main_application_interface_complete.py:313: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1446: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f1dd3d31d10>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <tests.test_main_application_interface_complete.ConcreteMainApp object at 0x7f1dd8c01550> does not have the attribute '_check_api_keys'

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1419: AttributeError
_____ TestMainApplicationInterfaceComplete.test_validate_configuration_invalid _____

self = <tests.test_main_application_interface_complete.TestMainApplicationInterfaceComplete object at 0x7f1dd8f81a10>
app_interface = <tests.test_main_application_interface_complete.ConcreteMainApp object at 0x7f1dd81192d0>

    def test_validate_configuration_invalid(self, app_interface):
        """Тест валидации некорректной конфигурации"""
        mock_config = {"invalid": "config"}
    
>       with patch.object(app_interface, '_check_api_keys', return_value=False):

tests/test_main_application_interface_complete.py:322: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1446: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f1dd811a710>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <tests.test_main_application_interface_complete.ConcreteMainApp object at 0x7f1dd81192d0> does not have the attribute '_check_api_keys'

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1419: AttributeError
_____________ TestMainApplicationInterfaceComplete.test_check_api_keys _____________

self = <tests.test_main_application_interface_complete.TestMainApplicationInterfaceComplete object at 0x7f1dd8f82150>
app_interface = <tests.test_main_application_interface_complete.ConcreteMainApp object at 0x7f1dd8bf7c90>

    def test_check_api_keys(self, app_interface):
        """Тест проверки API ключей"""
        config = {"hh_api_key": "test_hh", "sj_api_key": "test_sj"}
>       result = app_interface._check_api_keys(config)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: 'ConcreteMainApp' object has no attribute '_check_api_keys'

tests/test_main_application_interface_complete.py:329: AttributeError
_________ TestMainApplicationInterfaceComplete.test_check_api_keys_missing _________

self = <tests.test_main_application_interface_complete.TestMainApplicationInterfaceComplete object at 0x7f1dd8f77cd0>
app_interface = <tests.test_main_application_interface_complete.ConcreteMainApp object at 0x7f1dd81b5450>

    def test_check_api_keys_missing(self, app_interface):
        """Тест проверки отсутствующих API ключей"""
        config = {}
>       result = app_interface._check_api_keys(config)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: 'ConcreteMainApp' object has no attribute '_check_api_keys'

tests/test_main_application_interface_complete.py:335: AttributeError
_______ TestMainApplicationInterfaceComplete.test_check_database_connection ________

self = <tests.test_main_application_interface_complete.TestMainApplicationInterfaceComplete object at 0x7f1dd8f74710>
app_interface = <tests.test_main_application_interface_complete.ConcreteMainApp object at 0x7f1dd814b850>

    def test_check_database_connection(self, app_interface):
        """Тест проверки соединения с БД"""
        config = {"db_url": "postgresql://test"}
    
        with patch.object(app_interface.storage, 'test_connection', return_value=True):
>           result = app_interface._check_database_connection(config)
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E           AttributeError: 'ConcreteMainApp' object has no attribute '_check_database_connection'

tests/test_main_application_interface_complete.py:343: AttributeError
_____ TestMainApplicationInterfaceComplete.test_check_database_connection_fail _____

self = <tests.test_main_application_interface_complete.TestMainApplicationInterfaceComplete object at 0x7f1dd8f82710>
app_interface = <tests.test_main_application_interface_complete.ConcreteMainApp object at 0x7f1dd8131d50>

    def test_check_database_connection_fail(self, app_interface):
        """Тест неудачной проверки соединения с БД"""
        config = {"db_url": "postgresql://invalid"}
    
        with patch.object(app_interface.storage, 'test_connection', return_value=False):
>           result = app_interface._check_database_connection(config)
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E           AttributeError: 'ConcreteMainApp' object has no attribute '_check_database_connection'

tests/test_main_application_interface_complete.py:351: AttributeError
____________ TestMainApplicationInterfaceIntegration.test_full_workflow ____________

self = <tests.test_main_application_interface_complete.TestMainApplicationInterfaceIntegration object at 0x7f1dd8f80e50>

    def test_full_workflow(self):
        """Тест полного рабочего процесса"""
        mock_provider = Mock()
        mock_processor = Mock()
        mock_storage = Mock()
    
        # Настройка моков
        mock_provider.search.return_value = [{"id": "1", "title": "Test Job"}]
        mock_processor.process.return_value = [{"id": "1", "title": "Processed Job"}]
        mock_storage.save.return_value = True
    
        app = ConcreteMainApp(mock_provider, mock_processor, mock_storage)
    
        # Выполняем полный цикл
>       search_results = app.search_data("python")
                         ^^^^^^^^^^^^^^^
E       AttributeError: 'ConcreteMainApp' object has no attribute 'search_data'

tests/test_main_application_interface_complete.py:373: AttributeError
___________ TestMainApplicationInterfaceIntegration.test_error_recovery ____________

self = <tests.test_main_application_interface_complete.TestMainApplicationInterfaceIntegration object at 0x7f1dd8f82990>

    def test_error_recovery(self):
        """Тест восстановления после ошибок"""
        mock_provider = Mock()
        mock_processor = Mock()
        mock_storage = Mock()
    
        # Настройка ошибок
        mock_provider.search.side_effect = Exception("Search error")
    
        app = ConcreteMainApp(mock_provider, mock_processor, mock_storage)
    
        # Приложение должно справляться с ошибками
>       search_results = app.search_data("python")
                         ^^^^^^^^^^^^^^^
E       AttributeError: 'ConcreteMainApp' object has no attribute 'search_data'

tests/test_main_application_interface_complete.py:393: AttributeError
________ TestLowCoverageComponents.test_cached_api_concrete_implementation _________

self = <tests.test_missing_coverage_components.TestLowCoverageComponents object at 0x7f1dd8fcd7d0>

    def test_cached_api_concrete_implementation(self):
        """Тест конкретной реализации кэшированного API"""
        try:
            from src.api_modules.cached_api import CachedAPI
    
            class ConcreteCachedAPI(CachedAPI):
                def _get_empty_response(self):
                    return []
    
                def _validate_vacancy(self, vacancy):
                    return bool(vacancy.get('id'))
    
                def get_vacancies(self, query, **kwargs):
                    return [{"id": "1", "title": "Test"}]
    
                def get_vacancies_page(self, query, page=0, per_page=20, **kwargs):
                    return {"items": [], "found": 0}
    
            base_api = Mock()
            with patch('src.utils.cache.FileCache'):
>               api = ConcreteCachedAPI(base_api)
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_missing_coverage_components.py:293: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/api_modules/cached_api.py:41: in __init__
    self.cache_dir = Path(cache_dir)
                     ^^^^^^^^^^^^^^^
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/pathlib.py:871: in __new__
    self = cls._from_parts(args)
           ^^^^^^^^^^^^^^^^^^^^^
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/pathlib.py:509: in _from_parts
    drv, root, parts = self._parse_args(args)
                       ^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'pathlib.PosixPath'>, args = (<Mock id='139766081042064'>,)

    @classmethod
    def _parse_args(cls, args):
        # This is useful when you don't want to create an instance, just
        # canonicalize some constructor arguments.
        parts = []
        for a in args:
            if isinstance(a, PurePath):
                parts += a._parts
            else:
>               a = os.fspath(a)
                    ^^^^^^^^^^^^
E               TypeError: expected str, bytes or os.PathLike object, not Mock

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/pathlib.py:493: TypeError
______ TestLowCoverageComponents.test_base_formatter_concrete_implementation _______

self = <tests.test_missing_coverage_components.TestLowCoverageComponents object at 0x7f1dd8fcddd0>

    def test_base_formatter_concrete_implementation(self):
        """Тест конкретной реализации базового форматтера"""
        try:
            from src.utils.base_formatter import BaseFormatter
    
            class ConcreteFormatter(BaseFormatter):
                def clean_html_tags(self, text):
                    return str(text)
    
                def format_company_name(self, company):
                    return str(company)
    
                def format_currency(self, currency):
                    return str(currency)
    
                def format_date(self, date):
                    return str(date)
    
                def format_employment_type(self, employment):
                    return str(employment)
    
                def format_experience(self, experience):
                    return str(experience)
    
                def format_number(self, number):
                    return str(number)
    
                def format_salary(self, salary):
                    return str(salary)
    
                def format_schedule(self, schedule):
                    return str(schedule)
    
                def format_text(self, text):
                    return str(text)
    
                def format_vacancy_info(self, vacancy):
                    return str(vacancy)
    
            formatter = ConcreteFormatter()
            assert formatter is not None
>           result = formatter.format("test")
                     ^^^^^^^^^^^^^^^^
E           AttributeError: 'ConcreteFormatter' object has no attribute 'format'

tests/test_missing_coverage_components.py:340: AttributeError
_______________ TestLowCoverageComponents.test_api_methods_coverage ________________

self = <tests.test_missing_coverage_components.TestLowCoverageComponents object at 0x7f1dd8fce450>
mock_get = <MagicMock name='get' id='139766087081808'>

    @patch('requests.get')
    def test_api_methods_coverage(self, mock_get):
        """Тест покрытия методов API"""
        try:
            from src.api_modules.hh_api import HeadHunterAPI
            from src.api_modules.sj_api import SuperJobAPI
    
            # Тестируем HeadHunter API
            mock_response = Mock()
            mock_response.status_code = 200
            mock_response.json.return_value = {"items": [], "found": 0}
            mock_get.return_value = mock_response
    
            hh_api = HeadHunterAPI()
            if hasattr(hh_api, 'get_vacancies_page'):
                result = hh_api.get_vacancies_page("Python")
>               assert isinstance(result, dict)
E               assert False
E                +  where False = isinstance([], dict)

tests/test_missing_coverage_components.py:362: AssertionError
_______ TestSearchUtilsComplete.test_filter_vacancies_by_keyword_title_match _______

self = <tests.test_search_utils_complete.TestSearchUtilsComplete object at 0x7f1dd8e63bd0>

    def test_filter_vacancies_by_keyword_title_match(self):
        """Тест фильтрации по совпадению в заголовке"""
        vacancies = [
            MockVacancy(title="Python Developer"),
            MockVacancy(title="Java Developer")
        ]
    
        result = filter_vacancies_by_keyword(vacancies, "Python")
>       assert len(result) == 1
E       assert 2 == 1
E        +  where 2 = len([<tests.test_search_utils_complete.MockVacancy object at 0x7f1dd81a6510>, <tests.test_search_utils_complete.MockVacancy object at 0x7f1dd81a4f10>])

tests/test_search_utils_complete.py:199: AssertionError
________ TestSearchUtilsComplete.test_filter_vacancies_by_keyword_id_match _________

self = <tests.test_search_utils_complete.TestSearchUtilsComplete object at 0x7f1dd8e68210>

    def test_filter_vacancies_by_keyword_id_match(self):
        """Тест фильтрации по совпадению в ID"""
        vacancies = [
            MockVacancy(vacancy_id="python123"),
            MockVacancy(vacancy_id="java456")
        ]
    
        result = filter_vacancies_by_keyword(vacancies, "python")
>       assert len(result) == 1
E       assert 2 == 1
E        +  where 2 = len([<tests.test_search_utils_complete.MockVacancy object at 0x7f1dd81e2490>, <tests.test_search_utils_complete.MockVacancy object at 0x7f1dd81e39d0>])

tests/test_search_utils_complete.py:210: AssertionError
_ TestSearchUtilsComplete.test_filter_vacancies_by_keyword_responsibilities_match __

self = <tests.test_search_utils_complete.TestSearchUtilsComplete object at 0x7f1dd8e68e10>

    def test_filter_vacancies_by_keyword_responsibilities_match(self):
        """Тест фильтрации по совпадению в обязанностях"""
        vacancies = [
            MockVacancy(responsibilities="Develop Python applications"),
            MockVacancy(responsibilities="Develop Java applications")
        ]
    
        result = filter_vacancies_by_keyword(vacancies, "Python")
>       assert len(result) == 1
E       assert 2 == 1
E        +  where 2 = len([<tests.test_search_utils_complete.MockVacancy object at 0x7f1dd819d4d0>, <tests.test_search_utils_complete.MockVacancy object at 0x7f1dd819c6d0>])

tests/test_search_utils_complete.py:231: AssertionError
____ TestSearchUtilsComplete.test_filter_vacancies_by_keyword_description_match ____

self = <tests.test_search_utils_complete.TestSearchUtilsComplete object at 0x7f1dd8e69410>

    def test_filter_vacancies_by_keyword_description_match(self):
        """Тест фильтрации по совпадению в описании"""
        vacancies = [
            MockVacancy(description="Backend Python development"),
            MockVacancy(description="Frontend React development")
        ]
    
        result = filter_vacancies_by_keyword(vacancies, "Python")
>       assert len(result) == 1
E       assert 2 == 1
E        +  where 2 = len([<tests.test_search_utils_complete.MockVacancy object at 0x7f1dd8ab8090>, <tests.test_search_utils_complete.MockVacancy object at 0x7f1dd8ab8b10>])

tests/test_search_utils_complete.py:241: AssertionError
_ TestSearchUtilsComplete.test_filter_vacancies_by_keyword_detailed_description_match _

self = <tests.test_search_utils_complete.TestSearchUtilsComplete object at 0x7f1dd8e69a10>

    def test_filter_vacancies_by_keyword_detailed_description_match(self):
        """Тест фильтрации по совпадению в детальном описании"""
        vacancies = [
            MockVacancy(detailed_description="Detailed Python job description"),
            MockVacancy(detailed_description="Detailed Java job description")
        ]
    
        result = filter_vacancies_by_keyword(vacancies, "Python")
>       assert len(result) == 1
E       assert 2 == 1
E        +  where 2 = len([<tests.test_search_utils_complete.MockVacancy object at 0x7f1dd96c5050>, <tests.test_search_utils_complete.MockVacancy object at 0x7f1dd96c6610>])

tests/test_search_utils_complete.py:251: AssertionError
______ TestSearchUtilsComplete.test_filter_vacancies_by_keyword_skills_match _______

self = <tests.test_search_utils_complete.TestSearchUtilsComplete object at 0x7f1dd8e6a050>

    def test_filter_vacancies_by_keyword_skills_match(self):
        """Тест фильтрации по совпадению в навыках"""
        vacancies = [
            MockVacancy(skills=[{"name": "Python"}, {"name": "Django"}]),
            MockVacancy(skills=["Java", "Spring"])
        ]
    
        result = filter_vacancies_by_keyword(vacancies, "Python")
>       assert len(result) == 1
E       assert 2 == 1
E        +  where 2 = len([<tests.test_search_utils_complete.MockVacancy object at 0x7f1dd96c4dd0>, <tests.test_search_utils_complete.MockVacancy object at 0x7f1ddb01c490>])

tests/test_search_utils_complete.py:261: AssertionError
_____ TestSearchUtilsComplete.test_filter_vacancies_by_keyword_employer_match ______

self = <tests.test_search_utils_complete.TestSearchUtilsComplete object at 0x7f1dd8e63fd0>

    def test_filter_vacancies_by_keyword_employer_match(self):
        """Тест фильтрации по совпадению в работодателе"""
        vacancies = [
            MockVacancy(employer={"name": "Python Solutions"}),
            MockVacancy(employer={"name": "Java Corp"})
        ]
    
        result = filter_vacancies_by_keyword(vacancies, "Python")
>       assert len(result) == 1
E       assert 2 == 1
E        +  where 2 = len([<tests.test_search_utils_complete.MockVacancy object at 0x7f1dd8a919d0>, <tests.test_search_utils_complete.MockVacancy object at 0x7f1dd8a91790>])

tests/test_search_utils_complete.py:271: AssertionError
____ TestSearchUtilsComplete.test_filter_vacancies_by_keyword_profession_match _____

self = <tests.test_search_utils_complete.TestSearchUtilsComplete object at 0x7f1dd8e62790>

    def test_filter_vacancies_by_keyword_profession_match(self):
        """Тест фильтрации по совпадению в профессии (SuperJob)"""
        vacancies = [
            MockVacancy(profession="Python Developer"),
            MockVacancy(profession="Java Developer")
        ]
    
        result = filter_vacancies_by_keyword(vacancies, "Python")
>       assert len(result) == 1
E       assert 2 == 1
E        +  where 2 = len([<tests.test_search_utils_complete.MockVacancy object at 0x7f1dd3f8c590>, <tests.test_search_utils_complete.MockVacancy object at 0x7f1dd3f8dc90>])

tests/test_search_utils_complete.py:281: AssertionError
____ TestSearchUtilsComplete.test_filter_vacancies_by_keyword_relevance_sorting ____

self = <tests.test_search_utils_complete.TestSearchUtilsComplete object at 0x7f1dd8e60190>

    def test_filter_vacancies_by_keyword_relevance_sorting(self):
        """Тест сортировки по релевантности"""
        vacancies = [
            MockVacancy(title="Developer", description="Some text"),  # 3 балла
            MockVacancy(title="Python Developer", description="Python programming"),  # 13 баллов
            MockVacancy(title="Senior Python Developer", requirements="Python, Django")  # 15 баллов
        ]
    
        result = filter_vacancies_by_keyword(vacancies, "Python")
    
        # Проверяем что результаты отсортированы по релевантности
        assert len(result) == 3
>       assert "Senior Python Developer" in result[0].title
E       AssertionError: assert 'Senior Python Developer' in 'Python Developer'
E        +  where 'Python Developer' = <tests.test_search_utils_complete.MockVacancy object at 0x7f1dd3f8c650>.title

tests/test_search_utils_complete.py:295: AssertionError
_____________________ TestSimpleDBAdapter.test_error_handling ______________________

self = <tests.test_simple_db_adapter.TestSimpleDBAdapter object at 0x7f1dd8eae750>
mock_connection = <Mock id='139766156332880'>

    def test_error_handling(self, mock_connection):
        """Тест обработки ошибок"""
        if not SIMPLE_DB_ADAPTER_AVAILABLE:
            pytest.skip("SimpleDBAdapter not available")
    
        mock_connection.cursor.side_effect = Exception("Database error")
    
        with patch('psycopg2.connect', return_value=mock_connection):
>           with pytest.raises(Exception):
E           Failed: DID NOT RAISE <class 'Exception'>

tests/test_simple_db_adapter.py:109: Failed
________________ TestSuperJobAPIComplete.test_deduplicate_vacancies ________________

self = <tests.test_sj_api_complete.TestSuperJobAPIComplete object at 0x7f1dd8ee6bd0>
sj_api = <src.api_modules.sj_api.SuperJobAPI object at 0x7f1dd3d556d0>

    def test_deduplicate_vacancies(self, sj_api):
        """Тест дедупликации вакансий"""
        mock_vacancies = [
            {"id": "1", "profession": "Test 1"},
            {"id": "2", "profession": "Test 2"}
        ]
    
>       with patch('src.api_modules.cached_api.CachedAPI._deduplicate_vacancies', return_value=mock_vacancies):

tests/test_sj_api_complete.py:187: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1446: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f1dd81ed110>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <class 'src.api_modules.cached_api.CachedAPI'> does not have the attribute '_deduplicate_vacancies'

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1419: AttributeError
______________ TestStorageModulesConsolidated.test_vacancy_repository ______________

self = <tests.test_storage_modules_consolidated.TestStorageModulesConsolidated object at 0x7f1dd8d83950>
mock_connect = <MagicMock name='connect' id='139766081760592'>
storage_mocks = <tests.test_storage_modules_consolidated.ConsolidatedStorageMocks object at 0x7f1dd3ae3450>

    @patch('psycopg2.connect')
    def test_vacancy_repository(self, mock_connect, storage_mocks):
        """Тестирование репозитория вакансий"""
        mock_connect.return_value = storage_mocks.connection
    
        try:
            from src.storage.components.vacancy_repository import VacancyRepository
            from src.vacancies.models import Vacancy
    
>           repo = VacancyRepository()
                   ^^^^^^^^^^^^^^^^^^^
E           TypeError: VacancyRepository.__init__() missing 2 required positional arguments: 'db_connection' and 'validator'

tests/test_storage_modules_consolidated.py:80: TypeError
____________ TestMenuManagerExtended.test_menu_manager_get_user_choice _____________

self = <tests.test_ui_components_extended.TestMenuManagerExtended object at 0x7f1dd8dc4c10>
mock_input = <MagicMock name='input' id='139766079744464'>

    @patch('builtins.input', return_value='1')
    def test_menu_manager_get_user_choice(self, mock_input):
        """Тестирование получения пользовательского выбора"""
        if not SRC_AVAILABLE:
            pytest.skip("Source code not available")
    
        if hasattr(self.menu_manager, 'get_user_choice'):
            choice = self.menu_manager.get_user_choice()
            assert choice == '1' or choice == 1
        else:
>           assert mock_input.called
E           AssertionError: assert False
E            +  where False = <MagicMock name='input' id='139766079744464'>.called

tests/test_ui_components_extended.py:62: AssertionError
__________ TestUINavigationExtended.test_paginate_display_custom_actions ___________

self = <Mock id='139766087506576'>

    def assert_called_once(self):
        """assert that the mock was called only once.
        """
        if not self.call_count == 1:
            msg = ("Expected '%s' to have been called once. Called %s times.%s"
                   % (self._mock_name or 'mock',
                      self.call_count,
                      self._calls_repr()))
>           raise AssertionError(msg)
E           AssertionError: Expected 'mock' to have been called once. Called 0 times.

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:918: AssertionError

During handling of the above exception, another exception occurred:

self = <tests.test_ui_navigation_extended.TestUINavigationExtended object at 0x7f1dd8cac110>
mock_print = <MagicMock name='print' id='139766087506256'>
mock_input = <MagicMock name='input' id='139766086731600'>

    @patch('builtins.input')
    @patch('builtins.print')
    def test_paginate_display_custom_actions(self, mock_print, mock_input):
        """Тестирование кастомных действий"""
        mock_action = Mock()
        mock_action.__doc__ = "Кастомное действие"
    
        custom_actions = {"c": mock_action}
        mock_input.side_effect = ["c", "q"]
    
        def formatter(item, number):
            return f"{number}: {item}"
    
        self.navigator.paginate_display(
            self.test_items[:5],
            formatter,
            "Custom Actions",
            custom_actions=custom_actions
        )
    
>       mock_action.assert_called_once()
E       AssertionError: Expected 'mock' to have been called once. Called 0 times.

tests/test_ui_navigation_extended.py:136: AssertionError
________ TestUINavigationExtended.test_paginate_display_custom_action_error ________

self = <tests.test_ui_navigation_extended.TestUINavigationExtended object at 0x7f1dd8cac790>
mock_print = <MagicMock name='print' id='139766087512464'>
mock_input = <MagicMock name='input' id='139766087512208'>

    @patch('builtins.input')
    @patch('builtins.print')
    def test_paginate_display_custom_action_error(self, mock_print, mock_input):
        """Тестирование ошибки в кастомном действии"""
        def error_action():
            raise ValueError("Test error")
    
        custom_actions = {"e": error_action}
        mock_input.side_effect = ["e", "q"]
    
        def formatter(item, number):
            return f"{number}: {item}"
    
        self.navigator.paginate_display(
            self.test_items[:5],
            formatter,
            "Error Test",
            custom_actions=custom_actions
        )
    
        calls = [call.args[0] for call in mock_print.call_args_list]
        output = " ".join(calls)
>       assert "Ошибка при выполнении действия" in output
E       AssertionError: assert 'Ошибка при выполнении действия' in '\n\nError Test ========== 1: Item 0 2: Item 1 3: Item 2 4: Item 3 5: Item 4 \n==================== Навигация: Страница 1 из 1 Показано элементов: 1-5 из 5 --------------------'

tests/test_ui_navigation_extended.py:160: AssertionError
__________________ TestUnifiedAPI.test_filter_by_target_companies __________________

self = <tests.test_unified_api.TestUnifiedAPI object at 0x7f1dd8ccefd0>
unified_api = <src.api_modules.unified_api.UnifiedAPI object at 0x7f1dd8150690>

    def test_filter_by_target_companies(self, unified_api):
        """Тест фильтрации по целевым компаниям"""
        # Мокаем TargetCompanies
        with patch('src.config.target_companies.TargetCompanies') as mock_target_companies:
            mock_target_companies.get_hh_ids.return_value = ["company1", "company2"]
            mock_target_companies.get_sj_ids.return_value = ["company3"]
    
            # Тестовые вакансии
            test_vacancies = [
                {"id": "1", "employer": {"id": "company1"}, "source": "hh"},
                {"id": "2", "employer": {"id": "company2"}, "source": "hh"},
                {"id": "3", "employer": {"id": "company3"}, "source": "sj"},
                {"id": "4", "employer": {"id": "unknown"}, "source": "hh"},
            ]
    
            result = unified_api._filter_by_target_companies(test_vacancies)
    
            # Должны остаться только вакансии от целевых компаний
>           assert len(result) == 3
E           assert 0 == 3
E            +  where 0 = len([])

tests/test_unified_api.py:282: AssertionError
___________ TestUnifiedAPI.test_filter_by_target_companies_mixed_sources ___________

self = <tests.test_unified_api.TestUnifiedAPI object at 0x7f1dd8ccfe90>
unified_api = <src.api_modules.unified_api.UnifiedAPI object at 0x7f1dd383d390>

    def test_filter_by_target_companies_mixed_sources(self, unified_api):
        """Тест фильтрации вакансий из разных источников"""
        with patch('src.config.target_companies.TargetCompanies') as mock_target_companies:
            mock_target_companies.get_hh_ids.return_value = ["hh_company1", "hh_company2"]
            mock_target_companies.get_sj_ids.return_value = ["sj_company1"]
    
            # Вакансии из разных источников
            test_vacancies = [
                {"id": "1", "employer": {"id": "hh_company1"}, "source": "hh"},
                {"id": "2", "employer": {"id": "hh_company2"}, "source": "hh"},
                {"id": "3", "employer": {"id": "sj_company1"}, "source": "sj"},
                {"id": "4", "employer": {"id": "other_company"}, "source": "hh"},
            ]
    
            result = unified_api._filter_by_target_companies(test_vacancies)
    
            # Должны остаться вакансии от целевых компаний обоих источников
>           assert len(result) == 3
E           assert 0 == 3
E            +  where 0 = len([])

tests/test_unified_api.py:348: AssertionError
______________ TestUnifiedAPIComplete.test_filter_by_target_companies ______________

self = <tests.test_unified_api_complete.TestUnifiedAPIComplete object at 0x7f1dd8ce4890>
unified_api = <src.api_modules.unified_api.UnifiedAPI object at 0x7f1dd3fc2f10>

    def test_filter_by_target_companies(self, unified_api):
        """Тест фильтрации по целевым компаниям"""
        mock_vacancies = [
            {
                "id": "1",
                "employer": {"id": "123"},
                "source": "hh"
            },
            {
                "id": "2",
                "employer": {"id": "999"},  # не в целевых
                "source": "hh"
            },
            {
                "id": "3",
                "id_client": "456",  # SJ формат
                "source": "sj"
            }
        ]
    
        mock_companies = [
            Mock(hh_id=123, sj_id=None),
            Mock(hh_id=None, sj_id=456)
        ]
    
>       with patch('src.api_modules.unified_api.TargetCompanies.get_all_companies', return_value=mock_companies):

tests/test_unified_api_complete.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1430: in __enter__
    self.target = self.getter()
                  ^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'src.api_modules.unified_api.TargetCompanies'

    def resolve_name(name):
        """
        Resolve a name to an object.
    
        It is expected that `name` will be a string in one of the following
        formats, where W is shorthand for a valid Python identifier and dot stands
        for a literal period in these pseudo-regexes:
    
        W(.W)*
        W(.W)*:(W(.W)*)?
    
        The first form is intended for backward compatibility only. It assumes that
        some part of the dotted name is a package, and the rest is an object
        somewhere within that package, possibly nested inside other objects.
        Because the place where the package stops and the object hierarchy starts
        can't be inferred by inspection, repeated attempts to import must be done
        with this form.
    
        In the second form, the caller makes the division point clear through the
        provision of a single colon: the dotted name to the left of the colon is a
        package to be imported, and the dotted name to the right is the object
        hierarchy within that package. Only one import is needed in this form. If
        it ends with the colon, then a module object is returned.
    
        The function will return an object (which might be a module), or raise one
        of the following exceptions:
    
        ValueError - if `name` isn't in a recognised format
        ImportError - if an import failed when it shouldn't have
        AttributeError - if a failure occurred when traversing the object hierarchy
                         within the imported package to get to the desired object.
        """
        global _NAME_PATTERN
        if _NAME_PATTERN is None:
            # Lazy import to speedup Python startup time
            import re
            dotted_words = r'(?!\d)(\w+)(\.(?!\d)(\w+))*'
            _NAME_PATTERN = re.compile(f'^(?P<pkg>{dotted_words})'
                                       f'(?P<cln>:(?P<obj>{dotted_words})?)?$',
                                       re.UNICODE)
    
        m = _NAME_PATTERN.match(name)
        if not m:
            raise ValueError(f'invalid format: {name!r}')
        gd = m.groupdict()
        if gd.get('cln'):
            # there is a colon - a one-step import is all that's needed
            mod = importlib.import_module(gd['pkg'])
            parts = gd.get('obj')
            parts = parts.split('.') if parts else []
        else:
            # no colon - have to iterate to find the package boundary
            parts = name.split('.')
            modname = parts.pop(0)
            # first part *must* be a module/package.
            mod = importlib.import_module(modname)
            while parts:
                p = parts[0]
                s = f'{modname}.{p}'
                try:
                    mod = importlib.import_module(s)
                    parts.pop(0)
                    modname = s
                except ImportError:
                    break
        # if we reach this point, mod is the module, already imported, and
        # parts is the list of parts in the object hierarchy to be traversed, or
        # an empty list if just the module is wanted.
        result = mod
        for p in parts:
>           result = getattr(result, p)
                     ^^^^^^^^^^^^^^^^^^
E           AttributeError: module 'src.api_modules.unified_api' has no attribute 'TargetCompanies'

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/pkgutil.py:715: AttributeError
____________ TestUserInterfaceConsolidated.test_main_interface_complete ____________

args = (<tests.test_user_interface_consolidated.TestUserInterfaceConsolidated object at 0x7f1dd8cf9810>,)
keywargs = {}

    @wraps(func)
    def patched(*args, **keywargs):
>       with self.decoration_helper(patched,
                                    args,
                                    keywargs) as (newargs, newkeywargs):

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1375: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
           ^^^^^^^^^^^^^^
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1357: in decoration_helper
    arg = exit_stack.enter_context(patching)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/contextlib.py:517: in enter_context
    result = _enter(cm)
             ^^^^^^^^^^
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1446: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f1dd8b0e510>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'src.user_interface' from '/home/runner/workspace/tests/../src/user_interface.py'> does not have the attribute 'DBManager'

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1419: AttributeError
_______ TestUserInterfaceConsolidated.test_interface_components_integration ________

self = <tests.test_user_interface_consolidated.TestUserInterfaceConsolidated object at 0x7f1dd8b0d450>

    def test_interface_components_integration(self):
        """Тестирование интеграции компонентов интерфейса"""
        try:
            from src.interfaces.main_application_interface import MainApplicationInterface
    
            # Создаем конкретную реализацию абстрактного класса
            class ConcreteMainApplication(MainApplicationInterface):
                def run_application(self):
                    pass
    
>           interface = ConcreteMainApplication()
                        ^^^^^^^^^^^^^^^^^^^^^^^^^
E           TypeError: MainApplicationInterface.__init__() missing 3 required positional arguments: 'provider', 'processor', and 'storage'

tests/test_user_interface_consolidated.py:96: TypeError
___________ TestVacancyDisplayHandler.test_vacancy_display_handler_init ____________

self = <tests.test_vacancy_display_handler.TestVacancyDisplayHandler object at 0x7f1dd8b4aa50>

    def test_vacancy_display_handler_init(self):
        """Тест инициализации обработчика отображения вакансий"""
>       handler = VacancyDisplayHandler()
                  ^^^^^^^^^^^^^^^^^^^^^^^
E       TypeError: VacancyDisplayHandler.__init__() missing 1 required positional argument: 'storage'

tests/test_vacancy_display_handler.py:43: TypeError
________________ TestVacancyModelsComplete.test_base_vacancy_model _________________

self = <tests.test_vacancy_models_complete.TestVacancyModelsComplete object at 0x7f1dd8b72010>

    def test_base_vacancy_model(self):
        """Тест базовой модели вакансии"""
        employer = Employer("Test Company", "123")
        vacancy = Vacancy("Python Developer", "https://test.com", employer)
    
        assert vacancy.title == "Python Developer"
        assert vacancy.url == "https://test.com"
>       assert vacancy.employer is not None
E       assert None is not None
E        +  where None = <src.vacancies.models.Vacancy object at 0x7f1dd3edfa00>.employer

tests/test_vacancy_models_complete.py:27: AssertionError
____________ TestVacancyModelsConsolidated.test_employer_model_complete ____________

self = <tests.test_vacancy_models_consolidated.TestVacancyModelsConsolidated object at 0x7f1dd8b732d0>

    def test_employer_model_complete(self):
        """Полное тестирование модели работодателя"""
        try:
            from src.vacancies.models import Employer
    
            # Используем правильный конструктор
            employer = Employer("Тест Компания", "emp_123")
            assert employer is not None
    
            if hasattr(employer, 'get_name'):
                name = employer.get_name()
>               assert name == employer_data['name']
                               ^^^^^^^^^^^^^
E               NameError: name 'employer_data' is not defined

tests/test_vacancy_models_consolidated.py:115: NameError
__________ TestVacancyOperationsCoordinatorComplete.test_coordinator_init __________

self = <tests.test_vacancy_operations_coordinator_complete.TestVacancyOperationsCoordinatorComplete object at 0x7f1dd8bb8610>

    def test_coordinator_init(self):
        """Тест инициализации координатора операций с вакансиями"""
>       coordinator = VacancyOperationsCoordinator()
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       TypeError: VacancyOperationsCoordinator.__init__() missing 2 required positional arguments: 'unified_api' and 'storage'

tests/test_vacancy_operations_coordinator_complete.py:50: TypeError
____________________ TestVacancyRepository.test_repository_init ____________________

self = <tests.test_vacancy_repository.TestVacancyRepository object at 0x7f1dd8be80d0>

    def test_repository_init(self):
        """Тест инициализации репозитория"""
        assert self.repository is not None
        # Проверяем, что репозиторий имеет необходимые атрибуты
        assert hasattr(self.repository, 'db_connection') or hasattr(self.repository, '_db_connection')
>       assert self.repository.validator == self.mock_validator
               ^^^^^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: 'VacancyRepository' object has no attribute 'validator'

tests/test_vacancy_repository.py:37: AttributeError
================================== tests coverage ==================================
_________________ coverage: platform linux, python 3.11.13-final-0 _________________

Name                                                     Stmts   Miss  Cover   Missing
--------------------------------------------------------------------------------------
src/__init__.py                                              0      0   100%
src/api_modules/__init__.py                                  0      0   100%
src/api_modules/base_api.py                                 23      0   100%
src/api_modules/cached_api.py                              168     85    49%   80-87, 113-115, 132-133, 144-147, 152-157, 163-168, 177-187, 203, 215-238, 247, 267-269, 288-310, 322-342
src/api_modules/get_api.py                                  53     19    64%   46-54, 64, 73-74, 102-103, 116-118, 124, 126-132, 134, 136
src/api_modules/hh_api.py                                  142     25    82%   77-85, 169, 178-180, 219-221, 233, 256, 276, 289, 293-295, 329-331
src/api_modules/sj_api.py                                  128     28    78%   99-106, 206-210, 222, 263-264, 277-279, 291-292, 296-308
src/api_modules/unified_api.py                             270     77    71%   124, 133, 154-155, 175-176, 212-213, 221-240, 245, 291-293, 304-306, 316-322, 390-391, 401-418, 422-432, 436-458
src/config/__init__.py                                       0      0   100%
src/config/api_config.py                                    13      0   100%
src/config/app_config.py                                    17      0   100%
src/config/db_config.py                                     61     27    56%   24, 44-48, 85-88, 96-99, 104, 107, 115, 133-136, 156-172
src/config/hh_api_config.py                                 21      2    90%   31, 37
src/config/sj_api_config.py                                 49     18    63%   39, 59, 62, 68-75, 79-87
src/config/target_companies.py                              61     25    59%   119, 124-130, 135-138, 143-146, 151, 156-162, 167, 185, 190
src/config/ui_config.py                                     27      8    70%   36-42, 54-58, 79
src/interfaces/__init__.py                                   0      0   100%
src/interfaces/main_application_interface.py               121     88    27%   76, 89-98, 109-136, 140-152, 156-161, 166-180, 184-214, 224-225, 230, 234-236
src/storage/__init__.py                                      6      0   100%
src/storage/abstract.py                                     14      0   100%
src/storage/abstract_db_manager.py                          21      6    71%   16, 26, 36, 46, 59, 69
src/storage/components/__init__.py                           0      0   100%
src/storage/components/database_connection.py               53     15    72%   14-16, 19-20, 72-78, 88-89, 97-98
src/storage/components/vacancy_repository.py               113     97    14%   49-98, 110-156, 165-178, 190-209, 221-291
src/storage/components/vacancy_validator.py                 65     39    40%   61-67, 73-74, 78-79, 90-103, 108-122, 138-152
src/storage/db_manager.py                                  348    224    36%   17-24, 63, 83-139, 223-228, 246-247, 262-272, 282-338, 348-361, 376-405, 419-451, 519-522, 525-528, 533-535, 574-576, 590-651, 665, 671-728, 741-813, 818-820, 832, 844-845, 857-859, 871-877, 892-1022
src/storage/interfaces/typed_data_processor.py              46     25    46%   32, 45, 64, 78, 94, 100, 106-117, 124, 130-133, 139-148
src/storage/postgres_saver.py                              790    557    29%   10-13, 72-74, 109-111, 124-125, 133-140, 145-146, 148-151, 176-183, 188-194, 199-200, 202-205, 263-265, 280-281, 295-305, 310-317, 322-323, 325-328, 338, 342-343, 346, 374-380, 389-390, 399-400, 404-409, 417-419, 427-428, 442-445, 452, 455-458, 473, 480, 487, 594-598, 603-606, 627-634, 655, 662-664, 678, 690-692, 704-708, 721-779, 783-895, 918-958, 961, 968-970, 974-992, 996-1020, 1024-1048, 1055, 1067-1098, 1102-1113, 1125-1180, 1184-1196, 1208-1251, 1264-1303, 1323-1574, 1587-1601, 1611, 1614, 1617-1635
src/storage/services/__init__.py                             4      0   100%
src/storage/services/abstract_filter_service.py             30      7    77%   34, 44, 64, 88, 101, 114, 127
src/storage/services/abstract_storage_service.py            25      6    76%   34, 47, 60, 73, 83, 93
src/storage/services/company_id_filter_service.py           94     62    34%   49, 62, 68-76, 85-135, 141-202, 206-214, 223
src/storage/services/deduplication_service.py               64     43    33%   15-16, 20-21, 43, 56-129, 133-142, 146-154, 183, 192
src/storage/services/filtering_service.py                  105     66    37%   15-16, 20-21, 25-26, 48, 76-88, 95-132, 143-155, 159-170, 189-199, 228, 237
src/storage/services/sql_deduplication_service.py           64     49    23%   44-64, 68-111, 116-148, 152-160, 173-182
src/storage/services/sql_filter_service.py                  89     63    29%   47, 59-78, 82-146, 152-191, 195-202, 207-209, 218-247
src/storage/services/vacancy_processing_coordinator.py      44      0   100%
src/storage/services/vacancy_storage_service.py            334    245    27%   15-16, 20-21, 25-26, 31-32, 37-38, 42-43, 47-48, 52-53, 57-58, 93-94, 119-146, 150-170, 176-194, 211-215, 220-222, 226-238, 244-320, 334, 338-339, 360-362, 366-395, 402-404, 417-469, 499, 511-535, 539-590, 594-601, 606, 610, 614, 618
src/storage/simple_db_adapter.py                           142    116    18%   21, 25, 29, 33, 37-43, 50-51, 54, 57, 61-101, 105-117, 121, 125-165, 169-202, 206-210, 219
src/storage/storage_factory.py                              13      0   100%
src/ui_interfaces/__init__.py                                0      0   100%
src/ui_interfaces/console_interface.py                     394    306    22%   23-25, 69, 82, 84, 86, 88, 90, 92, 94, 97, 100, 102-110, 116-127, 157, 161, 165, 169, 173-224, 228-301, 305, 309, 319-355, 359, 370-371, 382-385, 395-544, 548-579, 584-604
src/ui_interfaces/source_selector.py                        44     30    32%   25-51, 64, 74-79
src/ui_interfaces/vacancy_display_handler.py                72     58    19%   32-70, 74-107, 111-141
src/ui_interfaces/vacancy_operations_coordinator.py        194    105    46%   68-79, 100, 102, 104, 108, 116-122, 126-165, 169-192, 196-198, 211, 248-273, 302-322
src/ui_interfaces/vacancy_search_handler.py                152    127    16%   38-76, 90-114, 124, 135-170, 180-197, 209-232, 248-262, 272-308
src/user_interface.py                                       55     47    15%   26-94, 98
src/utils/__init__.py                                        0      0   100%
src/utils/abstract_filter.py                                26     14    46%   30, 47, 61, 75, 88-102
src/utils/api_data_filter.py                               154     88    43%   9-10, 25, 55-56, 71-83, 97, 105-106, 122, 130-131, 148-160, 173-185, 191-196, 206, 212, 215, 217, 223-241, 245, 256, 269, 275-284, 288-307
src/utils/base_formatter.py                                 38     11    71%   14, 19, 24, 29, 34, 39, 44, 49, 54, 59, 64
src/utils/cache.py                                         135     49    64%   45-46, 61-62, 78, 93-94, 98-100, 115-117, 124-126, 130-139, 165, 169-170, 174-176, 199-210, 221-224, 227, 236-238, 244
src/utils/data_normalizers.py                               75     13    83%   77-80, 107, 113-121, 154-162
src/utils/db_manager_demo.py                               236    218     8%   32, 38-64, 73-81, 85-103, 107-155, 159-211, 215-224, 228-272, 276-315, 319-370, 377-382, 