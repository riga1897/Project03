~/workspace$ pytest --cov=src --cov-report=term-missing
============================= test session starts =============================
platform linux -- Python 3.11.13, pytest-8.4.2, pluggy-1.6.0
rootdir: /home/runner/workspace
configfile: pyproject.toml
plugins: cov-6.2.1, mock-3.15.0
collected 180 items                                                           

tests/test_abstractions_100_coverage.py .....F.F.F...F...FF.            [ 11%]
tests/test_abstractions_complete_coverage.py .....................      [ 22%]
tests/test_complete_coverage_all_modules.py .............               [ 30%]
tests/test_concrete_models_100_coverage.py ...............FFFFFF......F [ 45%]
F..FF.......FFFFFFFFFFFFF..FF..FFFFFFFF                                 [ 67%]
tests/test_concrete_models_fixed.py ............FFFFFFFFFFFFFFF........ [ 86%]
.................FFF..F.                                                [100%]

================================== FAILURES ===================================
_______ TestAbstractExperience.test_concrete_implementation_all_methods _______

self = <test_abstractions_100_coverage.TestAbstractExperience object at 0x7f116f942890>

    def test_concrete_implementation_all_methods(self):
        """Тест конкретной реализации всех методов"""
        class ConcreteExperience(AbstractExperience):
            def get_name(self):
                return "От 1 года до 3 лет"
    
            def get_id(self):
                return "between1And3"
    
            def to_dict(self):
                return {"id": "between1And3", "name": "От 1 года до 3 лет"}
    
            @classmethod
            def from_dict(cls, data):
                return cls()
    
>       experience = ConcreteExperience()
                     ^^^^^^^^^^^^^^^^^^^^
E       TypeError: Can't instantiate abstract class ConcreteExperience with abstract method from_string

tests/test_abstractions_100_coverage.py:118: TypeError
_______ TestAbstractEmployment.test_concrete_implementation_all_methods _______

self = <test_abstractions_100_coverage.TestAbstractEmployment object at 0x7f116f943750>

    def test_concrete_implementation_all_methods(self):
        """Тест конкретной реализации всех методов"""
        class ConcreteEmployment(AbstractEmployment):
            def get_name(self):
                return "Полная занятость"
    
            def get_id(self):
                return "full"
    
            def to_dict(self):
                return {"id": "full", "name": "Полная занятость"}
    
            @classmethod
            def from_dict(cls, data):
                return cls()
    
>       employment = ConcreteEmployment()
                     ^^^^^^^^^^^^^^^^^^^^
E       TypeError: Can't instantiate abstract class ConcreteEmployment with abstract method from_string

tests/test_abstractions_100_coverage.py:151: TypeError
_________ TestAbstractSalary.test_concrete_implementation_all_methods _________

self = <test_abstractions_100_coverage.TestAbstractSalary object at 0x7f116f958610>

    def test_concrete_implementation_all_methods(self):
        """Тест конкретной реализации всех методов"""
        class ConcreteSalary(AbstractSalary):
            def get_from(self):
                return 100000
    
            def get_to(self):
                return 150000
    
            def get_currency(self):
                return "RUR"
    
            def is_gross(self):
                return True
    
            def format_salary(self):
                return "100 000 - 150 000 RUR"
    
            def to_dict(self):
                return {"from": 100000, "to": 150000, "currency": "RUR"}
    
            @classmethod
            def from_dict(cls, data):
                return cls()
    
            def compare(self, other):
                return 0
    
>       salary = ConcreteSalary()
                 ^^^^^^^^^^^^^^^^
E       TypeError: Can't instantiate abstract class ConcreteSalary with abstract methods get_average, get_from_amount, get_to_amount, is_specified

tests/test_abstractions_100_coverage.py:196: TypeError
______ TestAbstractDBManager.test_concrete_implementation_basic_methods _______

self = <test_abstractions_100_coverage.TestAbstractDBManager object at 0x7f116f95a250>

    def test_concrete_implementation_basic_methods(self):
        """Тест конкретной реализации основных методов"""
        class ConcreteDBManager(AbstractDBManager):
            def connect(self):
                return Mock()
    
            def disconnect(self):
                pass
    
            def execute_query(self, query, params=None):
                return []
    
>       db_manager = ConcreteDBManager()
                     ^^^^^^^^^^^^^^^^^^^
E       TypeError: Can't instantiate abstract class ConcreteDBManager with abstract methods get_all_vacancies, get_avg_salary, get_companies_and_vacancies_count, get_database_stats, get_vacancies_with_higher_salary, get_vacancies_with_keyword

tests/test_abstractions_100_coverage.py:279: TypeError
_______ TestAbstractDataFilter.test_concrete_implementation_all_methods _______

self = <test_abstractions_100_coverage.TestAbstractDataFilter object at 0x7f116f941d90>

    def test_concrete_implementation_all_methods(self):
        """Тест конкретной реализации всех методов"""
        class ConcreteDataFilter(AbstractDataFilter):
            def filter_by_company(self, data, companies):
                return [item for item in data if any(company.lower() in str(item).lower() for company in companies)]
    
            def filter_by_salary(self, data, min_salary=None, max_salary=None):
                filtered = []
                for item in data:
                    salary = item.get('salary', {})
                    if isinstance(salary, dict):
                        salary_from = salary.get('from', 0)
                        if min_salary and salary_from < min_salary:
                            continue
                        if max_salary and salary_from > max_salary:
                            continue
                    filtered.append(item)
                return filtered
    
>       filter_obj = ConcreteDataFilter()
                     ^^^^^^^^^^^^^^^^^^^^
E       TypeError: Can't instantiate abstract class ConcreteDataFilter with abstract methods filter_by_experience, filter_by_location

tests/test_abstractions_100_coverage.py:359: TypeError
_______ TestAbstractClassIntegration.test_abstract_classes_composition ________

self = <test_abstractions_100_coverage.TestAbstractClassIntegration object at 0x7f116f959990>

    def test_abstract_classes_composition(self):
        """Тест композиции абстрактных классов"""
        # Создаем конкретные реализации всех абстрактных классов
        class TestVacancy(AbstractVacancy):
            def __init__(self):
                self.employer = None
                self.salary = None
    
            def to_dict(self):
                return {"title": "Test"}
    
            @classmethod
            def from_dict(cls, data):
                return cls()
    
        class TestEmployer(AbstractEmployer):
            def get_name(self): return "Test Company"
            def get_id(self): return "123"
            def is_trusted(self): return True
            def get_url(self): return "http://test.com"
            def to_dict(self): return {"name": "Test Company"}
            @classmethod
            def from_dict(cls, data): return cls()
    
        class TestSalary(AbstractSalary):
            def get_from(self): return 100000
            def get_to(self): return 150000
            def get_currency(self): return "RUR"
            def is_gross(self): return True
            def format_salary(self): return "100k-150k RUR"
            def to_dict(self): return {"from": 100000, "to": 150000}
            @classmethod
            def from_dict(cls, data): return cls()
            def compare(self, other): return 0
    
        # Тестируем композицию
        vacancy = TestVacancy()
        employer = TestEmployer()
>       salary = TestSalary()
                 ^^^^^^^^^^^^
E       TypeError: Can't instantiate abstract class TestSalary with abstract methods get_average, get_from_amount, get_to_amount, is_specified

tests/test_abstractions_100_coverage.py:421: TypeError
_____________ TestTargetCompanies.test_get_company_by_name_found ______________

self = <test_concrete_models_100_coverage.TestTargetCompanies object at 0x7f116f9b1510>

    def test_get_company_by_name_found(self):
        """Тест поиска существующей компании"""
        first_company = TargetCompanies.COMPANIES[0]
>       found_company = TargetCompanies.get_company_by_name(first_company.name)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: type object 'TargetCompanies' has no attribute 'get_company_by_name'

tests/test_concrete_models_100_coverage.py:177: AttributeError
___________ TestTargetCompanies.test_get_company_by_name_not_found ____________

self = <test_concrete_models_100_coverage.TestTargetCompanies object at 0x7f116f9b3250>

    def test_get_company_by_name_not_found(self):
        """Тест поиска несуществующей компании"""
>       found_company = TargetCompanies.get_company_by_name("Несуществующая компания")
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: type object 'TargetCompanies' has no attribute 'get_company_by_name'

tests/test_concrete_models_100_coverage.py:183: AttributeError
_________________ TestTargetCompanies.test_get_company_ids_hh _________________

self = <test_concrete_models_100_coverage.TestTargetCompanies object at 0x7f116f9b3590>

    def test_get_company_ids_hh(self):
        """Тест получения ID компаний для HH"""
>       ids = TargetCompanies.get_company_ids("hh")
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: type object 'TargetCompanies' has no attribute 'get_company_ids'

tests/test_concrete_models_100_coverage.py:188: AttributeError
_________________ TestTargetCompanies.test_get_company_ids_sj _________________

self = <test_concrete_models_100_coverage.TestTargetCompanies object at 0x7f116f9b38d0>

    def test_get_company_ids_sj(self):
        """Тест получения ID компаний для SuperJob"""
>       ids = TargetCompanies.get_company_ids("sj")
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: type object 'TargetCompanies' has no attribute 'get_company_ids'

tests/test_concrete_models_100_coverage.py:195: AttributeError
____________ TestTargetCompanies.test_get_companies_for_source_hh _____________

self = <test_concrete_models_100_coverage.TestTargetCompanies object at 0x7f116f9b3c10>

    def test_get_companies_for_source_hh(self):
        """Тест получения компаний для источника HH"""
>       companies = TargetCompanies.get_companies_for_source("hh")
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: type object 'TargetCompanies' has no attribute 'get_companies_for_source'

tests/test_concrete_models_100_coverage.py:200: AttributeError
____________ TestTargetCompanies.test_get_companies_for_source_sj _____________

self = <test_concrete_models_100_coverage.TestTargetCompanies object at 0x7f116f9b3f50>

    def test_get_companies_for_source_sj(self):
        """Тест получения компаний для источника SuperJob"""
>       companies = TargetCompanies.get_companies_for_source("sj")
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: type object 'TargetCompanies' has no attribute 'get_companies_for_source'

tests/test_concrete_models_100_coverage.py:206: AttributeError
_________________ TestEnvLoader.test_get_env_var_str_existing _________________

self = <test_concrete_models_100_coverage.TestEnvLoader object at 0x7f116f9b6cd0>

    def test_get_env_var_str_existing(self):
        """Тест получения существующей строковой переменной"""
        with patch.dict(os.environ, {"TEST_VAR": "test_value"}):
>           result = EnvLoader.get_env_var_str("TEST_VAR", "default")
                     ^^^^^^^^^^^^^^^^^^^^^^^^^
E           AttributeError: type object 'EnvLoader' has no attribute 'get_env_var_str'

tests/test_concrete_models_100_coverage.py:270: AttributeError
_________________ TestEnvLoader.test_get_env_var_str_default __________________

self = <test_concrete_models_100_coverage.TestEnvLoader object at 0x7f116f9b72d0>

    def test_get_env_var_str_default(self):
        """Тест получения дефолтного значения"""
        with patch.dict(os.environ, {}, clear=True):
>           result = EnvLoader.get_env_var_str("MISSING_VAR", "default_value")
                     ^^^^^^^^^^^^^^^^^^^^^^^^^
E           AttributeError: type object 'EnvLoader' has no attribute 'get_env_var_str'

tests/test_concrete_models_100_coverage.py:276: AttributeError
__________________ TestEnvLoader.test_get_env_var_bool_true ___________________

self = <test_concrete_models_100_coverage.TestEnvLoader object at 0x7f116f9c04d0>

    def test_get_env_var_bool_true(self):
        """Тест получения булевых true значений"""
        true_values = ["true", "True", "TRUE", "1", "yes"]
        for value in true_values:
            with patch.dict(os.environ, {"BOOL_VAR": value}):
>               result = EnvLoader.get_env_var_bool("BOOL_VAR", False)
                         ^^^^^^^^^^^^^^^^^^^^^^^^^^
E               AttributeError: type object 'EnvLoader' has no attribute 'get_env_var_bool'

tests/test_concrete_models_100_coverage.py:296: AttributeError
__________________ TestEnvLoader.test_get_env_var_bool_false __________________

self = <test_concrete_models_100_coverage.TestEnvLoader object at 0x7f116f9c0ad0>

    def test_get_env_var_bool_false(self):
        """Тест получения булевых false значений"""
        false_values = ["false", "False", "0", "no"]
        for value in false_values:
            with patch.dict(os.environ, {"BOOL_VAR": value}):
>               result = EnvLoader.get_env_var_bool("BOOL_VAR", True)
                         ^^^^^^^^^^^^^^^^^^^^^^^^^^
E               AttributeError: type object 'EnvLoader' has no attribute 'get_env_var_bool'

tests/test_concrete_models_100_coverage.py:304: AttributeError
_________________________ TestSalary.test_init_range __________________________

self = <test_concrete_models_100_coverage.TestSalary object at 0x7f116f9b3310>

    def test_init_range(self):
        """Тест инициализации с диапазоном"""
>       salary = Salary(100000, 150000, "RUR")
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       TypeError: Salary.__init__() takes from 1 to 2 positional arguments but 4 were given

tests/test_concrete_models_100_coverage.py:381: TypeError
_______________________ TestSalary.test_init_from_only ________________________

self = <test_concrete_models_100_coverage.TestSalary object at 0x7f116f9c0310>

    def test_init_from_only(self):
        """Тест инициализации только с минимумом"""
>       salary = Salary(salary_from=80000, currency="RUR")
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       TypeError: Salary.__init__() got an unexpected keyword argument 'salary_from'

tests/test_concrete_models_100_coverage.py:388: TypeError
________________________ TestSalary.test_init_to_only _________________________

self = <test_concrete_models_100_coverage.TestSalary object at 0x7f116f9c27d0>

    def test_init_to_only(self):
        """Тест инициализации только с максимумом"""
>       salary = Salary(salary_to=120000, currency="USD")
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       TypeError: Salary.__init__() got an unexpected keyword argument 'salary_to'

tests/test_concrete_models_100_coverage.py:394: TypeError
_____________________ TestSalary.test_format_salary_range _____________________

self = <test_concrete_models_100_coverage.TestSalary object at 0x7f116f9c1810>

    def test_format_salary_range(self):
        """Тест форматирования диапазона"""
>       salary = Salary(100000, 150000, "RUR")
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       TypeError: Salary.__init__() takes from 1 to 2 positional arguments but 4 were given

tests/test_concrete_models_100_coverage.py:400: TypeError
___________________ TestSalary.test_format_salary_from_only ___________________

self = <test_concrete_models_100_coverage.TestSalary object at 0x7f116f9c08d0>

    def test_format_salary_from_only(self):
        """Тест форматирования только от"""
>       salary = Salary(salary_from=100000, currency="RUR")
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       TypeError: Salary.__init__() got an unexpected keyword argument 'salary_from'

tests/test_concrete_models_100_coverage.py:406: TypeError
_____________________ TestSalary.test_format_salary_none ______________________

self = <test_concrete_models_100_coverage.TestSalary object at 0x7f116f9c2bd0>

    def test_format_salary_none(self):
        """Тест форматирования отсутствующей зарплаты"""
>       salary = Salary(currency="RUR")
                 ^^^^^^^^^^^^^^^^^^^^^^
E       TypeError: Salary.__init__() got an unexpected keyword argument 'currency'

tests/test_concrete_models_100_coverage.py:412: TypeError
___________________________ TestSalary.test_to_dict ___________________________

self = <test_concrete_models_100_coverage.TestSalary object at 0x7f116f9c31d0>

    def test_to_dict(self):
        """Тест сериализации в словарь"""
>       salary = Salary(100000, 150000, "RUR", gross=True)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       TypeError: Salary.__init__() got an unexpected keyword argument 'gross'

tests/test_concrete_models_100_coverage.py:418: TypeError
_______________________ TestSalary.test_from_dict_full ________________________

self = <test_concrete_models_100_coverage.TestSalary object at 0x7f116f9c37d0>

    def test_from_dict_full(self):
        """Тест создания из полного словаря"""
        data = {
            "from": 90000,
            "to": 130000,
            "currency": "USD",
            "gross": False
        }
>       salary = Salary.from_dict(data)
                 ^^^^^^^^^^^^^^^^
E       AttributeError: type object 'Salary' has no attribute 'from_dict'

tests/test_concrete_models_100_coverage.py:436: AttributeError
_______________________ TestSalary.test_compare_methods _______________________

self = <test_concrete_models_100_coverage.TestSalary object at 0x7f116f9c3dd0>

    def test_compare_methods(self):
        """Тест методов сравнения"""
>       salary1 = Salary(150000, 200000, "RUR")
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       TypeError: Salary.__init__() takes from 1 to 2 positional arguments but 4 were given

tests/test_concrete_models_100_coverage.py:444: TypeError
_________________________ TestSalary.test_get_average _________________________

self = <test_concrete_models_100_coverage.TestSalary object at 0x7f116f9d03d0>

    def test_get_average(self):
        """Тест получения средней зарплаты"""
>       salary = Salary(100000, 200000, "RUR")
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       TypeError: Salary.__init__() takes from 1 to 2 positional arguments but 4 were given

tests/test_concrete_models_100_coverage.py:450: TypeError
________________________ TestSalary.test_is_specified _________________________

self = <test_concrete_models_100_coverage.TestSalary object at 0x7f116f9d09d0>

    def test_is_specified(self):
        """Тест проверки указана ли зарплата"""
>       salary_specified = Salary(100000, None, "RUR")
                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       TypeError: Salary.__init__() takes from 1 to 2 positional arguments but 4 were given

tests/test_concrete_models_100_coverage.py:455: TypeError
__________________________ TestExperience.test_init ___________________________

self = <test_concrete_models_100_coverage.TestExperience object at 0x7f116f9d1210>

    def test_init(self):
        """Тест инициализации"""
        exp = Experience("between1And3", "От 1 года до 3 лет")
>       assert exp.get_id() == "between1And3"
E       AssertionError: assert 'От 1 года до 3 лет' == 'between1And3'
E         
E         - between1And3
E         + От 1 года до 3 лет

tests/test_concrete_models_100_coverage.py:468: AssertionError
_________________________ TestExperience.test_to_dict _________________________

self = <test_concrete_models_100_coverage.TestExperience object at 0x7f116f9d1810>

    def test_to_dict(self):
        """Тест сериализации"""
        exp = Experience("between3And6", "От 3 до 6 лет")
        result = exp.to_dict()
        expected = {"id": "between3And6", "name": "От 3 до 6 лет"}
>       assert result == expected
E       AssertionError: assert {'id': 'От 3 ...between3And6'} == {'id': 'betwe...т 3 до 6 лет'}
E         
E         Differing items:
E         {'name': 'between3And6'} != {'name': 'От 3 до 6 лет'}
E         {'id': 'От 3 до 6 лет'} != {'id': 'between3And6'}
E         Use -v to get more diff

tests/test_concrete_models_100_coverage.py:476: AssertionError
__________________________ TestEmployment.test_init ___________________________

self = <test_concrete_models_100_coverage.TestEmployment object at 0x7f116f9d2b90>

    def test_init(self):
        """Тест инициализации"""
        emp = Employment("full", "Полная занятость")
>       assert emp.get_id() == "full"
E       AssertionError: assert 'Полная занятость' == 'full'
E         
E         - full
E         + Полная занятость

tests/test_concrete_models_100_coverage.py:497: AssertionError
_________________________ TestEmployment.test_to_dict _________________________

self = <test_concrete_models_100_coverage.TestEmployment object at 0x7f116f9d3190>

    def test_to_dict(self):
        """Тест сериализации"""
        emp = Employment("part", "Частичная занятость")
        result = emp.to_dict()
        expected = {"id": "part", "name": "Частичная занятость"}
>       assert result == expected
E       AssertionError: assert {'id': 'Части...name': 'part'} == {'id': 'part'...ая занятость'}
E         
E         Differing items:
E         {'name': 'part'} != {'name': 'Частичная занятость'}
E         {'id': 'Частичная занятость'} != {'id': 'part'}
E         Use -v to get more diff

tests/test_concrete_models_100_coverage.py:505: AssertionError
________________________ TestVacancy.test_init_minimal ________________________

self = <test_concrete_models_100_coverage.TestVacancy object at 0x7f116f9d8550>

    def test_init_minimal(self):
        """Тест минимальной инициализации"""
        vacancy = Vacancy("Test Vacancy", "http://test.com")
>       assert vacancy.get_title() == "Test Vacancy"
               ^^^^^^^^^^^^^^^^^
E       AttributeError: 'Vacancy' object has no attribute 'get_title'

tests/test_concrete_models_100_coverage.py:526: AttributeError
_________________________ TestVacancy.test_init_full __________________________

self = <test_concrete_models_100_coverage.TestVacancy object at 0x7f116f9d8b50>

    def test_init_full(self):
        """Тест полной инициализации"""
        employer = Employer("Test Company")
>       salary = Salary(100000, 150000, "RUR")
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       TypeError: Salary.__init__() takes from 1 to 2 positional arguments but 4 were given

tests/test_concrete_models_100_coverage.py:532: TypeError
_______________________ TestVacancy.test_get_id_methods _______________________

self = <test_concrete_models_100_coverage.TestVacancy object at 0x7f116f9d3b90>

    def test_get_id_methods(self):
        """Тест методов получения ID"""
        vacancy_with_id = Vacancy("Test", "http://test.com", vacancy_id="custom123")
>       assert vacancy_with_id.get_id() == "custom123"
               ^^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: 'Vacancy' object has no attribute 'get_id'

tests/test_concrete_models_100_coverage.py:552: AttributeError
_________________ TestVacancy.test_get_published_date_formats _________________

self = <test_concrete_models_100_coverage.TestVacancy object at 0x7f116f9d2f50>

    def test_get_published_date_formats(self):
        """Тест различных форматов даты публикации"""
        # Тест строки
        vacancy_str = Vacancy("Test", "http://test.com", published_at="2024-01-01T10:00:00")
>       date = vacancy_str.get_published_date()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: 'Vacancy' object has no attribute 'get_published_date'

tests/test_concrete_models_100_coverage.py:563: AttributeError
___________________ TestVacancy.test_to_dict_serialization ____________________

self = <test_concrete_models_100_coverage.TestVacancy object at 0x7f116f9d2750>

    def test_to_dict_serialization(self):
        """Тест сериализации в словарь"""
        employer = Employer("Test Company")
>       salary = Salary(100000, 150000, "RUR")
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       TypeError: Salary.__init__() takes from 1 to 2 positional arguments but 4 were given

tests/test_concrete_models_100_coverage.py:579: TypeError
_________________ TestVacancy.test_from_dict_deserialization __________________

self = <test_concrete_models_100_coverage.TestVacancy object at 0x7f116f9d0d90>

    def test_from_dict_deserialization(self):
        """Тест создания из словаря"""
        data = {
            "title": "Dict Vacancy",
            "url": "http://dict.com",
            "id": "dict123",
            "description": "Full description",
            "salary": {"from": 100000, "to": 150000, "currency": "RUR"},
            "employer": {"name": "Dict Company"},
            "published_at": "2024-01-01T00:00:00"
        }
    
        vacancy = Vacancy.from_dict(data)
>       assert vacancy.get_title() == "Dict Vacancy"
               ^^^^^^^^^^^^^^^^^
E       AttributeError: 'Vacancy' object has no attribute 'get_title'

tests/test_concrete_models_100_coverage.py:606: AttributeError
_____________________ TestVacancy.test_compare_by_salary ______________________

self = <test_concrete_models_100_coverage.TestVacancy object at 0x7f116f9c14d0>

    def test_compare_by_salary(self):
        """Тест сравнения по зарплате"""
>       vacancy1 = Vacancy("Test1", "url1", salary=Salary(150000, 200000, "RUR"))
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       TypeError: Salary.__init__() takes from 1 to 2 positional arguments but 4 were given

tests/test_concrete_models_100_coverage.py:614: TypeError
_______________________ TestVacancy.test_matches_query ________________________

self = <test_concrete_models_100_coverage.TestVacancy object at 0x7f116f9b6a90>

    def test_matches_query(self):
        """Тест поиска запроса в вакансии"""
        vacancy = Vacancy("Python Developer", "url", description="Looking for Python developer")
>       assert vacancy.matches_query("python") == True
               ^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: 'Vacancy' object has no attribute 'matches_query'

tests/test_concrete_models_100_coverage.py:626: AttributeError
_________________________ TestSalary.test_init_empty __________________________

self = <test_concrete_models_fixed.TestSalary object at 0x7f116f9fab10>

    def test_init_empty(self):
        """Тест инициализации без данных"""
        salary = Salary()
>       assert salary.get_from_amount() is None
               ^^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: 'Salary' object has no attribute 'get_from_amount'

tests/test_concrete_models_fixed.py:132: AttributeError
_______________________ TestSalary.test_init_with_data ________________________

self = <test_concrete_models_fixed.TestSalary object at 0x7f116f9fb110>

    def test_init_with_data(self):
        """Тест инициализации с данными"""
        salary_data = {
            "from": 100000,
            "to": 150000,
            "currency": "RUR",
            "gross": True
        }
        salary = Salary(salary_data)
>       assert salary.get_from_amount() == 100000
               ^^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: 'Salary' object has no attribute 'get_from_amount'

tests/test_concrete_models_fixed.py:144: AttributeError
______________________ TestSalary.test_init_partial_data ______________________

self = <test_concrete_models_fixed.TestSalary object at 0x7f116f9fb710>

    def test_init_partial_data(self):
        """Тест инициализации с частичными данными"""
        salary_data = {"from": 80000, "currency": "USD"}
        salary = Salary(salary_data)
>       assert salary.get_from_amount() == 80000
               ^^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: 'Salary' object has no attribute 'get_from_amount'

tests/test_concrete_models_fixed.py:153: AttributeError
__________________ TestSalary.test_format_salary_full_range ___________________

self = <test_concrete_models_fixed.TestSalary object at 0x7f116f9fbd50>

    def test_format_salary_full_range(self):
        """Тест форматирования полного диапазона"""
        salary_data = {"from": 100000, "to": 150000, "currency": "RUR"}
        salary = Salary(salary_data)
>       formatted = salary.format_salary()
                    ^^^^^^^^^^^^^^^^^^^^
E       AttributeError: 'Salary' object has no attribute 'format_salary'

tests/test_concrete_models_fixed.py:161: AttributeError
___________________ TestSalary.test_format_salary_from_only ___________________

self = <test_concrete_models_fixed.TestSalary object at 0x7f116f9fc390>

    def test_format_salary_from_only(self):
        """Тест форматирования только от"""
        salary_data = {"from": 100000, "currency": "RUR"}
        salary = Salary(salary_data)
>       formatted = salary.format_salary()
                    ^^^^^^^^^^^^^^^^^^^^
E       AttributeError: 'Salary' object has no attribute 'format_salary'

tests/test_concrete_models_fixed.py:168: AttributeError
____________________ TestSalary.test_format_salary_to_only ____________________

self = <test_concrete_models_fixed.TestSalary object at 0x7f116f9fc990>

    def test_format_salary_to_only(self):
        """Тест форматирования только до"""
        salary_data = {"to": 100000, "currency": "RUR"}
        salary = Salary(salary_data)
>       formatted = salary.format_salary()
                    ^^^^^^^^^^^^^^^^^^^^
E       AttributeError: 'Salary' object has no attribute 'format_salary'

tests/test_concrete_models_fixed.py:175: AttributeError
_____________________ TestSalary.test_format_salary_none ______________________

self = <test_concrete_models_fixed.TestSalary object at 0x7f116f9fcf90>

    def test_format_salary_none(self):
        """Тест форматирования отсутствующей зарплаты"""
        salary = Salary()
>       formatted = salary.format_salary()
                    ^^^^^^^^^^^^^^^^^^^^
E       AttributeError: 'Salary' object has no attribute 'format_salary'

tests/test_concrete_models_fixed.py:181: AttributeError
______________________ TestSalary.test_is_specified_true ______________________

self = <test_concrete_models_fixed.TestSalary object at 0x7f116f9fd590>

    def test_is_specified_true(self):
        """Тест проверки что зарплата указана"""
        salary_data = {"from": 100000}
        salary = Salary(salary_data)
>       assert salary.is_specified() == True
               ^^^^^^^^^^^^^^^^^^^
E       AttributeError: 'Salary' object has no attribute 'is_specified'

tests/test_concrete_models_fixed.py:188: AttributeError
_____________________ TestSalary.test_is_specified_false ______________________

self = <test_concrete_models_fixed.TestSalary object at 0x7f116f9fdb90>

    def test_is_specified_false(self):
        """Тест проверки что зарплата не указана"""
        salary = Salary()
>       assert salary.is_specified() == False
               ^^^^^^^^^^^^^^^^^^^
E       AttributeError: 'Salary' object has no attribute 'is_specified'

tests/test_concrete_models_fixed.py:193: AttributeError
___________________ TestSalary.test_get_average_with_range ____________________

self = <test_concrete_models_fixed.TestSalary object at 0x7f116f9fe150>

    def test_get_average_with_range(self):
        """Тест получения средней зарплаты с диапазоном"""
        salary_data = {"from": 100000, "to": 200000}
        salary = Salary(salary_data)
>       assert salary.get_average() == 150000
               ^^^^^^^^^^^^^^^^^^
E       AttributeError: 'Salary' object has no attribute 'get_average'

tests/test_concrete_models_fixed.py:199: AttributeError
____________________ TestSalary.test_get_average_from_only ____________________

self = <test_concrete_models_fixed.TestSalary object at 0x7f116f9fe750>

    def test_get_average_from_only(self):
        """Тест получения средней зарплаты только с from"""
        salary_data = {"from": 100000}
        salary = Salary(salary_data)
>       assert salary.get_average() == 100000
               ^^^^^^^^^^^^^^^^^^
E       AttributeError: 'Salary' object has no attribute 'get_average'

tests/test_concrete_models_fixed.py:205: AttributeError
_____________________ TestSalary.test_get_average_to_only _____________________

self = <test_concrete_models_fixed.TestSalary object at 0x7f116f9fed50>

    def test_get_average_to_only(self):
        """Тест получения средней зарплаты только с to"""
        salary_data = {"to": 150000}
        salary = Salary(salary_data)
>       assert salary.get_average() == 150000
               ^^^^^^^^^^^^^^^^^^
E       AttributeError: 'Salary' object has no attribute 'get_average'

tests/test_concrete_models_fixed.py:211: AttributeError
______________________ TestSalary.test_compare_salaries _______________________

self = <test_concrete_models_fixed.TestSalary object at 0x7f116f9ff350>

    def test_compare_salaries(self):
        """Тест сравнения зарплат"""
        salary1_data = {"from": 150000, "to": 200000}
        salary2_data = {"from": 100000, "to": 130000}
    
        salary1 = Salary(salary1_data)
        salary2 = Salary(salary2_data)
    
>       assert salary1.compare(salary2) > 0
               ^^^^^^^^^^^^^^^
E       AttributeError: 'Salary' object has no attribute 'compare'

tests/test_concrete_models_fixed.py:221: AttributeError
___________________________ TestSalary.test_to_dict ___________________________

self = <test_concrete_models_fixed.TestSalary object at 0x7f116f9ff950>

    def test_to_dict(self):
        """Тест сериализации в словарь"""
        salary_data = {"from": 100000, "to": 150000, "currency": "RUR", "gross": True}
        salary = Salary(salary_data)
        result = salary.to_dict()
>       assert result == salary_data
E       AssertionError: assert {'currency': ... 'month', ...} == {'currency': ... 'to': 150000}
E         
E         Omitting 4 identical items, use -vv to show
E         Left contains 1 more item:
E         {'period': 'month'}
E         Use -v to get more diff

tests/test_concrete_models_fixed.py:229: AssertionError
__________________________ TestSalary.test_from_dict __________________________

self = <test_concrete_models_fixed.TestSalary object at 0x7f116f9fff50>

    def test_from_dict(self):
        """Тест создания из словаря"""
        data = {"from": 90000, "to": 130000, "currency": "USD"}
>       salary = Salary.from_dict(data)
                 ^^^^^^^^^^^^^^^^
E       AttributeError: type object 'Salary' has no attribute 'from_dict'

tests/test_concrete_models_fixed.py:234: AttributeError
___________________ TestVacancy.test_to_dict_serialization ____________________

self = <test_concrete_models_fixed.TestVacancy object at 0x7f116f51bd90>

    def test_to_dict_serialization(self):
        """Тест сериализации в словарь"""
        employer = Employer("Test Company")
        salary_data = {"from": 100000, "to": 150000, "currency": "RUR"}
        salary = Salary(salary_data)
    
        vacancy = Vacancy(
            title="Full Test",
            url="http://test.com",
            salary=salary,
            employer=employer,
            vacancy_id="test123"
        )
    
        result = vacancy.to_dict()
        assert result["title"] == "Full Test"
        assert "salary" in result
        assert "employer" in result
>       assert result["id"] == "test123"
               ^^^^^^^^^^^^
E       KeyError: 'id'

tests/test_concrete_models_fixed.py:484: KeyError
_________________ TestVacancy.test_from_dict_deserialization __________________

self = <test_concrete_models_fixed.TestVacancy object at 0x7f116f512010>

    def test_from_dict_deserialization(self):
        """Тест создания из словаря"""
        data = {
            "title": "Dict Vacancy",
            "url": "http://dict.com",
            "id": "dict123",
            "description": "Full description",
            "salary": {"from": 100000, "to": 150000, "currency": "RUR"},
            "employer": {"name": "Dict Company"},
            "published_at": "2024-01-01T00:00:00"
        }
    
        vacancy = Vacancy.from_dict(data)
        assert vacancy.title == "Dict Vacancy"
>       assert vacancy.id == "dict123"
               ^^^^^^^^^^
E       AttributeError: 'Vacancy' object has no attribute 'id'

tests/test_concrete_models_fixed.py:500: AttributeError
__________________________ TestVacancy.test_str_repr __________________________

self = <test_concrete_models_fixed.TestVacancy object at 0x7f116f9fe950>

    def test_str_repr(self):
        """Тест строковых представлений"""
        vacancy = Vacancy("String Vacancy", "http://string.com")
        str_result = str(vacancy)
        repr_result = repr(vacancy)
    
        assert "String Vacancy" in str_result
>       assert "String Vacancy" in repr_result
E       AssertionError: assert 'String Vacancy' in '<src.vacancies.models.Vacancy object at 0x7f116f15d3d0>'

tests/test_concrete_models_fixed.py:512: AssertionError
_______ TestConfigModulesIntegration.test_target_companies_all_methods ________

self = <test_concrete_models_fixed.TestConfigModulesIntegration object at 0x7f116f51a750>

    def test_target_companies_all_methods(self):
        """Тест всех методов TargetCompanies"""
        # Тест получения всех компаний
        companies = TargetCompanies.get_all_companies()
        assert isinstance(companies, list)
        assert len(companies) > 0
    
        # Тест поиска компании (используем первую из списка)
        first_company = companies[0]
>       found_company = TargetCompanies.get_company_by_name(first_company.name)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: type object 'TargetCompanies' has no attribute 'get_company_by_name'

tests/test_concrete_models_fixed.py:570: AttributeError
=============================== tests coverage ================================
______________ coverage: platform linux, python 3.11.13-final-0 _______________

Name                                                     Stmts   Miss  Cover   Missing
--------------------------------------------------------------------------------------
src/__init__.py                                              0      0   100%
src/api_modules/__init__.py                                  0      0   100%
src/api_modules/base_api.py                                 23      5    78%   69-73
src/api_modules/cached_api.py                              168    168     0%   10-357
src/api_modules/get_api.py                                  53     53     0%   9-153
src/api_modules/hh_api.py                                  142    142     0%   1-340
src/api_modules/sj_api.py                                  128    128     0%   1-317
src/api_modules/unified_api.py                             270    270     0%   1-458
src/config/__init__.py                                       0      0   100%
src/config/api_config.py                                    13      0   100%
src/config/app_config.py                                    17      0   100%
src/config/db_config.py                                     61     52    15%   10, 17-24, 44-48, 57-69, 81-136, 156-172
src/config/hh_api_config.py                                 21      6    71%   24-33, 37
src/config/sj_api_config.py                                 49     25    49%   39, 43-64, 68-75, 79-87
src/config/target_companies.py                              61     27    56%   109, 114, 119, 124-130, 135-138, 143-146, 151, 156-162, 167, 185, 190
src/config/ui_config.py                                     27     27     0%   1-87
src/interfaces/__init__.py                                   0      0   100%
src/interfaces/main_application_interface.py               121    121     0%   12-236
src/storage/__init__.py                                      6      0   100%
src/storage/abstract.py                                     14      0   100%
src/storage/abstract_db_manager.py                          21      6    71%   16, 26, 36, 46, 59, 69
src/storage/components/__init__.py                           0      0   100%
src/storage/components/database_connection.py               53     53     0%   6-108
src/storage/components/vacancy_repository.py               113    113     0%   6-291
src/storage/components/vacancy_validator.py                 65     65     0%   6-152
src/storage/db_manager.py                                  348    317     9%   17-24, 49, 61-76, 83-139, 146-278, 282-338, 348-361, 372-405, 419-451, 460-465, 476-535, 545-576, 586-651, 664-728, 737-820, 832, 841-859, 871-877, 892-1022
src/storage/postgres_saver.py                              790    753     5%   10-13, 37-55, 59-74, 79-151, 155-205, 209-328, 337-640, 652-664, 677-692, 704-708, 721-779, 783-895, 899-970, 974-992, 996-1020, 1024-1048, 1055, 1067-1098, 1102-1113, 1125-1180, 1184-1196, 1208-1251, 1264-1303, 1323-1574, 1587-1601, 1609-1642
src/storage/services/__init__.py                             4      4     0%   6-11
src/storage/services/abstract_filter_service.py             30     30     0%   7-127
src/storage/services/abstract_storage_service.py            25     25     0%   7-93
src/storage/services/company_id_filter_service.py           94     94     0%   8-223
src/storage/services/deduplication_service.py               64     64     0%   7-192
src/storage/services/filtering_service.py                  105    105     0%   7-237
src/storage/services/sql_deduplication_service.py           64     64     0%   8-182
src/storage/services/sql_filter_service.py                  89     89     0%   8-247
src/storage/services/vacancy_processing_coordinator.py      44     44     0%   8-134
src/storage/services/vacancy_storage_service.py            334    334     0%   7-618
src/storage/simple_db_adapter.py                           142    142     0%   6-219
src/storage/storage_factory.py                              13      6    54%   19-25, 35
src/ui_interfaces/__init__.py                                0      0   100%
src/ui_interfaces/console_interface.py                     394    394     0%   1-604
src/ui_interfaces/source_selector.py                        44     44     0%   1-79
src/ui_interfaces/vacancy_display_handler.py                72     72     0%   1-141
src/ui_interfaces/vacancy_operations_coordinator.py        194    194     0%   7-327
src/ui_interfaces/vacancy_search_handler.py                152    152     0%   1-308
src/user_interface.py                                       55     55     0%   6-98
src/utils/__init__.py                                        0      0   100%
src/utils/abstract_filter.py                                26      4    85%   30, 47, 61, 75
src/utils/api_data_filter.py                               154    154     0%   5-307
src/utils/base_formatter.py                                 38     38     0%   1-64
src/utils/cache.py                                         135    135     0%   1-244
src/utils/data_normalizers.py                               75     64    15%   22-43, 59-80, 96-121, 134-162
src/utils/db_manager_demo.py                               236    236     0%   8-386
src/utils/decorators.py                                     73     53    27%   24-52, 56-57, 61, 77-91, 97-106, 112-121
src/utils/description_parser.py                             70     44    37%   41-64, 78, 88-90, 96-101, 116-135, 141-177
src/utils/env_loader.py                                     59      0   100%
src/utils/file_handlers.py                                  38     25    34%   36-48, 57-76
src/utils/menu_manager.py                                   49     49     0%   1-149
src/utils/paginator.py                                      28     28     0%   1-65
src/utils/salary.py                                        113     55    51%   33, 35-36, 48, 55-61, 71-72, 78, 93-135, 152, 157, 162-164, 178-183, 192-211
src/utils/search_utils.py                                  156    156     0%   1-347
src/utils/source_manager.py                                 60     60     0%   5-204
src/utils/ui_helpers.py                                    161    161     0%   1-361
src/utils/ui_navigation.py                                  99     99     0%   1-246
src/utils/vacancy_formatter.py                             167    167     0%   1-308
src/utils/vacancy_operations.py                            165    165     0%   1-370
src/utils/vacancy_stats.py                                  86     86     0%   5-165
src/vacancies/__init__.py                                    0      0   100%
src/vacancies/abstract.py                                   10      0   100%
src/vacancies/abstract_models.py                            99     28    72%   18, 23, 28, 33, 38, 44, 53, 58, 63, 69, 75, 84, 89, 94, 100, 106, 115, 120, 125, 130, 135, 140, 146, 155, 160, 165, 171, 177
src/vacancies/models.py                                    390    116    70%   93, 102, 132, 141, 149, 153, 179, 188, 196, 200, 299, 317, 329-332, 343-358, 369-384, 389-391, 405, 410, 417, 435-438, 443-451, 458, 483, 495-499, 502-510, 514-521, 546, 548, 550, 556, 558, 560, 562, 564, 598, 600-605, 612, 614, 616, 618, 620, 649-651, 670, 686, 701-706, 719-721, 725-727, 731-733, 737-739, 743-745, 749
src/vacancies/parsers/__init__.py                           55     55     0%   5-121
src/vacancies/parsers/base_parser.py                         9      9     0%   1-32
src/vacancies/parsers/hh_parser.py                          55     55     0%   1-119
src/vacancies/parsers/sj_parser.py                          57     57     0%   1-147
--------------------------------------------------------------------------------------
TOTAL                                                     7146   6342    11%
=========================== short test summary info ===========================
FAILED tests/test_abstractions_100_coverage.py::TestAbstractExperience::test_concrete_implementation_all_methods - TypeError: Can't instantiate abstract class ConcreteExperience with abstra...
FAILED tests/test_abstractions_100_coverage.py::TestAbstractEmployment::test_concrete_implementation_all_methods - TypeError: Can't instantiate abstract class ConcreteEmployment with abstra...
FAILED tests/test_abstractions_100_coverage.py::TestAbstractSalary::test_concrete_implementation_all_methods - TypeError: Can't instantiate abstract class ConcreteSalary with abstract m...
FAILED tests/test_abstractions_100_coverage.py::TestAbstractDBManager::test_concrete_implementation_basic_methods - TypeError: Can't instantiate abstract class ConcreteDBManager with abstrac...
FAILED tests/test_abstractions_100_coverage.py::TestAbstractDataFilter::test_concrete_implementation_all_methods - TypeError: Can't instantiate abstract class ConcreteDataFilter with abstra...
FAILED tests/test_abstractions_100_coverage.py::TestAbstractClassIntegration::test_abstract_classes_composition - TypeError: Can't instantiate abstract class TestSalary with abstract metho...
FAILED tests/test_concrete_models_100_coverage.py::TestTargetCompanies::test_get_company_by_name_found - AttributeError: type object 'TargetCompanies' has no attribute 'get_compan...
FAILED tests/test_concrete_models_100_coverage.py::TestTargetCompanies::test_get_company_by_name_not_found - AttributeError: type object 'TargetCompanies' has no attribute 'get_compan...
FAILED tests/test_concrete_models_100_coverage.py::TestTargetCompanies::test_get_company_ids_hh - AttributeError: type object 'TargetCompanies' has no attribute 'get_compan...
FAILED tests/test_concrete_models_100_coverage.py::TestTargetCompanies::test_get_company_ids_sj - AttributeError: type object 'TargetCompanies' has no attribute 'get_compan...
FAILED tests/test_concrete_models_100_coverage.py::TestTargetCompanies::test_get_companies_for_source_hh - AttributeError: type object 'TargetCompanies' has no attribute 'get_compan...
FAILED tests/test_concrete_models_100_coverage.py::TestTargetCompanies::test_get_companies_for_source_sj - AttributeError: type object 'TargetCompanies' has no attribute 'get_compan...
FAILED tests/test_concrete_models_100_coverage.py::TestEnvLoader::test_get_env_var_str_existing - AttributeError: type object 'EnvLoader' has no attribute 'get_env_var_str'
FAILED tests/test_concrete_models_100_coverage.py::TestEnvLoader::test_get_env_var_str_default - AttributeError: type object 'EnvLoader' has no attribute 'get_env_var_str'
FAILED tests/test_concrete_models_100_coverage.py::TestEnvLoader::test_get_env_var_bool_true - AttributeError: type object 'EnvLoader' has no attribute 'get_env_var_bool'
FAILED tests/test_concrete_models_100_coverage.py::TestEnvLoader::test_get_env_var_bool_false - AttributeError: type object 'EnvLoader' has no attribute 'get_env_var_bool'
FAILED tests/test_concrete_models_100_coverage.py::TestSalary::test_init_range - TypeError: Salary.__init__() takes from 1 to 2 positional arguments but 4 ...
FAILED tests/test_concrete_models_100_coverage.py::TestSalary::test_init_from_only - TypeError: Salary.__init__() got an unexpected keyword argument 'salary_from'
FAILED tests/test_concrete_models_100_coverage.py::TestSalary::test_init_to_only - TypeError: Salary.__init__() got an unexpected keyword argument 'salary_to'
FAILED tests/test_concrete_models_100_coverage.py::TestSalary::test_format_salary_range - TypeError: Salary.__init__() takes from 1 to 2 positional arguments but 4 ...
FAILED tests/test_concrete_models_100_coverage.py::TestSalary::test_format_salary_from_only - TypeError: Salary.__init__() got an unexpected keyword argument 'salary_from'
FAILED tests/test_concrete_models_100_coverage.py::TestSalary::test_format_salary_none - TypeError: Salary.__init__() got an unexpected keyword argument 'currency'
FAILED tests/test_concrete_models_100_coverage.py::TestSalary::test_to_dict - TypeError: Salary.__init__() got an unexpected keyword argument 'gross'
FAILED tests/test_concrete_models_100_coverage.py::TestSalary::test_from_dict_full - AttributeError: type object 'Salary' has no attribute 'from_dict'
FAILED tests/test_concrete_models_100_coverage.py::TestSalary::test_compare_methods - TypeError: Salary.__init__() takes from 1 to 2 positional arguments but 4 ...
FAILED tests/test_concrete_models_100_coverage.py::TestSalary::test_get_average - TypeError: Salary.__init__() takes from 1 to 2 positional arguments but 4 ...
FAILED tests/test_concrete_models_100_coverage.py::TestSalary::test_is_specified - TypeError: Salary.__init__() takes from 1 to 2 positional arguments but 4 ...
FAILED tests/test_concrete_models_100_coverage.py::TestExperience::test_init - AssertionError: assert 'От 1 года до 3 лет' == 'between1And3'
FAILED tests/test_concrete_models_100_coverage.py::TestExperience::test_to_dict - AssertionError: assert {'id': 'От 3 ...between3And6'} == {'id': 'betwe...т...
FAILED tests/test_concrete_models_100_coverage.py::TestEmployment::test_init - AssertionError: assert 'Полная занятость' == 'full'
FAILED tests/test_concrete_models_100_coverage.py::TestEmployment::test_to_dict - AssertionError: assert {'id': 'Части...name': 'part'} == {'id': 'part'...а...
FAILED tests/test_concrete_models_100_coverage.py::TestVacancy::test_init_minimal - AttributeError: 'Vacancy' object has no attribute 'get_title'
FAILED tests/test_concrete_models_100_coverage.py::TestVacancy::test_init_full - TypeError: Salary.__init__() takes from 1 to 2 positional arguments but 4 ...
FAILED tests/test_concrete_models_100_coverage.py::TestVacancy::test_get_id_methods - AttributeError: 'Vacancy' object has no attribute 'get_id'
FAILED tests/test_concrete_models_100_coverage.py::TestVacancy::test_get_published_date_formats - AttributeError: 'Vacancy' object has no attribute 'get_published_date'
FAILED tests/test_concrete_models_100_coverage.py::TestVacancy::test_to_dict_serialization - TypeError: Salary.__init__() takes from 1 to 2 positional arguments but 4 ...
FAILED tests/test_concrete_models_100_coverage.py::TestVacancy::test_from_dict_deserialization - AttributeError: 'Vacancy' object has no attribute 'get_title'
FAILED tests/test_concrete_models_100_coverage.py::TestVacancy::test_compare_by_salary - TypeError: Salary.__init__() takes from 1 to 2 positional arguments but 4 ...
FAILED tests/test_concrete_models_100_coverage.py::TestVacancy::test_matches_query - AttributeError: 'Vacancy' object has no attribute 'matches_query'
FAILED tests/test_concrete_models_fixed.py::TestSalary::test_init_empty - AttributeError: 'Salary' object has no attribute 'get_from_amount'
FAILED tests/test_concrete_models_fixed.py::TestSalary::test_init_with_data - AttributeError: 'Salary' object has no attribute 'get_from_amount'
FAILED tests/test_concrete_models_fixed.py::TestSalary::test_init_partial_data - AttributeError: 'Salary' object has no attribute 'get_from_amount'
FAILED tests/test_concrete_models_fixed.py::TestSalary::test_format_salary_full_range - AttributeError: 'Salary' object has no attribute 'format_salary'
FAILED tests/test_concrete_models_fixed.py::TestSalary::test_format_salary_from_only - AttributeError: 'Salary' object has no attribute 'format_salary'
FAILED tests/test_concrete_models_fixed.py::TestSalary::test_format_salary_to_only - AttributeError: 'Salary' object has no attribute 'format_salary'
FAILED tests/test_concrete_models_fixed.py::TestSalary::test_format_salary_none - AttributeError: 'Salary' object has no attribute 'format_salary'
FAILED tests/test_concrete_models_fixed.py::TestSalary::test_is_specified_true - AttributeError: 'Salary' object has no attribute 'is_specified'
FAILED tests/test_concrete_models_fixed.py::TestSalary::test_is_specified_false - AttributeError: 'Salary' object has no attribute 'is_specified'
FAILED tests/test_concrete_models_fixed.py::TestSalary::test_get_average_with_range - AttributeError: 'Salary' object has no attribute 'get_average'
FAILED tests/test_concrete_models_fixed.py::TestSalary::test_get_average_from_only - AttributeError: 'Salary' object has no attribute 'get_average'
FAILED tests/test_concrete_models_fixed.py::TestSalary::test_get_average_to_only - AttributeError: 'Salary' object has no attribute 'get_average'
FAILED tests/test_concrete_models_fixed.py::TestSalary::test_compare_salaries - AttributeError: 'Salary' object has no attribute 'compare'
FAILED tests/test_concrete_models_fixed.py::TestSalary::test_to_dict - AssertionError: assert {'currency': ... 'month', ...} == {'currency': ... ...
FAILED tests/test_concrete_models_fixed.py::TestSalary::test_from_dict - AttributeError: type object 'Salary' has no attribute 'from_dict'
FAILED tests/test_concrete_models_fixed.py::TestVacancy::test_to_dict_serialization - KeyError: 'id'
FAILED tests/test_concrete_models_fixed.py::TestVacancy::test_from_dict_deserialization - AttributeError: 'Vacancy' object has no attribute 'id'
FAILED tests/test_concrete_models_fixed.py::TestVacancy::test_str_repr - AssertionError: assert 'String Vacancy' in '<src.vacancies.models.Vacancy ...
FAILED tests/test_concrete_models_fixed.py::TestConfigModulesIntegration::test_target_companies_all_methods - AttributeError: type object 'TargetCompanies' has no attribute 'get_compan...
======================= 58 failed, 122 passed in 3.30s ========================
~/workspace$ 