~/workspace$ pytest tests/test_db_manager_coverage.py -v
============================== test session starts ==============================
platform linux -- Python 3.11.13, pytest-8.4.2, pluggy-1.6.0 -- /nix/store/2lcqw1d28vklbk8ikiwad28iq2smwndv-python-wrapped-0.1.0/bin/python3
cachedir: .pytest_cache
rootdir: /home/runner/workspace
configfile: pyproject.toml
plugins: cov-6.2.1, mock-3.15.0
collected 16 items                                                              

tests/test_db_manager_coverage.py::TestDBManagerCoverage::test_db_manager_initialization PASSED [  6%]
tests/test_db_manager_coverage.py::TestDBManagerCoverage::test_connection_management PASSED [ 12%]
tests/test_db_manager_coverage.py::TestDBManagerCoverage::test_create_database_schema PASSED [ 18%]
tests/test_db_manager_coverage.py::TestDBManagerCoverage::test_save_company_data PASSED [ 25%]
tests/test_db_manager_coverage.py::TestDBManagerCoverage::test_save_vacancy_comprehensive FAILED [ 31%]
tests/test_db_manager_coverage.py::TestDBManagerCoverage::test_bulk_save_operations FAILED [ 37%]
tests/test_db_manager_coverage.py::TestDBManagerCoverage::test_query_operations FAILED [ 43%]
tests/test_db_manager_coverage.py::TestDBManagerCoverage::test_search_functionality FAILED [ 50%]
tests/test_db_manager_coverage.py::TestDBManagerCoverage::test_filter_operations FAILED [ 56%]
tests/test_db_manager_coverage.py::TestDBManagerCoverage::test_aggregation_operations FAILED [ 62%]
tests/test_db_manager_coverage.py::TestDBManagerCoverage::test_update_operations FAILED [ 68%]
tests/test_db_manager_coverage.py::TestDBManagerCoverage::test_delete_operations FAILED [ 75%]
tests/test_db_manager_coverage.py::TestDBManagerCoverage::test_transaction_management FAILED [ 81%]
tests/test_db_manager_coverage.py::TestDBManagerCoverage::test_error_handling_scenarios PASSED [ 87%]
tests/test_db_manager_coverage.py::TestDBManagerCoverage::test_data_validation_before_save PASSED [ 93%]
tests/test_db_manager_coverage.py::TestDBManagerCoverage::test_connection_pool_management PASSED [100%]

=================================== FAILURES ====================================
_____________ TestDBManagerCoverage.test_save_vacancy_comprehensive _____________

self = <tests.test_db_manager_coverage.TestDBManagerCoverage object at 0x7f162fcc6c10>
db_manager = <src.storage.db_manager.DBManager object at 0x7f162fceef90>
mock_connection = (<Mock id='139733268045840'>, <Mock name='mock.cursor()' id='139733273572752'>)

    def test_save_vacancy_comprehensive(self, db_manager, mock_connection):
        """Тест комплексного сохранения вакансии"""
        if not DB_MANAGER_AVAILABLE:
            return
    
        mock_conn, mock_cursor = mock_connection
        db_manager.connection = mock_conn
    
        vacancy_data = {
            'vacancy_id': 'vac123',
            'title': 'Senior Python Developer',
            'description': 'Exciting opportunity for experienced developer',
            'company_id': 1,
            'salary_from': 150000,
            'salary_to': 200000,
            'salary_currency': 'RUR',
            'experience': 'between3and6',
            'employment': 'full',
            'schedule': 'fullDay',
            'area': 'Moscow',
            'published_at': '2024-01-15T10:00:00',
            'url': 'https://hh.ru/vacancy/123',
            'source': 'hh'
        }
    
        # Используем реальный метод add_vacancy_batch_optimized
        with patch.object(db_manager, '_get_connection', return_value=mock_conn):
            mock_conn.__enter__ = Mock(return_value=mock_conn)
            mock_conn.__exit__ = Mock(return_value=None)
            mock_conn.cursor.return_value.__enter__ = Mock(return_value=mock_cursor)
            mock_conn.cursor.return_value.__exit__ = Mock(return_value=None)
    
>           db_manager.add_vacancy_batch_optimized([vacancy_data])
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E           AttributeError: 'DBManager' object has no attribute 'add_vacancy_batch_optimized'

tests/test_db_manager_coverage.py:146: AttributeError
________________ TestDBManagerCoverage.test_bulk_save_operations ________________

self = <tests.test_db_manager_coverage.TestDBManagerCoverage object at 0x7f162fcc73d0>
db_manager = <src.storage.db_manager.DBManager object at 0x7f162fce1ad0>
mock_connection = (<Mock id='139733268044944'>, <Mock name='mock.cursor()' id='139733268046288'>)

    def test_bulk_save_operations(self, db_manager, mock_connection):
        """Тест массовых операций сохранения"""
        if not DB_MANAGER_AVAILABLE:
            return
    
        mock_conn, mock_cursor = mock_connection
        db_manager.connection = mock_conn
    
        # Массовое сохранение компаний
        companies = [
            {'id': 'comp1', 'name': 'Company 1'},
            {'id': 'comp2', 'name': 'Company 2'},
            {'id': 'comp3', 'name': 'Company 3'}
        ]
    
        # Используем реальный метод populate_companies_table для массового сохранения
        with patch.object(db_manager, '_get_connection', return_value=mock_conn):
            mock_conn.__enter__ = Mock(return_value=mock_conn)
            mock_conn.__exit__ = Mock(return_value=None)
            mock_conn.cursor.return_value.__enter__ = Mock(return_value=mock_cursor)
            mock_conn.cursor.return_value.__exit__ = Mock(return_value=None)
            mock_cursor.fetchone.return_value = [True]
            mock_cursor.fetchall.return_value = []
    
            db_manager.populate_companies_table()
    
        # Массовое сохранение вакансий
        vacancies = [
            {'id': 'vac1', 'title': 'Job 1', 'company_id': 'comp1'},
            {'id': 'vac2', 'title': 'Job 2', 'company_id': 'comp2'},
            {'id': 'vac3', 'title': 'Job 3', 'company_id': 'comp3'}
        ]
    
>       db_manager.save_vacancies(vacancies)
        ^^^^^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: 'DBManager' object has no attribute 'save_vacancies'

tests/test_db_manager_coverage.py:182: AttributeError
__________________ TestDBManagerCoverage.test_query_operations __________________

self = <Mock name='mock.cursor().execute' id='139733268601424'>

    def assert_called(self):
        """assert that the mock was called at least once
        """
        if self.call_count == 0:
            msg = ("Expected '%s' to have been called." %
                   (self._mock_name or 'mock'))
>           raise AssertionError(msg)
E           AssertionError: Expected 'execute' to have been called.

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:908: AssertionError

During handling of the above exception, another exception occurred:

self = <tests.test_db_manager_coverage.TestDBManagerCoverage object at 0x7f162fcc7b90>
db_manager = <src.storage.db_manager.DBManager object at 0x7f162fcfd550>
mock_connection = (<Mock id='139733294614608'>, <Mock name='mock.cursor()' id='139733294612880'>)

    def test_query_operations(self, db_manager, mock_connection):
        """Тест операций запросов"""
        if not DB_MANAGER_AVAILABLE:
            return
    
        mock_conn, mock_cursor = mock_connection
        db_manager.connection = mock_conn
    
        # Получение всех вакансий
        mock_cursor.fetchall.return_value = [
            ('vac1', 'Python Developer', 'Great job', 'comp1', 100000, 150000, 'RUR'),
            ('vac2', 'Java Developer', 'Another job', 'comp2', 120000, 180000, 'RUR')
        ]
    
        vacancies = db_manager.get_all_vacancies()
>       mock_cursor.execute.assert_called()
E       AssertionError: Expected 'execute' to have been called.

tests/test_db_manager_coverage.py:202: AssertionError
------------------------------- Captured log call -------------------------------
WARNING  src.storage.db_manager:db_manager.py:204 Поле company_id имеет неправильный тип <MagicMock name='mock.__enter__().cursor().__enter__().fetchone().__getitem__()' id='139733266722960'>, исправляем...
________________ TestDBManagerCoverage.test_search_functionality ________________

self = <Mock name='mock.cursor().execute' id='139733268159248'>

    def assert_called(self):
        """assert that the mock was called at least once
        """
        if self.call_count == 0:
            msg = ("Expected '%s' to have been called." %
                   (self._mock_name or 'mock'))
>           raise AssertionError(msg)
E           AssertionError: Expected 'execute' to have been called.

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:908: AssertionError

During handling of the above exception, another exception occurred:

self = <tests.test_db_manager_coverage.TestDBManagerCoverage object at 0x7f162fccc390>
db_manager = <src.storage.db_manager.DBManager object at 0x7f162fcc4ed0>
mock_connection = (<Mock id='139733267928784'>, <Mock name='mock.cursor()' id='139733267929232'>)

    def test_search_functionality(self, db_manager, mock_connection):
        """Тест функций поиска"""
        if not DB_MANAGER_AVAILABLE:
            return
    
        mock_conn, mock_cursor = mock_connection
        db_manager.connection = mock_conn
    
        mock_cursor.fetchall.return_value = []
    
        # Поиск по ключевому слову
        # Поиск по ключевому слову (используем реальный метод)
        results = db_manager.get_vacancies_with_keyword('python')
>       mock_cursor.execute.assert_called()
E       AssertionError: Expected 'execute' to have been called.

tests/test_db_manager_coverage.py:218: AssertionError
------------------------------- Captured log call -------------------------------
WARNING  src.storage.db_manager:db_manager.py:204 Поле company_id имеет неправильный тип <MagicMock name='mock.__enter__().cursor().__enter__().fetchone().__getitem__()' id='139733266738896'>, исправляем...
_________________ TestDBManagerCoverage.test_filter_operations __________________

self = <tests.test_db_manager_coverage.TestDBManagerCoverage object at 0x7f162fcccb50>
db_manager = <src.storage.db_manager.DBManager object at 0x7f162fe488d0>
mock_connection = (<Mock id='139733269224336'>, <Mock name='mock.cursor()' id='139733269229072'>)

    def test_filter_operations(self, db_manager, mock_connection):
        """Тест операций фильтрации"""
        if not DB_MANAGER_AVAILABLE:
            return
    
        mock_conn, mock_cursor = mock_connection
        db_manager.connection = mock_conn
    
        mock_cursor.fetchall.return_value = []
    
        # Получение вакансий по компании (реальный метод)
>       results = db_manager.get_vacancies_by_company(1)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: 'DBManager' object has no attribute 'get_vacancies_by_company'

tests/test_db_manager_coverage.py:240: AttributeError
_______________ TestDBManagerCoverage.test_aggregation_operations _______________

self = <Mock name='mock.cursor().execute' id='139733268552784'>

    def assert_called(self):
        """assert that the mock was called at least once
        """
        if self.call_count == 0:
            msg = ("Expected '%s' to have been called." %
                   (self._mock_name or 'mock'))
>           raise AssertionError(msg)
E           AssertionError: Expected 'execute' to have been called.

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:908: AssertionError

During handling of the above exception, another exception occurred:

self = <tests.test_db_manager_coverage.TestDBManagerCoverage object at 0x7f162fccd2d0>
db_manager = <src.storage.db_manager.DBManager object at 0x7f162fe31d10>
mock_connection = (<Mock id='139733269421392'>, <Mock name='mock.cursor()' id='139733269421904'>)

    def test_aggregation_operations(self, db_manager, mock_connection):
        """Тест операций агрегации"""
        if not DB_MANAGER_AVAILABLE:
            return
    
        mock_conn, mock_cursor = mock_connection
        db_manager.connection = mock_conn
    
        # Получение статистики базы данных (реальный метод)
        mock_cursor.fetchone.return_value = {'total_vacancies': 150, 'total_companies': 10}
        stats = db_manager.get_database_stats()
        assert isinstance(stats, dict)
>       mock_cursor.execute.assert_called()
E       AssertionError: Expected 'execute' to have been called.

tests/test_db_manager_coverage.py:263: AssertionError
_________________ TestDBManagerCoverage.test_update_operations __________________

self = <tests.test_db_manager_coverage.TestDBManagerCoverage object at 0x7f162fccda90>
db_manager = <src.storage.db_manager.DBManager object at 0x7f162fe4afd0>
mock_connection = (<Mock id='139733269423120'>, <Mock name='mock.cursor()' id='139733288048656'>)

    def test_update_operations(self, db_manager, mock_connection):
        """Тест операций обновления"""
        if not DB_MANAGER_AVAILABLE:
            return
    
        mock_conn, mock_cursor = mock_connection
        db_manager.connection = mock_conn
    
        # Обновление вакансии
        update_data = {
            'title': 'Senior Python Developer',
            'salary_from': 180000,
            'salary_to': 250000
        }
    
        # Обновление через пакетную оптимизацию (используем доступный метод)
>       updated_vacancy = dict(vacancy_data, **update_data)
                               ^^^^^^^^^^^^
E       NameError: name 'vacancy_data' is not defined

tests/test_db_manager_coverage.py:296: NameError
_________________ TestDBManagerCoverage.test_delete_operations __________________

self = <tests.test_db_manager_coverage.TestDBManagerCoverage object at 0x7f162fcce250>
db_manager = <src.storage.db_manager.DBManager object at 0x7f162fbca6d0>
mock_connection = (<Mock id='139733266897616'>, <Mock name='mock.cursor()' id='139733266899984'>)

    def test_delete_operations(self, db_manager, mock_connection):
        """Тест операций удаления"""
        if not DB_MANAGER_AVAILABLE:
            return
    
        mock_conn, mock_cursor = mock_connection
        db_manager.connection = mock_conn
    
        # Удаление отдельной вакансии
        # Используем реальный метод delete_vacancy
        if hasattr(db_manager, 'delete_vacancy'):
            db_manager.delete_vacancy('vac123')
        else:
            # Используем доступный метод delete_all_vacancies для теста
>           db_manager.delete_all_vacancies()
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E           AttributeError: 'DBManager' object has no attribute 'delete_all_vacancies'

tests/test_db_manager_coverage.py:323: AttributeError
_______________ TestDBManagerCoverage.test_transaction_management _______________

self = <tests.test_db_manager_coverage.TestDBManagerCoverage object at 0x7f162fccea50>
db_manager = <src.storage.db_manager.DBManager object at 0x7f162fe32410>
mock_connection = (<Mock id='139733266573648'>, <Mock name='mock.cursor()' id='139733266575440'>)

    def test_transaction_management(self, db_manager, mock_connection):
        """Тест управления транзакциями"""
        if not DB_MANAGER_AVAILABLE:
            return
    
        mock_conn, mock_cursor = mock_connection
        db_manager.connection = mock_conn
    
        # Начало транзакции
>       db_manager.begin_transaction()
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: 'DBManager' object has no attribute 'begin_transaction'

tests/test_db_manager_coverage.py:343: AttributeError
============================ short test summary info ============================
FAILED tests/test_db_manager_coverage.py::TestDBManagerCoverage::test_save_vacancy_comprehensive - AttributeError: 'DBManager' object has no attribute 'add_vacancy_batch_optim...
FAILED tests/test_db_manager_coverage.py::TestDBManagerCoverage::test_bulk_save_operations - AttributeError: 'DBManager' object has no attribute 'save_vacancies'
FAILED tests/test_db_manager_coverage.py::TestDBManagerCoverage::test_query_operations - AssertionError: Expected 'execute' to have been called.
FAILED tests/test_db_manager_coverage.py::TestDBManagerCoverage::test_search_functionality - AssertionError: Expected 'execute' to have been called.
FAILED tests/test_db_manager_coverage.py::TestDBManagerCoverage::test_filter_operations - AttributeError: 'DBManager' object has no attribute 'get_vacancies_by_company'
FAILED tests/test_db_manager_coverage.py::TestDBManagerCoverage::test_aggregation_operations - AssertionError: Expected 'execute' to have been called.
FAILED tests/test_db_manager_coverage.py::TestDBManagerCoverage::test_update_operations - NameError: name 'vacancy_data' is not defined
FAILED tests/test_db_manager_coverage.py::TestDBManagerCoverage::test_delete_operations - AttributeError: 'DBManager' object has no attribute 'delete_all_vacancies'
FAILED tests/test_db_manager_coverage.py::TestDBManagerCoverage::test_transaction_management - AttributeError: 'DBManager' object has no attribute 'begin_transaction'
========================== 9 failed, 7 passed in 0.44s ==========================
~/workspace$ 