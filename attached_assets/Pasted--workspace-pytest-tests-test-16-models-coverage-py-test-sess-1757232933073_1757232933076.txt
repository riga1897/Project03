~/workspace$ pytest tests/test_16_models_coverage.py 
=================================== test session starts ====================================
platform linux -- Python 3.11.13, pytest-8.4.2, pluggy-1.6.0
rootdir: /home/runner/workspace
configfile: pyproject.toml
plugins: cov-6.2.1, mock-3.15.0
collected 68 items                                                                         

tests/test_16_models_coverage.py ..F..........F.......F.......F.......FFFFFFFFF...FF [ 75%]
FFFFFFFFFFFF.FF.F                                                                    [100%]

========================================= FAILURES =========================================
_____________________ TestEmployer.test_employer_name_validation_empty _____________________

self = <tests.test_16_models_coverage.TestEmployer object at 0x7f37ea802810>

    def test_employer_name_validation_empty(self):
        """Покрытие валидации пустого имени"""
        # Пустое имя должно вызывать ValidationError
        with pytest.raises(ValidationError):
            Employer(name="")
    
>       with pytest.raises(ValidationError):
E       Failed: DID NOT RAISE <class 'pydantic_core._pydantic_core.ValidationError'>

tests/test_16_models_coverage.py:57: Failed
___________________ TestExperience.test_experience_name_validation_empty ___________________

self = <tests.test_16_models_coverage.TestExperience object at 0x7f37ea812490>

    def test_experience_name_validation_empty(self):
        """Покрытие валидации пустого имени"""
        # Пустое имя должно вызывать ValidationError
>       with pytest.raises(ValidationError):
E       Failed: DID NOT RAISE <class 'pydantic_core._pydantic_core.ValidationError'>

tests/test_16_models_coverage.py:145: Failed
___________________ TestEmployment.test_employment_name_validation_empty ___________________

self = <tests.test_16_models_coverage.TestEmployment object at 0x7f37ea81d710>

    def test_employment_name_validation_empty(self):
        """Покрытие валидации пустого имени"""
>       with pytest.raises(ValidationError):
E       Failed: DID NOT RAISE <class 'pydantic_core._pydantic_core.ValidationError'>

tests/test_16_models_coverage.py:207: Failed
_____________________ TestSchedule.test_schedule_name_validation_empty _____________________

self = <tests.test_16_models_coverage.TestSchedule object at 0x7f37ea81db10>

    def test_schedule_name_validation_empty(self):
        """Покрытие валидации пустого имени"""
>       with pytest.raises(ValidationError):
E       Failed: DID NOT RAISE <class 'pydantic_core._pydantic_core.ValidationError'>

tests/test_16_models_coverage.py:269: Failed
_____________________ TestVacancy.test_vacancy_title_validation_empty ______________________

self = <tests.test_16_models_coverage.TestVacancy object at 0x7f37ea825450>

    def test_vacancy_title_validation_empty(self):
        """Покрытие валидации пустого заголовка"""
>       vacancy = Vacancy(
            title="",
            employer=Employer(name="Test")
        )
E       pydantic_core._pydantic_core.ValidationError: 3 validation errors for Vacancy
E       vacancy_id
E         Field required [type=missing, input_value={'title': '', 'employer':...ne, alternate_url=None)}, input_type=dict]
E           For further information visit https://errors.pydantic.dev/2.11/v/missing
E       name
E         Field required [type=missing, input_value={'title': '', 'employer':...ne, alternate_url=None)}, input_type=dict]
E           For further information visit https://errors.pydantic.dev/2.11/v/missing
E       alternate_url
E         Field required [type=missing, input_value={'title': '', 'employer':...ne, alternate_url=None)}, input_type=dict]
E           For further information visit https://errors.pydantic.dev/2.11/v/missing

tests/test_16_models_coverage.py:363: ValidationError
_____________________ TestVacancy.test_vacancy_title_validation_strip ______________________

self = <tests.test_16_models_coverage.TestVacancy object at 0x7f37ea825a90>

    def test_vacancy_title_validation_strip(self):
        """Покрытие удаления пробелов из заголовка"""
>       vacancy = Vacancy(
            title="  Developer Position  ",
            employer=Employer(name="Test")
        )
E       pydantic_core._pydantic_core.ValidationError: 3 validation errors for Vacancy
E       vacancy_id
E         Field required [type=missing, input_value={'title': '  Developer Po...ne, alternate_url=None)}, input_type=dict]
E           For further information visit https://errors.pydantic.dev/2.11/v/missing
E       name
E         Field required [type=missing, input_value={'title': '  Developer Po...ne, alternate_url=None)}, input_type=dict]
E           For further information visit https://errors.pydantic.dev/2.11/v/missing
E       alternate_url
E         Field required [type=missing, input_value={'title': '  Developer Po...ne, alternate_url=None)}, input_type=dict]
E           For further information visit https://errors.pydantic.dev/2.11/v/missing

tests/test_16_models_coverage.py:377: ValidationError
___________________ TestVacancy.test_vacancy_url_validation_add_protocol ___________________

self = <tests.test_16_models_coverage.TestVacancy object at 0x7f37ea826090>

    def test_vacancy_url_validation_add_protocol(self):
        """Покрытие добавления протокола к URL"""
>       vacancy = Vacancy(
            title="Test",
            employer=Employer(name="Test"),
            url="job-site.com/vacancy/123"
        )
E       pydantic_core._pydantic_core.ValidationError: 3 validation errors for Vacancy
E       vacancy_id
E         Field required [type=missing, input_value={'title': 'Test', 'employ...b-site.com/vacancy/123'}, input_type=dict]
E           For further information visit https://errors.pydantic.dev/2.11/v/missing
E       name
E         Field required [type=missing, input_value={'title': 'Test', 'employ...b-site.com/vacancy/123'}, input_type=dict]
E           For further information visit https://errors.pydantic.dev/2.11/v/missing
E       alternate_url
E         Field required [type=missing, input_value={'title': 'Test', 'employ...b-site.com/vacancy/123'}, input_type=dict]
E           For further information visit https://errors.pydantic.dev/2.11/v/missing

tests/test_16_models_coverage.py:385: ValidationError
________________ TestVacancy.test_vacancy_url_validation_existing_protocol _________________

self = <tests.test_16_models_coverage.TestVacancy object at 0x7f37ea826690>

    def test_vacancy_url_validation_existing_protocol(self):
        """Покрытие URL с существующим протоколом"""
>       vacancy = Vacancy(
            title="Test",
            employer=Employer(name="Test"),
            url="http://job-site.com/vacancy/123"
        )
E       pydantic_core._pydantic_core.ValidationError: 3 validation errors for Vacancy
E       vacancy_id
E         Field required [type=missing, input_value={'title': 'Test', 'employ...b-site.com/vacancy/123'}, input_type=dict]
E           For further information visit https://errors.pydantic.dev/2.11/v/missing
E       name
E         Field required [type=missing, input_value={'title': 'Test', 'employ...b-site.com/vacancy/123'}, input_type=dict]
E           For further information visit https://errors.pydantic.dev/2.11/v/missing
E       alternate_url
E         Field required [type=missing, input_value={'title': 'Test', 'employ...b-site.com/vacancy/123'}, input_type=dict]
E           For further information visit https://errors.pydantic.dev/2.11/v/missing

tests/test_16_models_coverage.py:394: ValidationError
_______________________ TestVacancy.test_vacancy_url_validation_none _______________________

self = <tests.test_16_models_coverage.TestVacancy object at 0x7f37ea826c90>

    def test_vacancy_url_validation_none(self):
        """Покрытие None URL"""
>       vacancy = Vacancy(
            title="Test",
            employer=Employer(name="Test"),
            url=None
        )
E       pydantic_core._pydantic_core.ValidationError: 3 validation errors for Vacancy
E       vacancy_id
E         Field required [type=missing, input_value={'title': 'Test', 'employ..._url=None), 'url': None}, input_type=dict]
E           For further information visit https://errors.pydantic.dev/2.11/v/missing
E       name
E         Field required [type=missing, input_value={'title': 'Test', 'employ..._url=None), 'url': None}, input_type=dict]
E           For further information visit https://errors.pydantic.dev/2.11/v/missing
E       alternate_url
E         Field required [type=missing, input_value={'title': 'Test', 'employ..._url=None), 'url': None}, input_type=dict]
E           For further information visit https://errors.pydantic.dev/2.11/v/missing

tests/test_16_models_coverage.py:403: ValidationError
______________________ TestVacancy.test_vacancy_compatibility_methods ______________________

self = <tests.test_16_models_coverage.TestVacancy object at 0x7f37ea827290>

    def test_vacancy_compatibility_methods(self):
        """Покрытие методов совместимости"""
        employer = Employer(name="Test Company")
>       vacancy = Vacancy(
            title="Test Job",
            employer=employer,
            url="https://test.com",
            description="Test description",
            area="Moscow"
        )
E       pydantic_core._pydantic_core.ValidationError: 3 validation errors for Vacancy
E       vacancy_id
E         Field required [type=missing, input_value={'title': 'Test Job', 'em...tion', 'area': 'Moscow'}, input_type=dict]
E           For further information visit https://errors.pydantic.dev/2.11/v/missing
E       name
E         Field required [type=missing, input_value={'title': 'Test Job', 'em...tion', 'area': 'Moscow'}, input_type=dict]
E           For further information visit https://errors.pydantic.dev/2.11/v/missing
E       alternate_url
E         Field required [type=missing, input_value={'title': 'Test Job', 'em...tion', 'area': 'Moscow'}, input_type=dict]
E           For further information visit https://errors.pydantic.dev/2.11/v/missing

tests/test_16_models_coverage.py:413: ValidationError
_____________________________ TestVacancy.test_vacancy_to_dict _____________________________

self = <tests.test_16_models_coverage.TestVacancy object at 0x7f37ea827890>

    def test_vacancy_to_dict(self):
        """Покрытие метода to_dict"""
>       vacancy = Vacancy(
            title="Test",
            employer=Employer(name="Test Company")
        )
E       pydantic_core._pydantic_core.ValidationError: 3 validation errors for Vacancy
E       vacancy_id
E         Field required [type=missing, input_value={'title': 'Test', 'employ...ne, alternate_url=None)}, input_type=dict]
E           For further information visit https://errors.pydantic.dev/2.11/v/missing
E       name
E         Field required [type=missing, input_value={'title': 'Test', 'employ...ne, alternate_url=None)}, input_type=dict]
E           For further information visit https://errors.pydantic.dev/2.11/v/missing
E       alternate_url
E         Field required [type=missing, input_value={'title': 'Test', 'employ...ne, alternate_url=None)}, input_type=dict]
E           For further information visit https://errors.pydantic.dev/2.11/v/missing

tests/test_16_models_coverage.py:429: ValidationError
____________________________ TestVacancy.test_vacancy_from_dict ____________________________

self = <tests.test_16_models_coverage.TestVacancy object at 0x7f37ea827e50>

    def test_vacancy_from_dict(self):
        """Покрытие метода from_dict"""
        data = {
            "title": "Dict Vacancy",
            "employer": {"name": "Dict Company"},
            "url": "https://dict.com"
        }
>       vacancy = Vacancy.from_dict(data)
                  ^^^^^^^^^^^^^^^^^^^^^^^

tests/test_16_models_coverage.py:447: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'src.vacancies.models.Vacancy'>
data = {'employer': {'name': 'Dict Company'}, 'title': 'Dict Vacancy', 'url': 'https://dict.com'}

    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> "Vacancy":
        """Создание объекта из словаря"""
        # Обрабатываем вложенные объекты
        processed_data = data.copy()
    
        # ИСПРАВЛЕНО: Правильный маппинг для Pydantic v2 с alias
        # Если данные приходят с API ключами, сохраняем их в правильных alias именах
        # НЕ удаляем исходные ключи, а добавляем нужные alias ключи
        if "id" in processed_data and "vacancy_id" not in processed_data:
            processed_data["vacancy_id"] = processed_data["id"]
        # Для Pydantic v2 с alias="name" нужно оставить данные в ключе 'name'
        # Аналогично для alternate_url
    
        # Employer
        if "employer" in processed_data and isinstance(processed_data["employer"], dict):
            processed_data["employer"] = Employer(**processed_data["employer"])
    
        # Experience
        if "experience" in processed_data and isinstance(processed_data["experience"], dict):
            processed_data["experience"] = Experience(**processed_data["experience"])
    
        # Employment
        if "employment" in processed_data and isinstance(processed_data["employment"], dict):
            processed_data["employment"] = Employment(**processed_data["employment"])
    
        # Schedule
        if "schedule" in processed_data and isinstance(processed_data["schedule"], dict):
            processed_data["schedule"] = Schedule(**processed_data["schedule"])
    
>       return cls(**processed_data)
               ^^^^^^^^^^^^^^^^^^^^^
E       pydantic_core._pydantic_core.ValidationError: 3 validation errors for Vacancy
E       vacancy_id
E         Field required [type=missing, input_value={'title': 'Dict Vacancy',...rl': 'https://dict.com'}, input_type=dict]
E           For further information visit https://errors.pydantic.dev/2.11/v/missing
E       name
E         Field required [type=missing, input_value={'title': 'Dict Vacancy',...rl': 'https://dict.com'}, input_type=dict]
E           For further information visit https://errors.pydantic.dev/2.11/v/missing
E       alternate_url
E         Field required [type=missing, input_value={'title': 'Dict Vacancy',...rl': 'https://dict.com'}, input_type=dict]
E           For further information visit https://errors.pydantic.dev/2.11/v/missing

src/vacancies/models.py:403: ValidationError
___________________________ TestVacancy.test_vacancy_get_method ____________________________

self = <tests.test_16_models_coverage.TestVacancy object at 0x7f37ea82c490>

    def test_vacancy_get_method(self):
        """Покрытие dictionary-like доступа"""
>       vacancy = Vacancy(
            title="Test",
            employer=Employer(name="Test"),
            area="SPB"
        )
E       pydantic_core._pydantic_core.ValidationError: 3 validation errors for Vacancy
E       vacancy_id
E         Field required [type=missing, input_value={'title': 'Test', 'employ...rl=None), 'area': 'SPB'}, input_type=dict]
E           For further information visit https://errors.pydantic.dev/2.11/v/missing
E       name
E         Field required [type=missing, input_value={'title': 'Test', 'employ...rl=None), 'area': 'SPB'}, input_type=dict]
E           For further information visit https://errors.pydantic.dev/2.11/v/missing
E       alternate_url
E         Field required [type=missing, input_value={'title': 'Test', 'employ...rl=None), 'area': 'SPB'}, input_type=dict]
E           For further information visit https://errors.pydantic.dev/2.11/v/missing

tests/test_16_models_coverage.py:455: ValidationError
__________________ TestVacancyFactory.test_factory_create_experience_dict __________________

self = <tests.test_16_models_coverage.TestVacancyFactory object at 0x7f37ea9ee510>

    def test_factory_create_experience_dict(self):
        """Покрытие создания опыта из словаря"""
        exp_data = {"name": "Middle", "id": "mid"}
>       experience = VacancyFactory._create_experience(exp_data)
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: type object 'VacancyFactory' has no attribute '_create_experience'

tests/test_16_models_coverage.py:532: AttributeError
_________________ TestVacancyFactory.test_factory_create_experience_string _________________

self = <tests.test_16_models_coverage.TestVacancyFactory object at 0x7f37ea9ed790>

    def test_factory_create_experience_string(self):
        """Покрытие создания опыта из строки"""
>       experience = VacancyFactory._create_experience("Без опыта")
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: type object 'VacancyFactory' has no attribute '_create_experience'

tests/test_16_models_coverage.py:540: AttributeError
__________________ TestVacancyFactory.test_factory_create_experience_none __________________

self = <tests.test_16_models_coverage.TestVacancyFactory object at 0x7f37ea9ece50>

    def test_factory_create_experience_none(self):
        """Покрытие создания опыта из None"""
>       experience = VacancyFactory._create_experience(None)
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: type object 'VacancyFactory' has no attribute '_create_experience'

tests/test_16_models_coverage.py:547: AttributeError
__________________ TestVacancyFactory.test_factory_create_employment_dict __________________

self = <tests.test_16_models_coverage.TestVacancyFactory object at 0x7f37ea9edb90>

    def test_factory_create_employment_dict(self):
        """Покрытие создания типа занятости из словаря"""
        emp_data = {"name": "Частичная", "id": "part"}
>       employment = VacancyFactory._create_employment(emp_data)
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: type object 'VacancyFactory' has no attribute '_create_employment'

tests/test_16_models_coverage.py:554: AttributeError
_________________ TestVacancyFactory.test_factory_create_employment_string _________________

self = <tests.test_16_models_coverage.TestVacancyFactory object at 0x7f37ea9ef2d0>

    def test_factory_create_employment_string(self):
        """Покрытие создания типа занятости из строки"""
>       employment = VacancyFactory._create_employment("Стажировка")
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: type object 'VacancyFactory' has no attribute '_create_employment'

tests/test_16_models_coverage.py:562: AttributeError
__________________ TestVacancyFactory.test_factory_create_employment_none __________________

self = <tests.test_16_models_coverage.TestVacancyFactory object at 0x7f37ea9a6750>

    def test_factory_create_employment_none(self):
        """Покрытие создания типа занятости из None"""
>       employment = VacancyFactory._create_employment(None)
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: type object 'VacancyFactory' has no attribute '_create_employment'

tests/test_16_models_coverage.py:569: AttributeError
___________________ TestVacancyFactory.test_factory_create_schedule_dict ___________________

self = <tests.test_16_models_coverage.TestVacancyFactory object at 0x7f37ea9dbe50>

    def test_factory_create_schedule_dict(self):
        """Покрытие создания графика из словаря"""
        sch_data = {"name": "Удаленно", "id": "remote"}
>       schedule = VacancyFactory._create_schedule(sch_data)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: type object 'VacancyFactory' has no attribute '_create_schedule'

tests/test_16_models_coverage.py:576: AttributeError
__________________ TestVacancyFactory.test_factory_create_schedule_string __________________

self = <tests.test_16_models_coverage.TestVacancyFactory object at 0x7f37ea9dac50>

    def test_factory_create_schedule_string(self):
        """Покрытие создания графика из строки"""
>       schedule = VacancyFactory._create_schedule("Вахта")
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: type object 'VacancyFactory' has no attribute '_create_schedule'

tests/test_16_models_coverage.py:584: AttributeError
___________________ TestVacancyFactory.test_factory_create_schedule_none ___________________

self = <tests.test_16_models_coverage.TestVacancyFactory object at 0x7f37ea9d8a10>

    def test_factory_create_schedule_none(self):
        """Покрытие создания графика из None"""
>       schedule = VacancyFactory._create_schedule(None)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: type object 'VacancyFactory' has no attribute '_create_schedule'

tests/test_16_models_coverage.py:591: AttributeError
___________________ TestVacancyFactory.test_factory_create_salary_valid ____________________

self = <tests.test_16_models_coverage.TestVacancyFactory object at 0x7f37ea9d8090>

    def test_factory_create_salary_valid(self):
        """Покрытие создания зарплаты из валидного словаря"""
        salary_data = {"from": 50000, "to": 80000, "currency": "USD"}
>       salary = VacancyFactory._create_salary(salary_data)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: type object 'VacancyFactory' has no attribute '_create_salary'

tests/test_16_models_coverage.py:598: AttributeError
__________________ TestVacancyFactory.test_factory_create_salary_invalid ___________________

self = <tests.test_16_models_coverage.TestVacancyFactory object at 0x7f37ea9d9fd0>

    def test_factory_create_salary_invalid(self):
        """Покрытие создания зарплаты из невалидного словаря"""
        # Невалидные данные
>       salary = VacancyFactory._create_salary({"invalid": "data"})
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: type object 'VacancyFactory' has no attribute '_create_salary'

tests/test_16_models_coverage.py:608: AttributeError
___________________ TestVacancyFactory.test_factory_extract_description ____________________

self = <tests.test_16_models_coverage.TestVacancyFactory object at 0x7f37ea9daf50>

    def test_factory_extract_description(self):
        """Покрытие извлечения описания"""
        data_with_snippet = {
            "snippet": {
                "requirement": "Python",
                "responsibility": "Development"
            }
        }
    
>       description = VacancyFactory._extract_description(data_with_snippet)
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: type object 'VacancyFactory' has no attribute '_extract_description'

tests/test_16_models_coverage.py:628: AttributeError
_______________________ TestVacancyFactory.test_factory_extract_area _______________________

self = <tests.test_16_models_coverage.TestVacancyFactory object at 0x7f37ea9db950>

    def test_factory_extract_area(self):
        """Покрытие извлечения области"""
        data_with_area = {"area": {"name": "Новосибирск"}}
>       area = VacancyFactory._extract_area(data_with_area)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: type object 'VacancyFactory' has no attribute '_extract_area'

tests/test_16_models_coverage.py:639: AttributeError
_________________ TestVacancyFactory.test_factory_with_exception_handling __________________

self = <tests.test_16_models_coverage.TestVacancyFactory object at 0x7f37ea9d8990>

    def test_factory_with_exception_handling(self):
        """Покрытие обработки исключений в фабрике"""
        # Данные которые могут вызвать ошибку
        problematic_data = {
            "name": "Test",
            "employer": {"name": "Test"},
            "salary": {"from": "invalid_number"}  # Невалидная зарплата
        }
    
        # Фабрика должна обработать исключение и создать вакансию
>       vacancy = VacancyFactory.create_from_dict(problematic_data)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: type object 'VacancyFactory' has no attribute 'create_from_dict'

tests/test_16_models_coverage.py:656: AttributeError
___________________ TestModelValidation.test_field_assignment_validation ___________________

self = <tests.test_16_models_coverage.TestModelValidation object at 0x7f37ea9e7010>

    def test_field_assignment_validation(self):
        """Покрытие validate_assignment=True"""
        employer = Employer(name="Test")
    
        # Валидное присваивание
        employer.name = "New Name"
        assert employer.name == "New Name"
    
        # Присваивание пустого имени должно валидироваться
>       employer.name = ""
        ^^^^^^^^^^^^^

tests/test_16_models_coverage.py:689: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.pythonlibs/lib/python3.11/site-packages/pydantic/main.py:995: in __setattr__
    setattr_handler(self, name, value)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

model = Employer(name='New Name', id=None, trusted=None, alternate_url=None), name = 'name'
val = ''

>       'validate_assignment': lambda model, name, val: model.__pydantic_validator__.validate_assignment(model, name, val),  # pyright: ignore[reportAssignmentType]
                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        'private': _private_setattr_handler,
        'cached_property': lambda model, name, val: model.__dict__.__setitem__(name, val),
        'extra_known': lambda model, name, val: _object_setattr(model, name, val),
    }
E   pydantic_core._pydantic_core.ValidationError: 1 validation error for Employer
E   name
E     String should have at least 1 character [type=string_too_short, input_value='', input_type=str]
E       For further information visit https://errors.pydantic.dev/2.11/v/string_too_short

.pythonlibs/lib/python3.11/site-packages/pydantic/main.py:114: ValidationError
__________________________ TestEdgeCases.test_large_data_handling __________________________

self = <tests.test_16_models_coverage.TestEdgeCases object at 0x7f37ea9e5550>

    def test_large_data_handling(self):
        """Покрытие обработки больших объемов данных"""
        large_description = "A" * 10000  # Большое описание
    
>       vacancy = Vacancy(
            title="Large Data Test",
            employer=Employer(name="Big Company"),
            description=large_description
        )
E       pydantic_core._pydantic_core.ValidationError: 3 validation errors for Vacancy
E       vacancy_id
E         Field required [type=missing, input_value={'title': 'Large Data Tes...AAAAAAAAAAAAAAAAAAAAAA'}, input_type=dict]
E           For further information visit https://errors.pydantic.dev/2.11/v/missing
E       name
E         Field required [type=missing, input_value={'title': 'Large Data Tes...AAAAAAAAAAAAAAAAAAAAAA'}, input_type=dict]
E           For further information visit https://errors.pydantic.dev/2.11/v/missing
E       alternate_url
E         Field required [type=missing, input_value={'title': 'Large Data Tes...AAAAAAAAAAAAAAAAAAAAAA'}, input_type=dict]
E           For further information visit https://errors.pydantic.dev/2.11/v/missing

tests/test_16_models_coverage.py:700: ValidationError
__________________________ TestEdgeCases.test_nested_dict_access ___________________________

self = <tests.test_16_models_coverage.TestEdgeCases object at 0x7f37ea9e58d0>

    def test_nested_dict_access(self):
        """Покрытие глубокого доступа к вложенным данным"""
        complex_data = {
            "name": "Complex Job",
            "employer": {
                "name": "Nested Company",
                "nested": {
                    "deep": "value"
                }
            },
            "snippet": {
                "requirement": "Complex requirement",
                "responsibility": None  # None значение
            }
        }
    
>       vacancy = VacancyFactory.create_from_dict(complex_data)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: type object 'VacancyFactory' has no attribute 'create_from_dict'

tests/test_16_models_coverage.py:733: AttributeError
================================= short test summary info ==================================
FAILED tests/test_16_models_coverage.py::TestEmployer::test_employer_name_validation_empty - Failed: DID NOT RAISE <class 'pydantic_core._pydantic_core.ValidationError'>
FAILED tests/test_16_models_coverage.py::TestExperience::test_experience_name_validation_empty - Failed: DID NOT RAISE <class 'pydantic_core._pydantic_core.ValidationError'>
FAILED tests/test_16_models_coverage.py::TestEmployment::test_employment_name_validation_empty - Failed: DID NOT RAISE <class 'pydantic_core._pydantic_core.ValidationError'>
FAILED tests/test_16_models_coverage.py::TestSchedule::test_schedule_name_validation_empty - Failed: DID NOT RAISE <class 'pydantic_core._pydantic_core.ValidationError'>
FAILED tests/test_16_models_coverage.py::TestVacancy::test_vacancy_title_validation_empty - pydantic_core._pydantic_core.ValidationError: 3 validation errors for Vacancy
FAILED tests/test_16_models_coverage.py::TestVacancy::test_vacancy_title_validation_strip - pydantic_core._pydantic_core.ValidationError: 3 validation errors for Vacancy
FAILED tests/test_16_models_coverage.py::TestVacancy::test_vacancy_url_validation_add_protocol - pydantic_core._pydantic_core.ValidationError: 3 validation errors for Vacancy
FAILED tests/test_16_models_coverage.py::TestVacancy::test_vacancy_url_validation_existing_protocol - pydantic_core._pydantic_core.ValidationError: 3 validation errors for Vacancy
FAILED tests/test_16_models_coverage.py::TestVacancy::test_vacancy_url_validation_none - pydantic_core._pydantic_core.ValidationError: 3 validation errors for Vacancy
FAILED tests/test_16_models_coverage.py::TestVacancy::test_vacancy_compatibility_methods - pydantic_core._pydantic_core.ValidationError: 3 validation errors for Vacancy
FAILED tests/test_16_models_coverage.py::TestVacancy::test_vacancy_to_dict - pydantic_core._pydantic_core.ValidationError: 3 validation errors for Vacancy
FAILED tests/test_16_models_coverage.py::TestVacancy::test_vacancy_from_dict - pydantic_core._pydantic_core.ValidationError: 3 validation errors for Vacancy
FAILED tests/test_16_models_coverage.py::TestVacancy::test_vacancy_get_method - pydantic_core._pydantic_core.ValidationError: 3 validation errors for Vacancy
FAILED tests/test_16_models_coverage.py::TestVacancyFactory::test_factory_create_experience_dict - AttributeError: type object 'VacancyFactory' has no attribute '_create_experience'
FAILED tests/test_16_models_coverage.py::TestVacancyFactory::test_factory_create_experience_string - AttributeError: type object 'VacancyFactory' has no attribute '_create_experience'
FAILED tests/test_16_models_coverage.py::TestVacancyFactory::test_factory_create_experience_none - AttributeError: type object 'VacancyFactory' has no attribute '_create_experience'
FAILED tests/test_16_models_coverage.py::TestVacancyFactory::test_factory_create_employment_dict - AttributeError: type object 'VacancyFactory' has no attribute '_create_employment'
FAILED tests/test_16_models_coverage.py::TestVacancyFactory::test_factory_create_employment_string - AttributeError: type object 'VacancyFactory' has no attribute '_create_employment'
FAILED tests/test_16_models_coverage.py::TestVacancyFactory::test_factory_create_employment_none - AttributeError: type object 'VacancyFactory' has no attribute '_create_employment'
FAILED tests/test_16_models_coverage.py::TestVacancyFactory::test_factory_create_schedule_dict - AttributeError: type object 'VacancyFactory' has no attribute '_create_schedule'
FAILED tests/test_16_models_coverage.py::TestVacancyFactory::test_factory_create_schedule_string - AttributeError: type object 'VacancyFactory' has no attribute '_create_schedule'
FAILED tests/test_16_models_coverage.py::TestVacancyFactory::test_factory_create_schedule_none - AttributeError: type object 'VacancyFactory' has no attribute '_create_schedule'
FAILED tests/test_16_models_coverage.py::TestVacancyFactory::test_factory_create_salary_valid - AttributeError: type object 'VacancyFactory' has no attribute '_create_salary'
FAILED tests/test_16_models_coverage.py::TestVacancyFactory::test_factory_create_salary_invalid - AttributeError: type object 'VacancyFactory' has no attribute '_create_salary'
FAILED tests/test_16_models_coverage.py::TestVacancyFactory::test_factory_extract_description - AttributeError: type object 'VacancyFactory' has no attribute '_extract_description'
FAILED tests/test_16_models_coverage.py::TestVacancyFactory::test_factory_extract_area - AttributeError: type object 'VacancyFactory' has no attribute '_extract_area'
FAILED tests/test_16_models_coverage.py::TestVacancyFactory::test_factory_with_exception_handling - AttributeError: type object 'VacancyFactory' has no attribute 'create_from_dict'
FAILED tests/test_16_models_coverage.py::TestModelValidation::test_field_assignment_validation - pydantic_core._pydantic_core.ValidationError: 1 validation error for Employer
FAILED tests/test_16_models_coverage.py::TestEdgeCases::test_large_data_handling - pydantic_core._pydantic_core.ValidationError: 3 validation errors for Vacancy
FAILED tests/test_16_models_coverage.py::TestEdgeCases::test_nested_dict_access - AttributeError: type object 'VacancyFactory' has no attribute 'create_from_dict'
============================== 30 failed, 38 passed in 0.90s ===============================
~/workspace$ 