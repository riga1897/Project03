~/workspace$ pytest tests/test_12_user_interface_coverage.py
============================================ test session starts =============================================
platform linux -- Python 3.11.13, pytest-8.4.2, pluggy-1.6.0
rootdir: /home/runner/workspace
configfile: pyproject.toml
plugins: cov-6.2.1, mock-3.15.0
collected 15 items                                                                                           

tests/test_12_user_interface_coverage.py F............F.                                               [100%]

================================================== FAILURES ==================================================
____________________________________ TestUserInterface.test_main_success _____________________________________

self = <MagicMock name='StorageFactory.create_storage' id='140287725996624'>

    def assert_called_once(self):
        """assert that the mock was called only once.
        """
        if not self.call_count == 1:
            msg = ("Expected '%s' to have been called once. Called %s times.%s"
                   % (self._mock_name or 'mock',
                      self.call_count,
                      self._calls_repr()))
>           raise AssertionError(msg)
E           AssertionError: Expected 'create_storage' to have been called once. Called 0 times.

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:918: AssertionError

During handling of the above exception, another exception occurred:

self = <tests.test_12_user_interface_coverage.TestUserInterface object at 0x7f974b5cb790>
mock_db_manager_class = <MagicMock name='DBManager' id='140287725959632'>
mock_app_config = <MagicMock name='AppConfig' id='140287725981200'>
mock_storage_factory = <MagicMock name='StorageFactory' id='140287725981328'>
mock_ui = <MagicMock name='UserInterface' id='140287725986512'>

    @patch('src.user_interface.UserInterface')
    @patch('src.user_interface.StorageFactory')
    @patch('src.user_interface.AppConfig')
    @patch('src.storage.db_manager.DBManager')
    def test_main_success(self, mock_db_manager_class, mock_app_config,
                         mock_storage_factory, mock_ui):
        """Покрытие успешного выполнения main()."""
        # Настраиваем мок БД
        mock_db_manager = Mock()
        mock_db_manager._ensure_database_exists.return_value = None
        mock_db_manager.check_connection.return_value = True
        mock_db_manager.create_tables.return_value = None
        mock_db_manager.populate_companies_table.return_value = None
        mock_db_manager.get_companies_and_vacancies_count.return_value = [
            ("Company1", 10), ("Company2", 5)
        ]
        mock_db_manager_class.return_value = mock_db_manager
    
        # Настраиваем мок конфигурации
        mock_config = Mock()
        mock_config.default_storage_type = "postgres"
        mock_app_config.return_value = mock_config
    
        # Настраиваем мок хранилища
        mock_storage = Mock()
        mock_storage_factory.create_storage.return_value = mock_storage
    
        # Настраиваем мок UI
        mock_ui_instance = Mock()
        mock_ui.return_value = mock_ui_instance
    
        # Выполняем функцию
        src.user_interface.main()
    
        # Проверяем что компоненты инициализированы
        mock_db_manager_class.assert_called_once()
        # AppConfig не используется в новой версии main(), убираем проверку
>       mock_storage_factory.create_storage.assert_called_once()
E       AssertionError: Expected 'create_storage' to have been called once. Called 0 times.

tests/test_12_user_interface_coverage.py:60: AssertionError
-------------------------------------------- Captured stdout call --------------------------------------------
❌ Ошибка проверки таблиц: 'Mock' object does not support the context manager protocol
__________________________ TestUserInterfaceIntegration.test_full_integration_flow ___________________________

self = <Mock name='DBManager()._ensure_database_exists' id='140287713596240'>

    def assert_called_once(self):
        """assert that the mock was called only once.
        """
        if not self.call_count == 1:
            msg = ("Expected '%s' to have been called once. Called %s times.%s"
                   % (self._mock_name or 'mock',
                      self.call_count,
                      self._calls_repr()))
>           raise AssertionError(msg)
E           AssertionError: Expected '_ensure_database_exists' to have been called once. Called 0 times.

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:918: AssertionError

During handling of the above exception, another exception occurred:

self = <tests.test_12_user_interface_coverage.TestUserInterfaceIntegration object at 0x7f97481090d0>
mock_logger = <MagicMock name='logger' id='140287713656976'>
mock_ui = <MagicMock name='UserInterface' id='140287713666896'>
mock_storage_factory = <MagicMock name='StorageFactory' id='140287713584464'>
mock_app_config = <MagicMock name='AppConfig' id='140287713585040'>
mock_db_manager_class = <MagicMock name='DBManager' id='140287713607632'>
mock_logging_config = <MagicMock name='basicConfig' id='140287713601616'>

    @patch('src.user_interface.logging.basicConfig')
    @patch('src.storage.db_manager.DBManager')
    @patch('src.user_interface.AppConfig')
    @patch('src.user_interface.StorageFactory')
    @patch('src.user_interface.UserInterface')
    @patch('src.user_interface.logger')
    def test_full_integration_flow(self, mock_logger, mock_ui, mock_storage_factory,
                                  mock_app_config, mock_db_manager_class, mock_logging_config):
        """Покрытие полного потока интеграции компонентов."""
        # Настраиваем все моки для успешного сценария
        mock_db_manager = Mock()
        mock_db_manager._ensure_database_exists.return_value = None
        mock_db_manager.check_connection.return_value = True
        mock_db_manager.create_tables.return_value = None
        mock_db_manager.populate_companies_table.return_value = None
        mock_db_manager.get_companies_and_vacancies_count.return_value = [
            ("Company1", 10), ("Company2", 5), ("Company3", 3)
        ]
        mock_db_manager_class.return_value = mock_db_manager
    
        mock_config = Mock()
        mock_config.storage_type = "postgres"
        mock_app_config.return_value = mock_config
    
        mock_storage = Mock()
        mock_storage_factory.create_storage.return_value = mock_storage
    
        mock_ui_instance = Mock()
        mock_ui.return_value = mock_ui_instance
    
        # Выполняем функцию
        src.user_interface.main()
    
        # Проверяем порядок вызовов
        mock_logger.info.assert_called()
>       mock_db_manager._ensure_database_exists.assert_called_once()
E       AssertionError: Expected '_ensure_database_exists' to have been called once. Called 0 times.

tests/test_12_user_interface_coverage.py:345: AssertionError
-------------------------------------------- Captured stdout call --------------------------------------------
❌ Ошибка проверки таблиц: 'Mock' object does not support the context manager protocol
========================================== short test summary info ===========================================
FAILED tests/test_12_user_interface_coverage.py::TestUserInterface::test_main_success - AssertionError: Expected 'create_storage' to have been called once. Called 0 times.
FAILED tests/test_12_user_interface_coverage.py::TestUserInterfaceIntegration::test_full_integration_flow - AssertionError: Expected '_ensure_database_exists' to have been called once. Called 0 times.
=================