~/workspace$ pytest tests/test_console_interface.py
============================ test session starts =============================
platform linux -- Python 3.11.13, pytest-8.4.1, pluggy-1.6.0
rootdir: /home/runner/workspace/tests
configfile: pytest.ini
plugins: mock-3.14.1, cov-6.2.1
collected 24 items                                                           

tests/test_console_interface.py EFEEEEEEEEEEEEEE.EEEEEEE               [100%]

=================================== ERRORS ===================================
__________ ERROR at setup of TestUserInterface.test_initialization ___________

self = <tests.test_console_interface.TestUserInterface object at 0x7f8c4d333b10>
mock_storage = <Mock id='140240567499856'>
mock_db_manager = <Mock id='140240567500176'>

    @pytest.fixture
    def user_interface(self, mock_storage, mock_db_manager):
        """Экземпляр UserInterface для тестирования"""
        with patch('src.ui_interfaces.console_interface.UnifiedAPI'):
            with patch('src.ui_interfaces.console_interface.VacancySearchHandler'):
                with patch('src.ui_interfaces.console_interface.VacancyDisplayHandler'):
>                   with patch('src.ui_interfaces.console_interface.VacancyOperationsCoordinator'):

tests/test_console_interface.py:37: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1446: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f8c4d366890>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'src.ui_interfaces.console_interface' from '/home/runner/workspace/src/ui_interfaces/console_interface.py'> does not have the attribute 'VacancyOperationsCoordinator'

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1419: AttributeError
_____________ ERROR at setup of TestUserInterface.test_show_menu _____________

self = <tests.test_console_interface.TestUserInterface object at 0x7f8c4d339090>
mock_storage = <Mock id='140240563616016'>
mock_db_manager = <Mock id='140240559067984'>

    @pytest.fixture
    def user_interface(self, mock_storage, mock_db_manager):
        """Экземпляр UserInterface для тестирования"""
        with patch('src.ui_interfaces.console_interface.UnifiedAPI'):
            with patch('src.ui_interfaces.console_interface.VacancySearchHandler'):
                with patch('src.ui_interfaces.console_interface.VacancyDisplayHandler'):
>                   with patch('src.ui_interfaces.console_interface.VacancyOperationsCoordinator'):

tests/test_console_interface.py:37: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1446: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f8c4cbc6f10>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'src.ui_interfaces.console_interface' from '/home/runner/workspace/src/ui_interfaces/console_interface.py'> does not have the attribute 'VacancyOperationsCoordinator'

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1419: AttributeError
_____ ERROR at setup of TestUserInterface.test_get_period_choice_default _____

self = <tests.test_console_interface.TestUserInterface object at 0x7f8c4d339890>
mock_storage = <Mock id='140240563068176'>
mock_db_manager = <Mock id='140240563063248'>

    @pytest.fixture
    def user_interface(self, mock_storage, mock_db_manager):
        """Экземпляр UserInterface для тестирования"""
        with patch('src.ui_interfaces.console_interface.UnifiedAPI'):
            with patch('src.ui_interfaces.console_interface.VacancySearchHandler'):
                with patch('src.ui_interfaces.console_interface.VacancyDisplayHandler'):
>                   with patch('src.ui_interfaces.console_interface.VacancyOperationsCoordinator'):

tests/test_console_interface.py:37: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1446: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f8c4cfd3590>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'src.ui_interfaces.console_interface' from '/home/runner/workspace/src/ui_interfaces/console_interface.py'> does not have the attribute 'VacancyOperationsCoordinator'

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1419: AttributeError
_____ ERROR at setup of TestUserInterface.test_get_period_choice_custom ______

self = <tests.test_console_interface.TestUserInterface object at 0x7f8c4d33a050>
mock_storage = <Mock id='140240558769296'>
mock_db_manager = <Mock id='140240558767312'>

    @pytest.fixture
    def user_interface(self, mock_storage, mock_db_manager):
        """Экземпляр UserInterface для тестирования"""
        with patch('src.ui_interfaces.console_interface.UnifiedAPI'):
            with patch('src.ui_interfaces.console_interface.VacancySearchHandler'):
                with patch('src.ui_interfaces.console_interface.VacancyDisplayHandler'):
>                   with patch('src.ui_interfaces.console_interface.VacancyOperationsCoordinator'):

tests/test_console_interface.py:37: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1446: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f8c4cf5d490>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'src.ui_interfaces.console_interface' from '/home/runner/workspace/src/ui_interfaces/console_interface.py'> does not have the attribute 'VacancyOperationsCoordinator'

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1419: AttributeError
_ ERROR at setup of TestUserInterface.test_get_period_choice_invalid_custom __

self = <tests.test_console_interface.TestUserInterface object at 0x7f8c4d33a810>
mock_storage = <Mock id='140240563893648'>
mock_db_manager = <Mock id='140240563067344'>

    @pytest.fixture
    def user_interface(self, mock_storage, mock_db_manager):
        """Экземпляр UserInterface для тестирования"""
        with patch('src.ui_interfaces.console_interface.UnifiedAPI'):
            with patch('src.ui_interfaces.console_interface.VacancySearchHandler'):
                with patch('src.ui_interfaces.console_interface.VacancyDisplayHandler'):
>                   with patch('src.ui_interfaces.console_interface.VacancyOperationsCoordinator'):

tests/test_console_interface.py:37: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1446: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f8c4cf1a990>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'src.ui_interfaces.console_interface' from '/home/runner/workspace/src/ui_interfaces/console_interface.py'> does not have the attribute 'VacancyOperationsCoordinator'

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1419: AttributeError
_____ ERROR at setup of TestUserInterface.test_get_period_choice_cancel ______

self = <tests.test_console_interface.TestUserInterface object at 0x7f8c4d33afd0>
mock_storage = <Mock id='140240563049616'>
mock_db_manager = <Mock id='140240563050832'>

    @pytest.fixture
    def user_interface(self, mock_storage, mock_db_manager):
        """Экземпляр UserInterface для тестирования"""
        with patch('src.ui_interfaces.console_interface.UnifiedAPI'):
            with patch('src.ui_interfaces.console_interface.VacancySearchHandler'):
                with patch('src.ui_interfaces.console_interface.VacancyDisplayHandler'):
>                   with patch('src.ui_interfaces.console_interface.VacancyOperationsCoordinator'):

tests/test_console_interface.py:37: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1446: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f8c4cb00ed0>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'src.ui_interfaces.console_interface' from '/home/runner/workspace/src/ui_interfaces/console_interface.py'> does not have the attribute 'VacancyOperationsCoordinator'

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1419: AttributeError
_ ERROR at setup of TestUserInterface.test_get_period_choice_keyboard_interrupt _

self = <tests.test_console_interface.TestUserInterface object at 0x7f8c4d33b790>
mock_storage = <Mock id='140240567574224'>
mock_db_manager = <Mock id='140240567570128'>

    @pytest.fixture
    def user_interface(self, mock_storage, mock_db_manager):
        """Экземпляр UserInterface для тестирования"""
        with patch('src.ui_interfaces.console_interface.UnifiedAPI'):
            with patch('src.ui_interfaces.console_interface.VacancySearchHandler'):
                with patch('src.ui_interfaces.console_interface.VacancyDisplayHandler'):
>                   with patch('src.ui_interfaces.console_interface.VacancyOperationsCoordinator'):

tests/test_console_interface.py:37: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1446: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f8c4d332c50>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'src.ui_interfaces.console_interface' from '/home/runner/workspace/src/ui_interfaces/console_interface.py'> does not have the attribute 'VacancyOperationsCoordinator'

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1419: AttributeError
__ ERROR at setup of TestUserInterface.test_show_vacancies_for_deletion_all __

self = <tests.test_console_interface.TestUserInterface object at 0x7f8c4d33be90>
mock_storage = <Mock id='140240549750416'>
mock_db_manager = <Mock id='140240549741840'>

    @pytest.fixture
    def user_interface(self, mock_storage, mock_db_manager):
        """Экземпляр UserInterface для тестирования"""
        with patch('src.ui_interfaces.console_interface.UnifiedAPI'):
            with patch('src.ui_interfaces.console_interface.VacancySearchHandler'):
                with patch('src.ui_interfaces.console_interface.VacancyDisplayHandler'):
>                   with patch('src.ui_interfaces.console_interface.VacancyOperationsCoordinator'):

tests/test_console_interface.py:37: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1446: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f8c4d3f9450>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'src.ui_interfaces.console_interface' from '/home/runner/workspace/src/ui_interfaces/console_interface.py'> does not have the attribute 'VacancyOperationsCoordinator'

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1419: AttributeError
_ ERROR at setup of TestUserInterface.test_show_vacancies_for_deletion_single _

self = <tests.test_console_interface.TestUserInterface object at 0x7f8c4d33c590>
mock_storage = <Mock id='140240567988240'>
mock_db_manager = <Mock id='140240567980112'>

    @pytest.fixture
    def user_interface(self, mock_storage, mock_db_manager):
        """Экземпляр UserInterface для тестирования"""
        with patch('src.ui_interfaces.console_interface.UnifiedAPI'):
            with patch('src.ui_interfaces.console_interface.VacancySearchHandler'):
                with patch('src.ui_interfaces.console_interface.VacancyDisplayHandler'):
>                   with patch('src.ui_interfaces.console_interface.VacancyOperationsCoordinator'):

tests/test_console_interface.py:37: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1446: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f8c4cf2b6d0>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'src.ui_interfaces.console_interface' from '/home/runner/workspace/src/ui_interfaces/console_interface.py'> does not have the attribute 'VacancyOperationsCoordinator'

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1419: AttributeError
_ ERROR at setup of TestUserInterface.test_show_vacancies_for_deletion_quit __

self = <tests.test_console_interface.TestUserInterface object at 0x7f8c4d33ccd0>
mock_storage = <Mock id='140240559039952'>
mock_db_manager = <Mock id='140240559042832'>

    @pytest.fixture
    def user_interface(self, mock_storage, mock_db_manager):
        """Экземпляр UserInterface для тестирования"""
        with patch('src.ui_interfaces.console_interface.UnifiedAPI'):
            with patch('src.ui_interfaces.console_interface.VacancySearchHandler'):
                with patch('src.ui_interfaces.console_interface.VacancyDisplayHandler'):
>                   with patch('src.ui_interfaces.console_interface.VacancyOperationsCoordinator'):

tests/test_console_interface.py:37: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1446: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f8c4cf5ca10>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'src.ui_interfaces.console_interface' from '/home/runner/workspace/src/ui_interfaces/console_interface.py'> does not have the attribute 'VacancyOperationsCoordinator'

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1419: AttributeError
_ ERROR at setup of TestUserInterface.test_show_vacancies_for_deletion_range _

self = <tests.test_console_interface.TestUserInterface object at 0x7f8c4d33d410>
mock_storage = <Mock id='140240558781840'>
mock_db_manager = <Mock id='140240558777616'>

    @pytest.fixture
    def user_interface(self, mock_storage, mock_db_manager):
        """Экземпляр UserInterface для тестирования"""
        with patch('src.ui_interfaces.console_interface.UnifiedAPI'):
            with patch('src.ui_interfaces.console_interface.VacancySearchHandler'):
                with patch('src.ui_interfaces.console_interface.VacancyDisplayHandler'):
>                   with patch('src.ui_interfaces.console_interface.VacancyOperationsCoordinator'):

tests/test_console_interface.py:37: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1446: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f8c4cfa7490>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'src.ui_interfaces.console_interface' from '/home/runner/workspace/src/ui_interfaces/console_interface.py'> does not have the attribute 'VacancyOperationsCoordinator'

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1419: AttributeError
_ ERROR at setup of TestUserInterface.test_show_vacancies_for_deletion_invalid_range _

self = <tests.test_console_interface.TestUserInterface object at 0x7f8c4d33db90>
mock_storage = <Mock id='140240563609168'>
mock_db_manager = <Mock id='140240563609296'>

    @pytest.fixture
    def user_interface(self, mock_storage, mock_db_manager):
        """Экземпляр UserInterface для тестирования"""
        with patch('src.ui_interfaces.console_interface.UnifiedAPI'):
            with patch('src.ui_interfaces.console_interface.VacancySearchHandler'):
                with patch('src.ui_interfaces.console_interface.VacancyDisplayHandler'):
>                   with patch('src.ui_interfaces.console_interface.VacancyOperationsCoordinator'):

tests/test_console_interface.py:37: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1446: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f8c4cb4fb90>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'src.ui_interfaces.console_interface' from '/home/runner/workspace/src/ui_interfaces/console_interface.py'> does not have the attribute 'VacancyOperationsCoordinator'

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1419: AttributeError
_ ERROR at setup of TestUserInterface.test_show_vacancies_for_deletion_pagination _

self = <tests.test_console_interface.TestUserInterface object at 0x7f8c4d33e2d0>
mock_storage = <Mock id='140240579824144'>
mock_db_manager = <Mock id='140240579822672'>

    @pytest.fixture
    def user_interface(self, mock_storage, mock_db_manager):
        """Экземпляр UserInterface для тестирования"""
        with patch('src.ui_interfaces.console_interface.UnifiedAPI'):
            with patch('src.ui_interfaces.console_interface.VacancySearchHandler'):
                with patch('src.ui_interfaces.console_interface.VacancyDisplayHandler'):
>                   with patch('src.ui_interfaces.console_interface.VacancyOperationsCoordinator'):

tests/test_console_interface.py:37: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1446: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f8c4cf5db50>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'src.ui_interfaces.console_interface' from '/home/runner/workspace/src/ui_interfaces/console_interface.py'> does not have the attribute 'VacancyOperationsCoordinator'

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1419: AttributeError
__ ERROR at setup of TestUserInterface.test_display_vacancies_static_method __

self = <tests.test_console_interface.TestUserInterface object at 0x7f8c4d33eb10>
mock_storage = <Mock id='140240563884240'>
mock_db_manager = <Mock id='140240563888912'>

    @pytest.fixture
    def user_interface(self, mock_storage, mock_db_manager):
        """Экземпляр UserInterface для тестирования"""
        with patch('src.ui_interfaces.console_interface.UnifiedAPI'):
            with patch('src.ui_interfaces.console_interface.VacancySearchHandler'):
                with patch('src.ui_interfaces.console_interface.VacancyDisplayHandler'):
>                   with patch('src.ui_interfaces.console_interface.VacancyOperationsCoordinator'):

tests/test_console_interface.py:37: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1446: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f8c4cfe7a50>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'src.ui_interfaces.console_interface' from '/home/runner/workspace/src/ui_interfaces/console_interface.py'> does not have the attribute 'VacancyOperationsCoordinator'

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1419: AttributeError
_ ERROR at setup of TestUserInterface.test_display_vacancies_with_pagination_static_method _

self = <tests.test_console_interface.TestUserInterface object at 0x7f8c4d33b150>
mock_storage = <Mock id='140240579769168'>
mock_db_manager = <Mock id='140240579756624'>

    @pytest.fixture
    def user_interface(self, mock_storage, mock_db_manager):
        """Экземпляр UserInterface для тестирования"""
        with patch('src.ui_interfaces.console_interface.UnifiedAPI'):
            with patch('src.ui_interfaces.console_interface.VacancySearchHandler'):
                with patch('src.ui_interfaces.console_interface.VacancyDisplayHandler'):
>                   with patch('src.ui_interfaces.console_interface.VacancyOperationsCoordinator'):

tests/test_console_interface.py:37: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1446: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f8c4cb03390>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'src.ui_interfaces.console_interface' from '/home/runner/workspace/src/ui_interfaces/console_interface.py'> does not have the attribute 'VacancyOperationsCoordinator'

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1419: AttributeError
______ ERROR at setup of TestUserInterface.test_run_keyboard_interrupt _______

self = <tests.test_console_interface.TestUserInterface object at 0x7f8c4d33f290>
mock_storage = <Mock id='140240563271696'>
mock_db_manager = <Mock id='140240563259984'>

    @pytest.fixture
    def user_interface(self, mock_storage, mock_db_manager):
        """Экземпляр UserInterface для тестирования"""
        with patch('src.ui_interfaces.console_interface.UnifiedAPI'):
            with patch('src.ui_interfaces.console_interface.VacancySearchHandler'):
                with patch('src.ui_interfaces.console_interface.VacancyDisplayHandler'):
>                   with patch('src.ui_interfaces.console_interface.VacancyOperationsCoordinator'):

tests/test_console_interface.py:37: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1446: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f8c4cf18650>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'src.ui_interfaces.console_interface' from '/home/runner/workspace/src/ui_interfaces/console_interface.py'> does not have the attribute 'VacancyOperationsCoordinator'

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1419: AttributeError
______ ERROR at setup of TestUserInterface.test_run_exception_handling _______

self = <tests.test_console_interface.TestUserInterface object at 0x7f8c4d33f6d0>
mock_storage = <Mock id='140240549752016'>
mock_db_manager = <Mock id='140240549745232'>

    @pytest.fixture
    def user_interface(self, mock_storage, mock_db_manager):
        """Экземпляр UserInterface для тестирования"""
        with patch('src.ui_interfaces.console_interface.UnifiedAPI'):
            with patch('src.ui_interfaces.console_interface.VacancySearchHandler'):
                with patch('src.ui_interfaces.console_interface.VacancyDisplayHandler'):
>                   with patch('src.ui_interfaces.console_interface.VacancyOperationsCoordinator'):

tests/test_console_interface.py:37: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1446: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f8c4cbc72d0>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'src.ui_interfaces.console_interface' from '/home/runner/workspace/src/ui_interfaces/console_interface.py'> does not have the attribute 'VacancyOperationsCoordinator'

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1419: AttributeError
__ ERROR at setup of TestUserInterface.test_operations_coordinator_methods ___

self = <tests.test_console_interface.TestUserInterface object at 0x7f8c4d33fb10>
mock_storage = <Mock id='140240563244624'>
mock_db_manager = <Mock id='140240563251088'>

    @pytest.fixture
    def user_interface(self, mock_storage, mock_db_manager):
        """Экземпляр UserInterface для тестирования"""
        with patch('src.ui_interfaces.console_interface.UnifiedAPI'):
            with patch('src.ui_interfaces.console_interface.VacancySearchHandler'):
                with patch('src.ui_interfaces.console_interface.VacancyDisplayHandler'):
>                   with patch('src.ui_interfaces.console_interface.VacancyOperationsCoordinator'):

tests/test_console_interface.py:37: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1446: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f8c4cb4b910>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'src.ui_interfaces.console_interface' from '/home/runner/workspace/src/ui_interfaces/console_interface.py'> does not have the attribute 'VacancyOperationsCoordinator'

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1419: AttributeError
_____ ERROR at setup of TestUserInterface.test_advanced_search_vacancies _____

self = <tests.test_console_interface.TestUserInterface object at 0x7f8c4d33ff10>
mock_storage = <Mock id='140240563889808'>
mock_db_manager = <Mock id='140240563891216'>

    @pytest.fixture
    def user_interface(self, mock_storage, mock_db_manager):
        """Экземпляр UserInterface для тестирования"""
        with patch('src.ui_interfaces.console_interface.UnifiedAPI'):
            with patch('src.ui_interfaces.console_interface.VacancySearchHandler'):
                with patch('src.ui_interfaces.console_interface.VacancyDisplayHandler'):
>                   with patch('src.ui_interfaces.console_interface.VacancyOperationsCoordinator'):

tests/test_console_interface.py:37: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1446: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f8c4cb06e90>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'src.ui_interfaces.console_interface' from '/home/runner/workspace/src/ui_interfaces/console_interface.py'> does not have the attribute 'VacancyOperationsCoordinator'

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1419: AttributeError
_ ERROR at setup of TestUserInterface.test_advanced_search_vacancies_empty_query _

self = <tests.test_console_interface.TestUserInterface object at 0x7f8c4d34c350>
mock_storage = <Mock id='140240567581200'>
mock_db_manager = <Mock id='140240567574224'>

    @pytest.fixture
    def user_interface(self, mock_storage, mock_db_manager):
        """Экземпляр UserInterface для тестирования"""
        with patch('src.ui_interfaces.console_interface.UnifiedAPI'):
            with patch('src.ui_interfaces.console_interface.VacancySearchHandler'):
                with patch('src.ui_interfaces.console_interface.VacancyDisplayHandler'):
>                   with patch('src.ui_interfaces.console_interface.VacancyOperationsCoordinator'):

tests/test_console_interface.py:37: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1446: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f8c4d3ba510>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'src.ui_interfaces.console_interface' from '/home/runner/workspace/src/ui_interfaces/console_interface.py'> does not have the attribute 'VacancyOperationsCoordinator'

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1419: AttributeError
_ ERROR at setup of TestUserInterface.test_filter_saved_vacancies_by_salary_min _

self = <tests.test_console_interface.TestUserInterface object at 0x7f8c4d34c990>
mock_storage = <Mock id='140240559055056'>
mock_db_manager = <Mock id='140240563251216'>

    @pytest.fixture
    def user_interface(self, mock_storage, mock_db_manager):
        """Экземпляр UserInterface для тестирования"""
        with patch('src.ui_interfaces.console_interface.UnifiedAPI'):
            with patch('src.ui_interfaces.console_interface.VacancySearchHandler'):
                with patch('src.ui_interfaces.console_interface.VacancyDisplayHandler'):
>                   with patch('src.ui_interfaces.console_interface.VacancyOperationsCoordinator'):

tests/test_console_interface.py:37: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1446: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f8c4d34f9d0>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'src.ui_interfaces.console_interface' from '/home/runner/workspace/src/ui_interfaces/console_interface.py'> does not have the attribute 'VacancyOperationsCoordinator'

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1419: AttributeError
_ ERROR at setup of TestUserInterface.test_filter_saved_vacancies_by_salary_invalid_input _

self = <tests.test_console_interface.TestUserInterface object at 0x7f8c4d34d0d0>
mock_storage = <Mock id='140240563887824'>
mock_db_manager = <Mock id='140240563890704'>

    @pytest.fixture
    def user_interface(self, mock_storage, mock_db_manager):
        """Экземпляр UserInterface для тестирования"""
        with patch('src.ui_interfaces.console_interface.UnifiedAPI'):
            with patch('src.ui_interfaces.console_interface.VacancySearchHandler'):
                with patch('src.ui_interfaces.console_interface.VacancyDisplayHandler'):
>                   with patch('src.ui_interfaces.console_interface.VacancyOperationsCoordinator'):

tests/test_console_interface.py:37: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1446: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f8c4d369990>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'src.ui_interfaces.console_interface' from '/home/runner/workspace/src/ui_interfaces/console_interface.py'> does not have the attribute 'VacancyOperationsCoordinator'

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1419: AttributeError
================================== FAILURES ==================================
___________ TestUserInterface.test_initialization_default_storage ____________

self = <tests.test_console_interface.TestUserInterface object at 0x7f8c4d3388d0>
mock_db_manager = <Mock id='140240558773712'>

    def test_initialization_default_storage(self, mock_db_manager):
        """Тест инициализации с хранилищем по умолчанию"""
        with patch('src.ui_interfaces.console_interface.StorageFactory.get_default_storage') as mock_factory:
            mock_storage = Mock()
            mock_factory.return_value = mock_storage
    
            with patch('src.ui_interfaces.console_interface.UnifiedAPI'):
                with patch('src.ui_interfaces.console_interface.VacancySearchHandler'):
                    with patch('src.ui_interfaces.console_interface.VacancyDisplayHandler'):
>                       with patch('src.ui_interfaces.console_interface.VacancyOperationsCoordinator'):

tests/test_console_interface.py:61: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1446: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f8c4c26b550>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'src.ui_interfaces.console_interface' from '/home/runner/workspace/src/ui_interfaces/console_interface.py'> does not have the attribute 'VacancyOperationsCoordinator'

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1419: AttributeError
========================== short test summary info ===========================
FAILED tests/test_console_interface.py::TestUserInterface::test_initialization_default_storage - AttributeError: <module 'src.ui_interfaces.console_interface' from '/home...
ERROR tests/test_console_interface.py::TestUserInterface::test_initialization - AttributeError: <module 'src.ui_interfaces.console_interface' from '/home...
ERROR tests/test_console_interface.py::TestUserInterface::test_show_menu - AttributeError: <module 'src.ui_interfaces.console_interface' from '/home...
ERROR tests/test_console_interface.py::TestUserInterface::test_get_period_choice_default - AttributeError: <module 'src.ui_interfaces.console_interface' from '/home...
ERROR tests/test_console_interface.py::TestUserInterface::test_get_period_choice_custom - AttributeError: <module 'src.ui_interfaces.console_interface' from '/home...
ERROR tests/test_console_interface.py::TestUserInterface::test_get_period_choice_invalid_custom - AttributeError: <module 'src.ui_interfaces.console_interface' from '/home...
ERROR tests/test_console_interface.py::TestUserInterface::test_get_period_choice_cancel - AttributeError: <module 'src.ui_interfaces.console_interface' from '/home...
ERROR tests/test_console_interface.py::TestUserInterface::test_get_period_choice_keyboard_interrupt - AttributeError: <module 'src.ui_interfaces.console_interface' from '/home...
ERROR tests/test_console_interface.py::TestUserInterface::test_show_vacancies_for_deletion_all - AttributeError: <module 'src.ui_interfaces.console_interface' from '/home...
ERROR tests/test_console_interface.py::TestUserInterface::test_show_vacancies_for_deletion_single - AttributeError: <module 'src.ui_interfaces.console_interface' from '/home...
ERROR tests/test_console_interface.py::TestUserInterface::test_show_vacancies_for_deletion_quit - AttributeError: <module 'src.ui_interfaces.console_interface' from '/home...
ERROR tests/test_console_interface.py::TestUserInterface::test_show_vacancies_for_deletion_range - AttributeError: <module 'src.ui_interfaces.console_interface' from '/home...
ERROR tests/test_console_interface.py::TestUserInterface::test_show_vacancies_for_deletion_invalid_range - AttributeError: <module 'src.ui_interfaces.console_interface' from '/home...
ERROR tests/test_console_interface.py::TestUserInterface::test_show_vacancies_for_deletion_pagination - AttributeError: <module 'src.ui_interfaces.console_interface' from '/home...
ERROR tests/test_console_interface.py::TestUserInterface::test_display_vacancies_static_method - AttributeError: <module 'src.ui_interfaces.console_interface' from '/home...
ERROR tests/test_console_interface.py::TestUserInterface::test_display_vacancies_with_pagination_static_method - AttributeError: <module 'src.ui_interfaces.console_interface' from '/home...
ERROR tests/test_console_interface.py::TestUserInterface::test_run_keyboard_interrupt - AttributeError: <module 'src.ui_interfaces.console_interface' from '/home...
ERROR tests/test_console_interface.py::TestUserInterface::test_run_exception_handling - AttributeError: <module 'src.ui_interfaces.console_interface' from '/home...
ERROR tests/test_console_interface.py::TestUserInterface::test_operations_coordinator_methods - AttributeError: <module 'src.ui_interfaces.console_interface' from '/home...
ERROR tests/test_console_interface.py::TestUserInterface::test_advanced_search_vacancies - AttributeError: <module 'src.ui_interfaces.console_interface' from '/home...
ERROR tests/test_console_interface.py::TestUserInterface::test_advanced_search_vacancies_empty_query - AttributeError: <module 'src.ui_interfaces.console_interface' from '/home...
ERROR tests/test_console_interface.py::TestUserInterface::test_filter_saved_vacancies_by_salary_min - AttributeError: <module 'src.ui_interfaces.console_interface' from '/home...
ERROR tests/test_console_interface.py::TestUserInterface::test_filter_saved_vacancies_by_salary_invalid_input - AttributeError: <module 'src.ui_interfaces.console_interface' from '/home...