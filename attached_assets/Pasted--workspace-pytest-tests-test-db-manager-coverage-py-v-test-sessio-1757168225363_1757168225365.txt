~/workspace$ pytest tests/test_db_manager_coverage.py -v
============================== test session starts ==============================
platform linux -- Python 3.11.13, pytest-8.4.2, pluggy-1.6.0 -- /nix/store/2lcqw1d28vklbk8ikiwad28iq2smwndv-python-wrapped-0.1.0/bin/python3
cachedir: .pytest_cache
rootdir: /home/runner/workspace
configfile: pyproject.toml
plugins: cov-6.2.1, mock-3.15.0
collected 16 items                                                              

tests/test_db_manager_coverage.py::TestDBManagerCoverage::test_db_manager_initialization PASSED [  6%]
tests/test_db_manager_coverage.py::TestDBManagerCoverage::test_connection_management PASSED [ 12%]
tests/test_db_manager_coverage.py::TestDBManagerCoverage::test_create_database_schema FAILED [ 18%]
tests/test_db_manager_coverage.py::TestDBManagerCoverage::test_save_company_data FAILED [ 25%]
tests/test_db_manager_coverage.py::TestDBManagerCoverage::test_save_vacancy_comprehensive FAILED [ 31%]
tests/test_db_manager_coverage.py::TestDBManagerCoverage::test_bulk_save_operations FAILED [ 37%]
tests/test_db_manager_coverage.py::TestDBManagerCoverage::test_query_operations FAILED [ 43%]
tests/test_db_manager_coverage.py::TestDBManagerCoverage::test_search_functionality FAILED [ 50%]
tests/test_db_manager_coverage.py::TestDBManagerCoverage::test_filter_operations FAILED [ 56%]
tests/test_db_manager_coverage.py::TestDBManagerCoverage::test_aggregation_operations FAILED [ 62%]
tests/test_db_manager_coverage.py::TestDBManagerCoverage::test_update_operations FAILED [ 68%]
tests/test_db_manager_coverage.py::TestDBManagerCoverage::test_delete_operations FAILED [ 75%]
tests/test_db_manager_coverage.py::TestDBManagerCoverage::test_transaction_management FAILED [ 81%]
tests/test_db_manager_coverage.py::TestDBManagerCoverage::test_error_handling_scenarios PASSED [ 87%]
tests/test_db_manager_coverage.py::TestDBManagerCoverage::test_data_validation_before_save PASSED [ 93%]
tests/test_db_manager_coverage.py::TestDBManagerCoverage::test_connection_pool_management PASSED [100%]

=================================== FAILURES ====================================
_______________ TestDBManagerCoverage.test_create_database_schema _______________

self = <tests.test_db_manager_coverage.TestDBManagerCoverage object at 0x7f64f5699c10>
db_manager = <src.storage.db_manager.DBManager object at 0x7f64f56b1150>
mock_connection = (<Mock id='140071590825872'>, <Mock name='mock.cursor()' id='140071590891664'>)

    def test_create_database_schema(self, db_manager, mock_connection):
        """Тест создания схемы базы данных"""
        if not DB_MANAGER_AVAILABLE:
            return
    
        mock_conn, mock_cursor = mock_connection
        db_manager.connection = mock_conn
    
>       db_manager.create_database_schema()
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: 'DBManager' object has no attribute 'create_database_schema'

tests/test_db_manager_coverage.py:75: AttributeError
_________________ TestDBManagerCoverage.test_save_company_data __________________

self = <tests.test_db_manager_coverage.TestDBManagerCoverage object at 0x7f64f5699090>
db_manager = <src.storage.db_manager.DBManager object at 0x7f64f569dd50>
mock_connection = (<Mock id='140071590812752'>, <Mock name='mock.cursor()' id='140071590811344'>)

    def test_save_company_data(self, db_manager, mock_connection):
        """Тест сохранения данных компании"""
        if not DB_MANAGER_AVAILABLE:
            return
    
        mock_conn, mock_cursor = mock_connection
        db_manager.connection = mock_conn
    
        company_data = {
            'id': 'company123',
            'name': 'TechCorp',
            'description': 'Leading tech company',
            'website': 'https://techcorp.com',
            'industry': 'Technology'
        }
    
>       db_manager.save_company(company_data)
        ^^^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: 'DBManager' object has no attribute 'save_company'

tests/test_db_manager_coverage.py:96: AttributeError
_____________ TestDBManagerCoverage.test_save_vacancy_comprehensive _____________

self = <tests.test_db_manager_coverage.TestDBManagerCoverage object at 0x7f64f569a550>
db_manager = <src.storage.db_manager.DBManager object at 0x7f64f5528750>
mock_connection = (<Mock id='140071589282000'>, <Mock name='mock.cursor()' id='140071589285136'>)

    def test_save_vacancy_comprehensive(self, db_manager, mock_connection):
        """Тест комплексного сохранения вакансии"""
        if not DB_MANAGER_AVAILABLE:
            return
    
        mock_conn, mock_cursor = mock_connection
        db_manager.connection = mock_conn
    
        vacancy_data = {
            'id': 'vac123',
            'title': 'Senior Python Developer',
            'description': 'Exciting opportunity for experienced developer',
            'company_id': 'company123',
            'salary_from': 150000,
            'salary_to': 200000,
            'currency': 'RUR',
            'experience': 'between3and6',
            'employment': 'full',
            'schedule': 'fullDay',
            'area': 'Moscow',
            'published_at': '2024-01-15T10:00:00',
            'url': 'https://hh.ru/vacancy/123',
            'source': 'hh'
        }
    
>       db_manager.save_vacancy(vacancy_data)
        ^^^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: 'DBManager' object has no attribute 'save_vacancy'

tests/test_db_manager_coverage.py:124: AttributeError
________________ TestDBManagerCoverage.test_bulk_save_operations ________________

self = <tests.test_db_manager_coverage.TestDBManagerCoverage object at 0x7f64f569ac10>
db_manager = <src.storage.db_manager.DBManager object at 0x7f64f56f9710>
mock_connection = (<Mock id='140071591194768'>, <Mock name='mock.cursor()' id='140071608798800'>)

    def test_bulk_save_operations(self, db_manager, mock_connection):
        """Тест массовых операций сохранения"""
        if not DB_MANAGER_AVAILABLE:
            return
    
        mock_conn, mock_cursor = mock_connection
        db_manager.connection = mock_conn
    
        # Массовое сохранение компаний
        companies = [
            {'id': 'comp1', 'name': 'Company 1'},
            {'id': 'comp2', 'name': 'Company 2'},
            {'id': 'comp3', 'name': 'Company 3'}
        ]
    
>       db_manager.save_companies(companies)
        ^^^^^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: 'DBManager' object has no attribute 'save_companies'

tests/test_db_manager_coverage.py:142: AttributeError
__________________ TestDBManagerCoverage.test_query_operations __________________

self = <Mock name='mock.cursor().execute' id='140071589391632'>

    def assert_called(self):
        """assert that the mock was called at least once
        """
        if self.call_count == 0:
            msg = ("Expected '%s' to have been called." %
                   (self._mock_name or 'mock'))
>           raise AssertionError(msg)
E           AssertionError: Expected 'execute' to have been called.

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:908: AssertionError

During handling of the above exception, another exception occurred:

self = <tests.test_db_manager_coverage.TestDBManagerCoverage object at 0x7f64f569b350>
db_manager = <src.storage.db_manager.DBManager object at 0x7f64f5698c90>
mock_connection = (<Mock id='140071590798736'>, <Mock name='mock.cursor()' id='140071590799312'>)

    def test_query_operations(self, db_manager, mock_connection):
        """Тест операций запросов"""
        if not DB_MANAGER_AVAILABLE:
            return
    
        mock_conn, mock_cursor = mock_connection
        db_manager.connection = mock_conn
    
        # Получение всех вакансий
        mock_cursor.fetchall.return_value = [
            ('vac1', 'Python Developer', 'Great job', 'comp1', 100000, 150000, 'RUR'),
            ('vac2', 'Java Developer', 'Another job', 'comp2', 120000, 180000, 'RUR')
        ]
    
        vacancies = db_manager.get_all_vacancies()
>       mock_cursor.execute.assert_called()
E       AssertionError: Expected 'execute' to have been called.

tests/test_db_manager_coverage.py:171: AssertionError
------------------------------- Captured log call -------------------------------
WARNING  src.storage.db_manager:db_manager.py:204 Поле company_id имеет неправильный тип <MagicMock name='mock.__enter__().cursor().__enter__().fetchone().__getitem__()' id='140071589443664'>, исправляем...
________________ TestDBManagerCoverage.test_search_functionality ________________

self = <tests.test_db_manager_coverage.TestDBManagerCoverage object at 0x7f64f569bb10>
db_manager = <src.storage.db_manager.DBManager object at 0x7f64f56fa410>
mock_connection = (<Mock id='140071591193872'>, <Mock name='mock.cursor()' id='140071591195152'>)

    def test_search_functionality(self, db_manager, mock_connection):
        """Тест функций поиска"""
        if not DB_MANAGER_AVAILABLE:
            return
    
        mock_conn, mock_cursor = mock_connection
        db_manager.connection = mock_conn
    
        mock_cursor.fetchall.return_value = []
    
        # Поиск по ключевому слову
>       results = db_manager.search_by_keyword('python')
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: 'DBManager' object has no attribute 'search_by_keyword'

tests/test_db_manager_coverage.py:185: AttributeError
_________________ TestDBManagerCoverage.test_filter_operations __________________

self = <tests.test_db_manager_coverage.TestDBManagerCoverage object at 0x7f64f56a0310>
db_manager = <src.storage.db_manager.DBManager object at 0x7f64f5546cd0>
mock_connection = (<Mock id='140071589409808'>, <Mock name='mock.cursor()' id='140071609189904'>)

    def test_filter_operations(self, db_manager, mock_connection):
        """Тест операций фильтрации"""
        if not DB_MANAGER_AVAILABLE:
            return
    
        mock_conn, mock_cursor = mock_connection
        db_manager.connection = mock_conn
    
        mock_cursor.fetchall.return_value = []
    
        # Фильтрация по опыту
>       results = db_manager.filter_by_experience('between3and6')
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: 'DBManager' object has no attribute 'filter_by_experience'

tests/test_db_manager_coverage.py:207: AttributeError
_______________ TestDBManagerCoverage.test_aggregation_operations _______________

self = <tests.test_db_manager_coverage.TestDBManagerCoverage object at 0x7f64f56a0a90>
db_manager = <src.storage.db_manager.DBManager object at 0x7f64f57f8150>
mock_connection = (<Mock id='140071592234704'>, <Mock name='mock.cursor()' id='140071592231568'>)

    def test_aggregation_operations(self, db_manager, mock_connection):
        """Тест операций агрегации"""
        if not DB_MANAGER_AVAILABLE:
            return
    
        mock_conn, mock_cursor = mock_connection
        db_manager.connection = mock_conn
    
        # Подсчет общего количества вакансий
        mock_cursor.fetchone.return_value = (150,)
>       count = db_manager.count_vacancies()
                ^^^^^^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: 'DBManager' object has no attribute 'count_vacancies'

tests/test_db_manager_coverage.py:228: AttributeError
_________________ TestDBManagerCoverage.test_update_operations __________________

self = <tests.test_db_manager_coverage.TestDBManagerCoverage object at 0x7f64f56a1250>
db_manager = <src.storage.db_manager.DBManager object at 0x7f64f569aa50>
mock_connection = (<Mock id='140071590796816'>, <Mock name='mock.cursor()' id='140071590798352'>)

    def test_update_operations(self, db_manager, mock_connection):
        """Тест операций обновления"""
        if not DB_MANAGER_AVAILABLE:
            return
    
        mock_conn, mock_cursor = mock_connection
        db_manager.connection = mock_conn
    
        # Обновление вакансии
        update_data = {
            'title': 'Senior Python Developer',
            'salary_from': 180000,
            'salary_to': 250000
        }
    
>       db_manager.update_vacancy('vac123', update_data)
        ^^^^^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: 'DBManager' object has no attribute 'update_vacancy'

tests/test_db_manager_coverage.py:261: AttributeError
_________________ TestDBManagerCoverage.test_delete_operations __________________

self = <tests.test_db_manager_coverage.TestDBManagerCoverage object at 0x7f64f56a1a10>
db_manager = <src.storage.db_manager.DBManager object at 0x7f64f5812490>
mock_connection = (<Mock id='140071592334096'>, <Mock name='mock.cursor()' id='140071592340432'>)

    def test_delete_operations(self, db_manager, mock_connection):
        """Тест операций удаления"""
        if not DB_MANAGER_AVAILABLE:
            return
    
        mock_conn, mock_cursor = mock_connection
        db_manager.connection = mock_conn
    
        # Удаление отдельной вакансии
>       db_manager.delete_vacancy('vac123')
        ^^^^^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: 'DBManager' object has no attribute 'delete_vacancy'

tests/test_db_manager_coverage.py:282: AttributeError
_______________ TestDBManagerCoverage.test_transaction_management _______________

self = <tests.test_db_manager_coverage.TestDBManagerCoverage object at 0x7f64f56a2210>
db_manager = <src.storage.db_manager.DBManager object at 0x7f64f5545450>
mock_connection = (<Mock id='140071589404624'>, <Mock name='mock.cursor()' id='140071589399568'>)

    def test_transaction_management(self, db_manager, mock_connection):
        """Тест управления транзакциями"""
        if not DB_MANAGER_AVAILABLE:
            return
    
        mock_conn, mock_cursor = mock_connection
        db_manager.connection = mock_conn
    
        # Начало транзакции
>       db_manager.begin_transaction()
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: 'DBManager' object has no attribute 'begin_transaction'

tests/test_db_manager_coverage.py:302: AttributeError
============================ short test summary info ============================
FAILED tests/test_db_manager_coverage.py::TestDBManagerCoverage::test_create_database_schema - AttributeError: 'DBManager' object has no attribute 'create_database_schema'
FAILED tests/test_db_manager_coverage.py::TestDBManagerCoverage::test_save_company_data - AttributeError: 'DBManager' object has no attribute 'save_company'
FAILED tests/test_db_manager_coverage.py::TestDBManagerCoverage::test_save_vacancy_comprehensive - AttributeError: 'DBManager' object has no attribute 'save_vacancy'
FAILED tests/test_db_manager_coverage.py::TestDBManagerCoverage::test_bulk_save_operations - AttributeError: 'DBManager' object has no attribute 'save_companies'
FAILED tests/test_db_manager_coverage.py::TestDBManagerCoverage::test_query_operations - AssertionError: Expected 'execute' to have been called.
FAILED tests/test_db_manager_coverage.py::TestDBManagerCoverage::test_search_functionality - AttributeError: 'DBManager' object has no attribute 'search_by_keyword'
FAILED tests/test_db_manager_coverage.py::TestDBManagerCoverage::test_filter_operations - AttributeError: 'DBManager' object has no attribute 'filter_by_experience'
FAILED tests/test_db_manager_coverage.py::TestDBManagerCoverage::test_aggregation_operations - AttributeError: 'DBManager' object has no attribute 'count_vacancies'
FAILED tests/test_db_manager_coverage.py::TestDBManagerCoverage::test_update_operations - AttributeError: 'DBManager' object has no attribute 'update_vacancy'
FAILED tests/test_db_manager_coverage.py::TestDBManagerCoverage::test_delete_operations - AttributeError: 'DBManager' object has no attribute 'delete_vacancy'
FAILED tests/test_db_manager_coverage.py::TestDBManagerCoverage::test_transaction_management - AttributeError: 'DBManager' object has no attribute 'begin_transaction'
========================= 11 failed, 5 passed in 0.23s ==========================
~/workspace$ 