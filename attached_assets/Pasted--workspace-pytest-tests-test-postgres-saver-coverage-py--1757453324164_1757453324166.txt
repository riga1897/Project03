~/workspace$ pytest tests/test_postgres_saver_coverage.py
============================================ test session starts =============================================
platform linux -- Python 3.11.13, pytest-8.4.2, pluggy-1.6.0
rootdir: /home/runner/workspace
configfile: pyproject.toml
plugins: cov-6.2.1, mock-3.15.0
collected 43 items                                                                                           

tests/test_postgres_saver_coverage.py .........F..F..............................                      [100%]

================================================== FAILURES ==================================================
____________________________ TestPostgresSaver.test_get_connection_database_param ____________________________

self = <tests.test_postgres_saver_coverage.TestPostgresSaver object at 0x7f7e53bffd90>
mock_logger = <MagicMock name='logger' id='140180598394640'>
mock_psycopg2 = <MagicMock name='psycopg2' id='140180534584592'>

    @patch('src.storage.postgres_saver.psycopg2')
    @patch('src.storage.postgres_saver.logger')
    def test_get_connection_database_param(self, mock_logger, mock_psycopg2):
        """Покрытие: подключение к указанной базе данных"""
        mock_connection = MagicMock()
        mock_cursor = MagicMock()
        mock_connection.cursor.return_value = mock_cursor
        # Исправляем проблему с encoding для execute_values
        mock_cursor.connection = mock_connection
        mock_connection.encoding = 'UTF8'
    
        # Мокируем что поля не существуют
        mock_cursor.fetchone.side_effect = [None] * 20  # Все поля не найдены
    
        # PostgresSaver не имеет _ensure_tables_exist, убираем ненужный патч
        saver = PostgresSaver({"host": "test"})
    
        # Тестируем подключение к конкретной БД (параметр database)
        mock_psycopg2.connect.return_value = mock_connection
    
>       result = saver._get_connection("specific_db")
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_postgres_saver_coverage.py:331: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/storage/postgres_saver.py:63: in _get_connection
    connection = psycopg2.connect(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=test port=5432 user=neondb_owner password=npg_sHGAYpT6tCm9 client_encoding=utf8 dbname=specific_db'
connection_factory = None, cursor_factory = None
kwargs = {'client_encoding': 'utf8', 'database': 'specific_db', 'host': 'test', 'password': 'npg_sHGAYpT6tCm9', ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       psycopg2.OperationalError: could not translate host name "test" to address: Name or service not known

.pythonlibs/lib/python3.11/site-packages/psycopg2/__init__.py:122: OperationalError
_____________________ TestPostgresSaver.test_initialize_target_companies_database_error ______________________

self = <tests.test_postgres_saver_coverage.TestPostgresSaver object at 0x7f7e5370d190>
mock_logger = <MagicMock name='logger' id='140180530301072'>
mock_psycopg2 = <MagicMock name='psycopg2' id='140180530306832'>

    @patch('src.storage.postgres_saver.psycopg2')
    @patch('src.storage.postgres_saver.logger')
    def test_initialize_target_companies_database_error(self, mock_logger, mock_psycopg2):
        """Покрытие: ошибка базы данных при инициализации целевых компаний"""
        mock_connection = MagicMock()
        mock_cursor = MagicMock()
        mock_connection.cursor.return_value = mock_cursor
        # Исправляем проблему с encoding для execute_values
        mock_cursor.connection = mock_connection
        mock_connection.encoding = 'UTF8'
        mock_connection.closed = False
    
        from src.storage.postgres_saver import PsycopgError
        mock_cursor.execute.side_effect = PsycopgError("Table creation failed")
    
        # PostgresSaver не имеет _ensure_tables_exist, убираем ненужный патч
        saver = PostgresSaver({"host": "test"})
    
        with patch.object(saver, '_get_connection', return_value=mock_connection):
>           with pytest.raises(PsycopgError):
E           Failed: DID NOT RAISE <class 'psycopg2.Error'>

tests/test_postgres_saver_coverage.py:428: Failed
========================================== short test summary info ===========================================
FAILED tests/test_postgres_saver_coverage.py::TestPostgresSaver::test_get_connection_database_param - psycopg2.OperationalError: could not translate host name "test" to address: Name or service not known
FAILED tests/test_postgres_saver_coverage.py::TestPostgresSaver::test_initialize_target_companies_database_error - Failed: DID NOT RAISE <class 'psycopg2.Error'>
======================================== 2 failed, 41 passed in 0.62s ========================================
~/workspace$ 