=============================== test session starts ================================
platform linux -- Python 3.11.13, pytest-8.4.2, pluggy-1.6.0
rootdir: /home/runner/workspace
configfile: pyproject.toml
plugins: cov-6.2.1, mock-3.15.0
collected 1329 items                                                               

tests/test_abstract.py ........                                              [  0%]
tests/test_abstract_db_manager.py ....                                       [  0%]
tests/test_abstract_filter_complete.py .........                             [  1%]
tests/test_api_complete.py ...................                               [  3%]
tests/test_api_config.py ....                                                [  3%]
tests/test_api_data_filter.py ......                                         [  3%]
tests/test_api_fixes.py .......                                              [  4%]
tests/test_api_modules.py ............................                       [  6%]
tests/test_api_modules_consolidated.py ....                                  [  6%]
tests/test_app_config.py .........                                           [  7%]
tests/test_base_api.py ...............                                       [  8%]
tests/test_base_formatter.py ..........                                      [  9%]
tests/test_base_formatter_complete.py ..............................         [ 11%]
tests/test_base_parser.py ......                                             [ 11%]
tests/test_cache.py ......................                                   [ 13%]
tests/test_cached_api.py ....                                                [ 13%]
tests/test_cached_api_complete.py ................                           [ 15%]
tests/test_components_fixed.py ...                                           [ 15%]
tests/test_comprehensive_fixed.py .....                                      [ 15%]
tests/test_config_consolidated.py .....                                      [ 16%]
tests/test_config_missing_coverage.py .....sssss.............ss...           [ 18%]
tests/test_config_modules_consolidated.py ......                             [ 18%]
tests/test_console_interface.py ......                                       [ 19%]
tests/test_core_functionality_consolidated.py .....                          [ 19%]
tests/test_core_modules_comprehensive.py ........                            [ 20%]
tests/test_data_normalizers_comprehensive.py ............................    [ 22%]
tests/test_database_connection.py ........                                   [ 22%]
tests/test_db_config.py .....                                                [ 23%]
tests/test_db_manager.py .................                                   [ 24%]
tests/test_decorators.py .......                                             [ 24%]
tests/test_description_parser.py ..........                                  [ 25%]
tests/test_env_loader.py ................                                    [ 26%]
tests/test_filter_utils.py ......                                            [ 27%]
tests/test_get_api_complete.py ....................                          [ 28%]
tests/test_hh_api_complete.py .................                              [ 30%]
tests/test_hh_api_config.py .....                                            [ 30%]
tests/test_hh_parser.py ........                                             [ 31%]
tests/test_integration.py .............                                      [ 32%]
tests/test_interfaces.py .ss                                                 [ 32%]
tests/test_main_application_interface.py ...                                 [ 32%]
tests/test_main_application_interface_complete.py ..............F....F.F.F.. [ 34%]
....F.F.F........                                                            [ 35%]
tests/test_main_consolidated.py .........                                    [ 36%]
tests/test_menu_manager.py ..........                                        [ 37%]
tests/test_missing_components.py .........                                   [ 37%]
tests/test_missing_coverage_components.py ............F.F..                  [ 39%]
tests/test_models_fixed.py ...                                               [ 39%]
tests/test_paginator.py ......                                               [ 39%]
tests/test_parsers_complete.py ............                                  [ 40%]
tests/test_repository_fixed.py ..                                            [ 40%]
tests/test_salary_fixed.py ...........                                       [ 41%]
tests/test_salary_utils.py ......................                            [ 43%]
tests/test_search_utils.py ............................                      [ 45%]
tests/test_search_utils_complete.py ........................................ [ 48%]
......                                                                       [ 48%]
tests/test_services_consolidated.py ....                                     [ 49%]
tests/test_services_storage_consolidated.py ..........                       [ 50%]
tests/test_simple_db_adapter.py .........                                    [ 50%]
tests/test_sj_api.py ..............                                          [ 51%]
tests/test_sj_api_complete.py .............F....                             [ 53%]
tests/test_sj_api_config.py .....                                            [ 53%]
tests/test_sj_parser.py ........                                             [ 54%]
tests/test_sj_parser_complete.py ......FFFF..F.                              [ 55%]
tests/test_source_manager.py .................                               [ 56%]
tests/test_source_selector.py .................                              [ 57%]
tests/test_storage_abstractions.py ........                                  [ 58%]
tests/test_storage_complete.py .............                                 [ 59%]
tests/test_storage_components_complete.py ......F....FF...............F      [ 61%]
tests/test_storage_factory.py ........                                       [ 62%]
tests/test_storage_modules_consolidated.py ....                              [ 62%]
tests/test_target_companies.py .....                                         [ 62%]
tests/test_typed_data_processor.py ................                          [ 63%]
tests/test_ui_components_complete.py ......................................  [ 66%]
tests/test_ui_components_extended.py ..................                      [ 68%]
tests/test_ui_config.py .......................                              [ 69%]
tests/test_ui_helpers_comprehensive.py ..................................... [ 72%]
..                                                                           [ 72%]
tests/test_ui_helpers_extended.py ........................................   [ 75%]
tests/test_ui_modules_consolidated.py .....                                  [ 76%]
tests/test_ui_navigation.py ......................                           [ 77%]
tests/test_ui_navigation_complete.py ..s..                                   [ 78%]
tests/test_ui_navigation_comprehensive.py ......                             [ 78%]
tests/test_ui_navigation_extended.py .......F...........................     [ 81%]
tests/test_unified_api.py ................F...F.                             [ 82%]
tests/test_unified_api_complete.py ......F......................             [ 85%]
tests/test_unified_api_fixed.py ...                                          [ 85%]
tests/test_user_interface.py ...............                                 [ 86%]
tests/test_user_interface_consolidated.py F.F                                [ 86%]
tests/test_user_interface_fixed.py ...                                       [ 86%]
tests/test_utils_consolidated.py .....                                       [ 87%]
tests/test_utils_ui_consolidated.py ......                                   [ 87%]
tests/test_vacancy_abstractions.py .................                         [ 89%]
tests/test_vacancy_display_handler.py F..................                    [ 90%]
tests/test_vacancy_formatter.py ........                                     [ 91%]
tests/test_vacancy_models_complete.py ....                                   [ 91%]
tests/test_vacancy_models_consolidated.py ....                               [ 91%]
tests/test_vacancy_operations.py ......                                      [ 92%]
tests/test_vacancy_operations_coordinator.py ...........................     [ 94%]
tests/test_vacancy_operations_coordinator_complete.py F..................... [ 95%]
                                                                             [ 95%]
tests/test_vacancy_processing_coordinator.py .............                   [ 96%]
tests/test_vacancy_repository.py .........                                   [ 97%]
tests/test_vacancy_stats.py ............                                     [ 98%]
tests/test_vacancy_stats_fixed.py .........                                  [ 99%]
tests/test_vacancy_validator.py ............                                 [100%]

===================================== FAILURES =====================================
____________ TestMainApplicationInterfaceComplete.test_store_data_error ____________

self = <tests.test_main_application_interface_complete.TestMainApplicationInterfaceComplete object at 0x7f7614692ed0>
app_interface = <tests.test_main_application_interface_complete.ConcreteMainApp object at 0x7f7613473fd0>

    def test_store_data_error(self, app_interface):
        """Тест обработки ошибок при сохранении данных"""
        app_interface.storage.save.side_effect = Exception("Storage error")
    
>       with pytest.raises(Exception) as exc_info:
E       Failed: DID NOT RAISE <class 'Exception'>

tests/test_main_application_interface_complete.py:282: Failed
___________ TestMainApplicationInterfaceComplete.test_search_data_error ____________

self = <tests.test_main_application_interface_complete.TestMainApplicationInterfaceComplete object at 0x7f7614699310>
app_interface = <tests.test_main_application_interface_complete.ConcreteMainApp object at 0x7f7613529310>

    def test_search_data_error(self, app_interface):
        """Тест обработки ошибок при поиске"""
        app_interface.data_provider.search.side_effect = Exception("Search error")
    
>       with pytest.raises(Exception) as exc_info:
E       Failed: DID NOT RAISE <class 'Exception'>

tests/test_main_application_interface_complete.py:322: Failed
________ TestMainApplicationInterfaceComplete.test_get_storage_stats_error _________

self = <tests.test_main_application_interface_complete.TestMainApplicationInterfaceComplete object at 0x7f7614693e90>
app_interface = <tests.test_main_application_interface_complete.ConcreteMainApp object at 0x7f76135340d0>

    def test_get_storage_stats_error(self, app_interface):
        """Тест обработки ошибок при получении статистики"""
        app_interface.storage.get_stats.side_effect = Exception("Stats error")
    
>       with pytest.raises(Exception) as exc_info:
E       Failed: DID NOT RAISE <class 'Exception'>

tests/test_main_application_interface_complete.py:339: Failed
________ TestMainApplicationInterfaceComplete.test_clear_storage_data_error ________

self = <tests.test_main_application_interface_complete.TestMainApplicationInterfaceComplete object at 0x7f761469a010>
app_interface = <tests.test_main_application_interface_complete.ConcreteMainApp object at 0x7f761463e190>

    def test_clear_storage_data_error(self, app_interface):
        """Тест обработки ошибок при очистке хранилища"""
        app_interface.storage.clear.side_effect = Exception("Clear error")
    
>       with pytest.raises(Exception) as exc_info:
E       Failed: DID NOT RAISE <class 'Exception'>

tests/test_main_application_interface_complete.py:355: Failed
___________ TestMainApplicationInterfaceComplete.test_export_data_error ____________

self = <tests.test_main_application_interface_complete.TestMainApplicationInterfaceComplete object at 0x7f761469bcd0>
app_interface = <tests.test_main_application_interface_complete.ConcreteMainApp object at 0x7f7613316e90>

    def test_export_data_error(self, app_interface):
        """Тест обработки ошибок при экспорте"""
        app_interface.storage.export.side_effect = Exception("Export error")
    
>       with pytest.raises(Exception) as exc_info:
E       Failed: DID NOT RAISE <class 'Exception'>

tests/test_main_application_interface_complete.py:409: Failed
___________ TestMainApplicationInterfaceComplete.test_import_data_error ____________

self = <tests.test_main_application_interface_complete.TestMainApplicationInterfaceComplete object at 0x7f76146a0a10>
app_interface = <tests.test_main_application_interface_complete.ConcreteMainApp object at 0x7f761325add0>

    def test_import_data_error(self, app_interface):
        """Тест обработки ошибок при импорте"""
        app_interface.storage.import_data.side_effect = Exception("Import error")
    
>       with pytest.raises(Exception) as exc_info:
E       Failed: DID NOT RAISE <class 'Exception'>

tests/test_main_application_interface_complete.py:426: Failed
__________ TestMainApplicationInterfaceComplete.test_setup_logging_error ___________

self = <tests.test_main_application_interface_complete.TestMainApplicationInterfaceComplete object at 0x7f76146a1710>
app_interface = <tests.test_main_application_interface_complete.ConcreteMainApp object at 0x7f7613297250>

    def test_setup_logging_error(self, app_interface):
        """Тест обработки ошибок настройки логирования"""
        with patch('logging.basicConfig', side_effect=Exception("Logging error")):
>           with pytest.raises(Exception) as exc_info:
E           Failed: DID NOT RAISE <class 'Exception'>

tests/test_main_application_interface_complete.py:439: Failed
________ TestLowCoverageComponents.test_cached_api_concrete_implementation _________

self = <tests.test_missing_coverage_components.TestLowCoverageComponents object at 0x7f76146f25d0>

    def test_cached_api_concrete_implementation(self):
        """Тест конкретной реализации кэшированного API"""
        try:
            from src.api_modules.cached_api import CachedAPI
    
            class ConcreteCachedAPI(CachedAPI):
                def _get_empty_response(self):
                    return []
    
                def _validate_vacancy(self, vacancy):
                    return bool(vacancy.get('id'))
    
                def get_vacancies(self, query, **kwargs):
                    return [{"id": "1", "title": "Test"}]
    
                def get_vacancies_page(self, query, page=0, per_page=20, **kwargs):
                    return {"items": [], "found": 0}
    
            base_api = Mock()
            cache_dir = "/tmp/test_cache"
            with patch('src.utils.cache.FileCache'):
>               api = ConcreteCachedAPI(base_api, cache_dir=cache_dir)
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E               TypeError: CachedAPI.__init__() got multiple values for argument 'cache_dir'

tests/test_missing_coverage_components.py:299: TypeError
_______________ TestLowCoverageComponents.test_api_methods_coverage ________________

self = <tests.test_missing_coverage_components.TestLowCoverageComponents object at 0x7f76146f3190>
mock_get = <MagicMock name='get' id='140145110686928'>

    @patch('requests.get')
    def test_api_methods_coverage(self, mock_get):
        """Тест покрытия методов API"""
        try:
            from src.api_modules.hh_api import HeadHunterAPI
            from src.api_modules.sj_api import SuperJobAPI
    
            # Тестируем HeadHunter API
            mock_response = Mock()
            mock_response.status_code = 200
            mock_response.json.return_value = {"items": [], "found": 0}
            mock_get.return_value = mock_response
    
            hh_api = HeadHunterAPI()
            if hasattr(hh_api, 'get_vacancies_page'):
                result = hh_api.get_vacancies_page("Python")
                assert isinstance(result, (dict, list))
    
            # Тестируем SuperJob API
            sj_api = SuperJobAPI()
            if hasattr(sj_api, 'get_vacancies_page'):
                result = sj_api.get_vacancies_page("Python")
>               assert isinstance(result, dict)
E               assert False
E                +  where False = isinstance([], dict)

tests/test_missing_coverage_components.py:375: AssertionError
-------------------------------- Captured log call ---------------------------------
WARNING  src.api_modules.sj_api:sj_api.py:55 Используется тестовый API ключ SuperJob.                 Для полной функциональности добавьте реальный ключ                 в переменную окружения SUPERJOB_API_KEY
________________ TestSuperJobAPIComplete.test_deduplicate_vacancies ________________

self = <tests.test_sj_api_complete.TestSuperJobAPIComplete object at 0x7f76145ffc10>
sj_api = <src.api_modules.sj_api.SuperJobAPI object at 0x7f76137c25d0>

    def test_deduplicate_vacancies(self, sj_api):
        """Тест дедупликации вакансий"""
        mock_vacancies = [
            {"id": "1", "profession": "Test 1"},
            {"id": "2", "profession": "Test 2"}
        ]
    
>       with patch('src.api_modules.cached_api.CachedAPI._deduplicate_vacancies', return_value=mock_vacancies):

tests/test_sj_api_complete.py:187: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1446: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f76134ebad0>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <class 'src.api_modules.cached_api.CachedAPI'> does not have the attribute '_deduplicate_vacancies'

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1419: AttributeError
____________________ TestSJParserComplete.test_parse_none_data _____________________

self = <tests.test_sj_parser_complete.TestSJParserComplete object at 0x7f761461d950>
sj_parser = <Mock id='140145110394960'>

    def test_parse_none_data(self, sj_parser):
        """Тест парсинга None данных"""
        if hasattr(sj_parser, 'parse'):
>           with pytest.raises((TypeError, AttributeError, ValueError)):
E           Failed: DID NOT RAISE any of (<class 'TypeError'>, <class 'AttributeError'>, <class 'ValueError'>)

tests/test_sj_parser_complete.py:92: Failed
__________________ TestSJParserComplete.test_format_salary_range ___________________

self = <tests.test_sj_parser_complete.TestSJParserComplete object at 0x7f761461df90>
sj_parser = <Mock id='140145104439632'>

    def test_format_salary_range(self, sj_parser):
        """Тест форматирования диапазона зарплаты"""
        if hasattr(sj_parser, 'format_salary'):
            salary = sj_parser.format_salary(100000, 150000, "rub")
>           assert isinstance(salary, str)
E           AssertionError: assert False
E            +  where False = isinstance(<Mock name='mock.format_salary()' id='140145104447952'>, str)

tests/test_sj_parser_complete.py:99: AssertionError
________________ TestSJParserComplete.test_format_salary_from_only _________________

self = <tests.test_sj_parser_complete.TestSJParserComplete object at 0x7f761461e5d0>
sj_parser = <Mock id='140145104755728'>

    def test_format_salary_from_only(self, sj_parser):
        """Тест форматирования зарплаты только от"""
        if hasattr(sj_parser, 'format_salary'):
            salary = sj_parser.format_salary(100000, None, "rub")
>           assert isinstance(salary, str)
E           AssertionError: assert False
E            +  where False = isinstance(<Mock name='mock.format_salary()' id='140145104762896'>, str)

tests/test_sj_parser_complete.py:107: AssertionError
_________________ TestSJParserComplete.test_format_salary_to_only __________________

self = <tests.test_sj_parser_complete.TestSJParserComplete object at 0x7f761461ebd0>
sj_parser = <Mock id='140145110724816'>

    def test_format_salary_to_only(self, sj_parser):
        """Тест форматирования зарплаты только до"""
        if hasattr(sj_parser, 'format_salary'):
            salary = sj_parser.format_salary(None, 150000, "rub")
>           assert isinstance(salary, str)
E           AssertionError: assert False
E            +  where False = isinstance(<Mock name='mock.format_salary()' id='140145110720080'>, str)

tests/test_sj_parser_complete.py:114: AssertionError
_________________ TestSJParserComplete.test_validate_vacancy_data __________________

self = <tests.test_sj_parser_complete.TestSJParserComplete object at 0x7f7614611250>
sj_parser = <Mock id='140145101217040'>
sample_vacancy_data = {'candidat': 'Описание требований к кандидату', 'client': {'title': 'Тестовая компания'}, 'currency': 'rub', 'experience': {'title': 'От 3 до 6 лет'}, ...}

    def test_validate_vacancy_data(self, sj_parser, sample_vacancy_data):
        """Тест валидации данных вакансии"""
        if hasattr(sj_parser, 'validate'):
            is_valid = sj_parser.validate(sample_vacancy_data)
>           assert isinstance(is_valid, bool)
E           AssertionError: assert False
E            +  where False = isinstance(<Mock name='mock.validate()' id='140145101221392'>, bool)

tests/test_sj_parser_complete.py:133: AssertionError
___________________ TestPostgresSaver.test_save_vacancies_batch ____________________

self = <tests.test_storage_components_complete.TestPostgresSaver object at 0x7f7614479a50>
postgres_saver = <src.storage.postgres_saver.PostgresSaver object at 0x7f76141e6710>

    def test_save_vacancies_batch(self, postgres_saver):
        """Тест пакетного сохранения вакансий"""
        if not STORAGE_COMPONENTS_AVAILABLE:
            pytest.skip("Storage components not available")
    
        vacancies = [
            {"id": "1", "title": "Dev 1"},
            {"id": "2", "title": "Dev 2"}
        ]
    
>       with patch.object(postgres_saver, 'save', return_value=True) as mock_save:

tests/test_storage_components_complete.py:162: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1446: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f76141e7a50>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <src.storage.postgres_saver.PostgresSaver object at 0x7f76141e6710> does not have the attribute 'save'

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1419: AttributeError
_____________________ TestSimpleDBAdapter.test_insert_vacancy ______________________

self = <tests.test_storage_components_complete.TestSimpleDBAdapter object at 0x7f76143de110>
db_adapter = <src.storage.simple_db_adapter.SimpleDBAdapter object at 0x7f7612feec10>

    def test_insert_vacancy(self, db_adapter):
        """Тест вставки вакансий"""
        if not STORAGE_COMPONENTS_AVAILABLE:
            pytest.skip("Storage components not available")
    
        vacancy = {"id": "123", "title": "Test"}
    
>       with patch.object(db_adapter, '_connection') as mock_conn:

tests/test_storage_components_complete.py:239: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1446: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f7612fedcd0>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <src.storage.simple_db_adapter.SimpleDBAdapter object at 0x7f7612feec10> does not have the attribute '_connection'

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1419: AttributeError
______________________ TestSimpleDBAdapter.test_get_vacancies ______________________

self = <tests.test_storage_components_complete.TestSimpleDBAdapter object at 0x7f76143dd610>
db_adapter = <src.storage.simple_db_adapter.SimpleDBAdapter object at 0x7f761335f9d0>

    def test_get_vacancies(self, db_adapter):
        """Тест получения вакансий"""
        if not STORAGE_COMPONENTS_AVAILABLE:
            pytest.skip("Storage components not available")
    
>       with patch.object(db_adapter, '_connection') as mock_conn:

tests/test_storage_components_complete.py:252: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1446: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f761335fb50>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <src.storage.simple_db_adapter.SimpleDBAdapter object at 0x7f761335f9d0> does not have the attribute '_connection'

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1419: AttributeError
________ TestStorageIntegration.test_repository_with_validator_integration _________

self = <tests.test_storage_components_complete.TestStorageIntegration object at 0x7f76144cbbd0>

    def test_repository_with_validator_integration(self):
        """Тест интеграции Repository с Validator"""
        if not STORAGE_SUBCOMPONENTS_AVAILABLE:
            pytest.skip("Storage subcomponents not available")
    
        # Создаем моки с правильными context managers
        mock_connection = Mock()
        mock_cursor = Mock()
        mock_connection.cursor.return_value = Mock()
        mock_connection.cursor.return_value.__enter__ = Mock(return_value=mock_cursor)
        mock_connection.cursor.return_value.__exit__ = Mock(return_value=None)
        mock_connection.cursor.return_value.__exit__.return_value = None
>       mock_connection.__enter__.return_value = mock_connection
        ^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_storage_components_complete.py:534: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Mock id='140145110391632'>, name = '__enter__'

    def __getattr__(self, name):
        if name in {'_mock_methods', '_mock_unsafe'}:
            raise AttributeError(name)
        elif self._mock_methods is not None:
            if name not in self._mock_methods or name in _all_magics:
                raise AttributeError("Mock object has no attribute %r" % name)
        elif _is_magic(name):
>           raise AttributeError(name)
E           AttributeError: __enter__

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:655: AttributeError
__________ TestUINavigationExtended.test_paginate_display_custom_actions ___________

self = <tests.test_ui_navigation_extended.TestUINavigationExtended object at 0x7f7614431b50>
mock_print = <MagicMock name='print' id='140145105334544'>
mock_input = <MagicMock name='input' id='140145105331536'>

    @patch('builtins.input')
    @patch('builtins.print')
    def test_paginate_display_custom_actions(self, mock_print, mock_input):
        """Тестирование кастомных действий"""
        mock_action = Mock()
        mock_action.__doc__ = "Кастомное действие"
    
        custom_actions = {"c": mock_action}
        mock_input.side_effect = ["c", "q"]
    
        def formatter(item, number):
            return f"{number}: {item}"
    
        self.navigator.paginate_display(
            self.test_items[:5],
            formatter,
            "Custom Actions",
            custom_actions=custom_actions
        )
    
        # Проверяем что действие было вызвано (может быть вызвано с аргументами или без)
>       assert mock_action.called, "Custom action should have been called"
E       AssertionError: Custom action should have been called
E       assert False
E        +  where False = <Mock id='140145105333776'>.called

tests/test_ui_navigation_extended.py:137: AssertionError
__________________ TestUnifiedAPI.test_filter_by_target_companies __________________

self = <tests.test_unified_api.TestUnifiedAPI object at 0x7f7614255bd0>
unified_api = <src.api_modules.unified_api.UnifiedAPI object at 0x7f76130ace90>

    def test_filter_by_target_companies(self, unified_api):
        """Тест фильтрации по целевым компаниям"""
        # Мокаем TargetCompanies
        with patch('src.config.target_companies.TargetCompanies') as mock_target_companies:
            mock_target_companies.get_hh_ids.return_value = ["company1", "company2"]
            mock_target_companies.get_sj_ids.return_value = ["company3"]
    
            # Тестовые вакансии
            test_vacancies = [
                {"id": "1", "employer": {"id": "company1"}, "source": "hh"},
                {"id": "2", "employer": {"id": "company2"}, "source": "hh"},
                {"id": "3", "employer": {"id": "company3"}, "source": "sj"},
                {"id": "4", "employer": {"id": "unknown"}, "source": "hh"},
            ]
    
            result = unified_api._filter_by_target_companies(test_vacancies)
    
            # Должны остаться только вакансии от целевых компаний
>           assert len(result) == 3
E           assert 0 == 3
E            +  where 0 = len([])

tests/test_unified_api.py:282: AssertionError
___________ TestUnifiedAPI.test_filter_by_target_companies_mixed_sources ___________

self = <tests.test_unified_api.TestUnifiedAPI object at 0x7f7614257190>
unified_api = <src.api_modules.unified_api.UnifiedAPI object at 0x7f76141f2b10>

    def test_filter_by_target_companies_mixed_sources(self, unified_api):
        """Тест фильтрации вакансий из разных источников"""
        with patch('src.config.target_companies.TargetCompanies') as mock_target_companies:
            mock_target_companies.get_hh_ids.return_value = ["hh_company1", "hh_company2"]
            mock_target_companies.get_sj_ids.return_value = ["sj_company1"]
    
            # Вакансии из разных источников
            test_vacancies = [
                {"id": "1", "employer": {"id": "hh_company1"}, "source": "hh"},
                {"id": "2", "employer": {"id": "hh_company2"}, "source": "hh"},
                {"id": "3", "employer": {"id": "sj_company1"}, "source": "sj"},
                {"id": "4", "employer": {"id": "other_company"}, "source": "hh"},
            ]
    
            result = unified_api._filter_by_target_companies(test_vacancies)
    
            # Должны остаться вакансии от целевых компаний обоих источников
>           assert len(result) == 3
E           assert 0 == 3
E            +  where 0 = len([])

tests/test_unified_api.py:348: AssertionError
______________ TestUnifiedAPIComplete.test_filter_by_target_companies ______________

self = <tests.test_unified_api_complete.TestUnifiedAPIComplete object at 0x7f7614256f50>
unified_api = <src.api_modules.unified_api.UnifiedAPI object at 0x7f76130aff90>

    def test_filter_by_target_companies(self, unified_api):
        """Тест фильтрации по целевым компаниям"""
        mock_vacancies = [
            {
                "id": "1",
                "employer": {"id": "123"},
                "source": "hh"
            },
            {
                "id": "2",
                "employer": {"id": "999"},  # не в целевых
                "source": "hh"
            },
            {
                "id": "3",
                "id_client": "456",  # SJ формат
                "source": "sj"
            }
        ]
    
        mock_companies = [
            Mock(hh_id=123, sj_id=None),
            Mock(hh_id=None, sj_id=456)
        ]
    
>       with patch('src.api_modules.unified_api.TargetCompanies.get_all_companies', return_value=mock_companies):

tests/test_unified_api_complete.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1430: in __enter__
    self.target = self.getter()
                  ^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'src.api_modules.unified_api.TargetCompanies'

    def resolve_name(name):
        """
        Resolve a name to an object.
    
        It is expected that `name` will be a string in one of the following
        formats, where W is shorthand for a valid Python identifier and dot stands
        for a literal period in these pseudo-regexes:
    
        W(.W)*
        W(.W)*:(W(.W)*)?
    
        The first form is intended for backward compatibility only. It assumes that
        some part of the dotted name is a package, and the rest is an object
        somewhere within that package, possibly nested inside other objects.
        Because the place where the package stops and the object hierarchy starts
        can't be inferred by inspection, repeated attempts to import must be done
        with this form.
    
        In the second form, the caller makes the division point clear through the
        provision of a single colon: the dotted name to the left of the colon is a
        package to be imported, and the dotted name to the right is the object
        hierarchy within that package. Only one import is needed in this form. If
        it ends with the colon, then a module object is returned.
    
        The function will return an object (which might be a module), or raise one
        of the following exceptions:
    
        ValueError - if `name` isn't in a recognised format
        ImportError - if an import failed when it shouldn't have
        AttributeError - if a failure occurred when traversing the object hierarchy
                         within the imported package to get to the desired object.
        """
        global _NAME_PATTERN
        if _NAME_PATTERN is None:
            # Lazy import to speedup Python startup time
            import re
            dotted_words = r'(?!\d)(\w+)(\.(?!\d)(\w+))*'
            _NAME_PATTERN = re.compile(f'^(?P<pkg>{dotted_words})'
                                       f'(?P<cln>:(?P<obj>{dotted_words})?)?$',
                                       re.UNICODE)
    
        m = _NAME_PATTERN.match(name)
        if not m:
            raise ValueError(f'invalid format: {name!r}')
        gd = m.groupdict()
        if gd.get('cln'):
            # there is a colon - a one-step import is all that's needed
            mod = importlib.import_module(gd['pkg'])
            parts = gd.get('obj')
            parts = parts.split('.') if parts else []
        else:
            # no colon - have to iterate to find the package boundary
            parts = name.split('.')
            modname = parts.pop(0)
            # first part *must* be a module/package.
            mod = importlib.import_module(modname)
            while parts:
                p = parts[0]
                s = f'{modname}.{p}'
                try:
                    mod = importlib.import_module(s)
                    parts.pop(0)
                    modname = s
                except ImportError:
                    break
        # if we reach this point, mod is the module, already imported, and
        # parts is the list of parts in the object hierarchy to be traversed, or
        # an empty list if just the module is wanted.
        result = mod
        for p in parts:
>           result = getattr(result, p)
                     ^^^^^^^^^^^^^^^^^^
E           AttributeError: module 'src.api_modules.unified_api' has no attribute 'TargetCompanies'

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/pkgutil.py:715: AttributeError
____________ TestUserInterfaceConsolidated.test_main_interface_complete ____________

args = (<tests.test_user_interface_consolidated.TestUserInterfaceConsolidated object at 0x7f7614288e10>,)
keywargs = {}

    @wraps(func)
    def patched(*args, **keywargs):
>       with self.decoration_helper(patched,
                                    args,
                                    keywargs) as (newargs, newkeywargs):

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1375: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
           ^^^^^^^^^^^^^^
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1357: in decoration_helper
    arg = exit_stack.enter_context(patching)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/contextlib.py:517: in enter_context
    result = _enter(cm)
             ^^^^^^^^^^
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1446: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f761428b410>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'src.user_interface' from '/home/runner/workspace/tests/../src/user_interface.py'> does not have the attribute 'DBManager'

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1419: AttributeError
_______ TestUserInterfaceConsolidated.test_interface_components_integration ________

self = <tests.test_user_interface_consolidated.TestUserInterfaceConsolidated object at 0x7f761428ba90>

    def test_interface_components_integration(self):
        """Тестирование интеграции компонентов интерфейса"""
        try:
            from src.interfaces.main_application_interface import MainApplicationInterface
    
            # Создаем конкретную реализацию абстрактного класса
            class ConcreteMainApplication(MainApplicationInterface):
                def run_application(self):
                    pass
    
>           interface = ConcreteMainApplication()
                        ^^^^^^^^^^^^^^^^^^^^^^^^^
E           TypeError: MainApplicationInterface.__init__() missing 3 required positional arguments: 'provider', 'processor', and 'storage'

tests/test_user_interface_consolidated.py:96: TypeError
___________ TestVacancyDisplayHandler.test_vacancy_display_handler_init ____________

self = <tests.test_vacancy_display_handler.TestVacancyDisplayHandler object at 0x7f76142d4fd0>

    def test_vacancy_display_handler_init(self):
        """Тест инициализации обработчика отображения вакансий"""
>       handler = VacancyDisplayHandler()
                  ^^^^^^^^^^^^^^^^^^^^^^^
E       TypeError: VacancyDisplayHandler.__init__() missing 1 required positional argument: 'storage'

tests/test_vacancy_display_handler.py:43: TypeError
__________ TestVacancyOperationsCoordinatorComplete.test_coordinator_init __________

self = <tests.test_vacancy_operations_coordinator_complete.TestVacancyOperationsCoordinatorComplete object at 0x7f7614141750>

    def test_coordinator_init(self):
        """Тест инициализации координатора операций с вакансиями"""
>       coordinator = VacancyOperationsCoordinator()
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       TypeError: VacancyOperationsCoordinator.__init__() missing 2 required positional arguments: 'unified_api' and 'storage'

tests/test_vacancy_operations_coordinator_complete.py:50: TypeError
================================== tests coverage ==================================
_________________ coverage: platform linux, python 3.11.13-final-0 _________________

Name                                                     Stmts   Miss  Cover   Missing
--------------------------------------------------------------------------------------
src/__init__.py                                              0      0   100%
src/api_modules/__init__.py                                  0      0   100%
src/api_modules/base_api.py                                 23      0   100%
src/api_modules/cached_api.py                              168     47    72%   114-115, 144-147, 157, 159, 166-168, 183, 186-187, 203, 215-238, 247, 267-269, 289, 298-299, 308-310, 335-336, 340-342
src/api_modules/get_api.py                                  53     19    64%   46-54, 64, 73-74, 102-103, 116-118, 124, 126-132, 134, 136
src/api_modules/hh_api.py                                  142     25    82%   77-85, 169, 178-180, 219-221, 233, 256, 276, 289, 293-295, 329-331
src/api_modules/sj_api.py                                  128     28    78%   99-106, 206-210, 222, 263-264, 277-279, 291-292, 296-308
src/api_modules/unified_api.py                             270     77    71%   124, 133, 154-155, 175-176, 212-213, 221-240, 245, 291-293, 304-306, 316-322, 390-391, 401-418, 422-432, 436-458
src/config/__init__.py                                       0      0   100%
src/config/api_config.py                                    13      0   100%
src/config/app_config.py                                    17      0   100%
src/config/db_config.py                                     61     27    56%   24, 44-48, 85-88, 96-99, 104, 107, 115, 133-136, 156-172
src/config/hh_api_config.py                                 21      2    90%   31, 37
src/config/sj_api_config.py                                 49     18    63%   39, 59, 62, 68-75, 79-87
src/config/target_companies.py                              61     25    59%   119, 124-130, 135-138, 143-146, 151, 156-162, 167, 185, 190
src/config/ui_config.py                                     27      8    70%   36-42, 54-58, 79
src/interfaces/__init__.py                                   0      0   100%
src/interfaces/main_application_interface.py               121     88    27%   76, 89-98, 109-136, 140-152, 156-161, 166-180, 184-214, 224-225, 230, 234-236
src/storage/__init__.py                                      6      0   100%
src/storage/abstract.py                                     14      0   100%
src/storage/abstract_db_manager.py                          21      6    71%   16, 26, 36, 46, 59, 69
src/storage/components/__init__.py                           0      0   100%
src/storage/components/database_connection.py               53     11    79%   14-16, 19-20, 77-78, 88-89, 97-98
src/storage/components/vacancy_repository.py               113     67    41%   50-51, 96-98, 119-134, 146-150, 154-156, 174-178, 190-209, 221-291
src/storage/components/vacancy_validator.py                 65     22    66%   62, 65, 73-74, 78-79, 92, 99, 110, 115, 120, 138-152
src/storage/db_manager.py                                  348    224    36%   17-24, 63, 83-139, 223-228, 246-247, 262-272, 282-338, 348-361, 376-405, 419-451, 519-522, 525-528, 533-535, 574-576, 590-651, 665, 671-728, 741-813, 818-820, 832, 844-845, 857-859, 871-877, 892-1022
src/storage/interfaces/typed_data_processor.py              46     25    46%   32, 45, 64, 78, 94, 100, 106-117, 124, 130-133, 139-148
src/storage/postgres_saver.py                              790    557    29%   10-13, 72-74, 109-111, 124-125, 133-140, 145-146, 148-151, 176-183, 188-194, 199-200, 202-205, 263-265, 280-281, 295-305, 310-317, 322-323, 325-328, 338, 342-343, 346, 374-380, 389-390, 399-400, 404-409, 417-419, 427-428, 442-445, 452, 455-458, 473, 480, 487, 594-598, 603-606, 627-634, 655, 662-664, 678, 690-692, 704-708, 721-779, 783-895, 918-958, 961, 968-970, 974-992, 996-1020, 1024-1048, 1055, 1067-1098, 1102-1113, 1125-1180, 1184-1196, 1208-1251, 1264-1303, 1323-1574, 1587-1601, 1611, 1614, 1617-1635
src/storage/services/__init__.py                             4      0   100%
src/storage/services/abstract_filter_service.py             30      7    77%   34, 44, 64, 88, 101, 114, 127
src/storage/services/abstract_storage_service.py            25      6    76%   34, 47, 60, 73, 83, 93
src/storage/services/company_id_filter_service.py           94     62    34%   49, 62, 68-76, 85-135, 141-202, 206-214, 223
src/storage/services/deduplication_service.py               64     43    33%   15-16, 20-21, 43, 56-129, 133-142, 146-154, 183, 192
src/storage/services/filtering_service.py                  105     66    37%   15-16, 20-21, 25-26, 48, 76-88, 95-132, 143-155, 159-170, 189-199, 228, 237
src/storage/services/sql_deduplication_service.py           64     49    23%   44-64, 68-111, 116-148, 152-160, 173-182
src/storage/services/sql_filter_service.py                  89     63    29%   47, 59-78, 82-146, 152-191, 195-202, 207-209, 218-247
src/storage/services/vacancy_processing_coordinator.py      44      0   100%
src/storage/services/vacancy_storage_service.py            334    245    27%   15-16, 20-21, 25-26, 31-32, 37-38, 42-43, 47-48, 52-53, 57-58, 93-94, 119-146, 150-170, 176-194, 211-215, 220-222, 226-238, 244-320, 334, 338-339, 360-362, 366-395, 402-404, 417-469, 499, 511-535, 539-590, 594-601, 606, 610, 614, 618
src/storage/simple_db_adapter.py                           142    116    18%   21, 25, 29, 33, 37-43, 50-51, 54, 57, 61-101, 105-117, 121, 125-165, 169-202, 206-210, 219
src/storage/storage_factory.py                              13      0   100%
src/ui_interfaces/__init__.py                                0      0   100%
src/ui_interfaces/console_interface.py                     394    306    22%   23-25, 69, 82, 84, 86, 88, 90, 92, 94, 97, 100, 102-110, 116-127, 157, 161, 165, 169, 173-224, 228-301, 305, 309, 319-355, 359, 370-371, 382-385, 395-544, 548-579, 584-604
src/ui_interfaces/source_selector.py                        44     30    32%   25-51, 64, 74-79
src/ui_interfaces/vacancy_display_handler.py                72     58    19%   32-70, 74-107, 111-141
src/ui_interfaces/vacancy_operations_coordinator.py        194    105    46%   68-79, 100, 102, 104, 108, 116-122, 126-165, 169-192, 196-198, 211, 248-273, 302-322
src/ui_interfaces/vacancy_search_handler.py                152    127    16%   38-76, 90-114, 124, 135-170, 180-197, 209-232, 248-262, 272-308
src/user_interface.py                                       55     47    15%   26-94, 98
src/utils/__init__.py                                        0      0   100%
src/utils/abstract_filter.py                                26     14    46%   30, 47, 61, 75, 88-102
src/utils/api_data_filter.py                               154     88    43%   9-10, 25, 55-56, 71-83, 97, 105-106, 122, 130-131, 148-160, 173-185, 191-196, 206, 212, 215, 217, 223-241, 245, 256, 269, 275-284, 288-307
src/utils/base_formatter.py                                 38     11    71%   14, 19, 24, 29, 34, 39, 44, 49, 54, 59, 64
src/utils/cache.py                                         135     38    72%   45-46, 61-62, 78, 93-94, 98-100, 115-117, 124-126, 130-139, 165, 169-170, 174-176, 209-210, 224, 236-238, 244
src/utils/data_normalizers.py                               75     13    83%   77-80, 107, 113-121, 154-162
src/utils/db_manager_demo.py                               236    218     8%   32, 38-64, 73-81, 85-103, 107-155, 159-211, 215-224, 228-272, 276-315, 319-370, 377-382, 386
src/utils/decorators.py                                     73     53    27%   24-52, 56-57, 61, 77-91, 97-106, 112-121
src/utils/description_parser.py                             70     55    21%   41-64, 77-103, 116-135, 141-177
src/utils/env_loader.py                                     59     34    42%   32-33, 41-76, 104-111
src/utils/file_handlers.py                                  38     25    34%   36-48, 57-76
src/utils/menu_manager.py                                   49      8    84%   38, 52-56, 77, 93
src/utils/paginator.py                                      28      9    68%   43-44, 51-52, 57-61
src/utils/salary.py                                        113     18    84%   35-36, 55-61, 71-72, 78, 94, 152, 157, 164, 181, 207
src/utils/search_utils.py                                  156      6    96%   204, 215, 219, 223, 227, 282
src/utils/source_manager.py                                 60     38    37%   65, 77-80, 92-95, 108-119, 131-134, 146, 158-161, 173-176, 188-191, 198-200
src/utils/ui_helpers.py                                    161      4    98%   135, 225-226, 325
src/utils/ui_navigation.py                                  99      0   100%
src/utils/vacancy_formatter.py                             167     59    65%   122, 129, 148, 154, 159-164, 170-171, 176, 182, 188-201, 206, 213, 218, 225, 229-231, 235-241, 246, 259-262, 273-304
src/utils/vacancy_operations.py                            165     99    40%   43, 64, 75-87, 111, 122-134, 159, 170-182, 220-244, 248-261, 264-265, 268-269, 290-310, 320-339, 346-370
src/utils/vacancy_stats.py                                  86     53    38%   57-60, 83-91, 95-100, 110-158, 163-165
src/vacancies/__init__.py                                    0      0   100%
src/vacancies/abstract.py                                   10      0   100%
src/vacancies/abstract_models.py                            99     28    72%   18, 23, 28, 33, 38, 44, 53, 58, 63, 69, 75, 84, 89, 94, 100, 106, 115, 120, 125, 130, 135, 140, 146, 155, 160, 165, 171, 177
src/vacancies/models.py                                    390    212    46%   40, 44, 48, 64, 77, 81, 89, 91, 93, 98-102, 106, 122, 126, 131-133, 141, 144, 149, 153, 169, 173, 178-180, 188, 191, 196, 200, 299, 317, 329-332, 344, 348, 352, 358, 370, 374, 378, 384, 404-438, 443-451, 456-651, 670, 686, 701-706, 720, 725-727, 731-733, 737-739, 743-745, 749
src/vacancies/parsers/__init__.py                           55     11    80%   16, 21, 26, 31, 36, 88, 97, 106, 111, 116, 121
src/vacancies/parsers/base_parser.py                         9      2    78%   19, 32
src/vacancies/parsers/hh_parser.py                          55     10    82%   21, 32-33, 55-57, 96-98, 119
src/vacancies/parsers/sj_parser.py                          57     47    18%   24-43, 57-65, 98-147
--------------------------------------------------------------------------------------
TOTAL                                                     7192   3759    48%
============================= short test summary info ==============================
FAILED tests/test_main_application_interface_complete.py::TestMainApplicationInterfaceComplete::test_store_data_error - Failed: DID NOT RAISE <class 'Exception'>
FAILED tests/test_main_application_interface_complete.py::TestMainApplicationInterfaceComplete::test_search_data_error - Failed: DID NOT RAISE <class 'Exception'>
FAILED tests/test_main_application_interface_complete.py::TestMainApplicationInterfaceComplete::test_get_storage_stats_error - Failed: DID NOT RAISE <class 'Exception'>
FAILED tests/test_main_application_interface_complete.py::TestMainApplicationInterfaceComplete::test_clear_storage_data_error - Failed: DID NOT RAISE <class 'Exception'>
FAILED tests/test_main_application_interface_complete.py::TestMainApplicationInterfaceComplete::test_export_data_error - Failed: DID NOT RAISE <class 'Exception'>
FAILED tests/test_main_application_interface_complete.py::TestMainApplicationInterfaceComplete::test_import_data_error - Failed: DID NOT RAISE <class 'Exception'>
FAILED tests/test_main_application_interface_complete.py::TestMainApplicationInterfaceComplete::test_setup_logging_error - Failed: DID NOT RAISE <class 'Exception'>
FAILED tests/test_missing_coverage_components.py::TestLowCoverageComponents::test_cached_api_concrete_implementation - TypeError: CachedAPI.__init__() got multiple values for argument 'cache_dir'
FAILED tests/test_missing_coverage_components.py::TestLowCoverageComponents::test_api_methods_coverage - assert False
FAILED tests/test_sj_api_complete.py::TestSuperJobAPIComplete::test_deduplicate_vacancies - AttributeError: <class 'src.api_modules.cached_api.CachedAPI'> does not have th...
FAILED tests/test_sj_parser_complete.py::TestSJParserComplete::test_parse_none_data - Failed: DID NOT RAISE any of (<class 'TypeError'>, <class 'AttributeError'>, <c...
FAILED tests/test_sj_parser_complete.py::TestSJParserComplete::test_format_salary_range - AssertionError: assert False
FAILED tests/test_sj_parser_complete.py::TestSJParserComplete::test_format_salary_from_only - AssertionError: assert False
FAILED tests/test_sj_parser_complete.py::TestSJParserComplete::test_format_salary_to_only - AssertionError: assert False
FAILED tests/test_sj_parser_complete.py::TestSJParserComplete::test_validate_vacancy_data - AssertionError: assert False
FAILED tests/test_storage_components_complete.py::TestPostgresSaver::test_save_vacancies_batch - AttributeError: <src.storage.postgres_saver.PostgresSaver object at 0x7f76141e6...
FAILED tests/test_storage_components_complete.py::TestSimpleDBAdapter::test_insert_vacancy - AttributeError: <src.storage.simple_db_adapter.SimpleDBAdapter object at 0x7f76...
FAILED tests/test_storage_components_complete.py::TestSimpleDBAdapter::test_get_vacancies - AttributeError: <src.storage.simple_db_adapter.SimpleDBAdapter object at 0x7f76...
FAILED tests/test_storage_components_complete.py::TestStorageIntegration::test_repository_with_validator_integration - AttributeError: __enter__
FAILED tests/test_ui_navigation_extended.py::TestUINavigationExtended::test_paginate_display_custom_actions - AssertionError: Custom action should have been called
FAILED tests/test_unified_api.py::TestUnifiedAPI::test_filter_by_target_companies - assert 0 == 3
FAILED tests/test_unified_api.py::TestUnifiedAPI::test_filter_by_target_companies_mixed_sources - assert 0 == 3
FAILED tests/test_unified_api_complete.py::TestUnifiedAPIComplete::test_filter_by_target_companies - AttributeError: module 'src.api_modules.unified_api' has no attribute 'TargetCo...
FAILED tests/test_user_interface_consolidated.py::TestUserInterfaceConsolidated::test_main_interface_complete - AttributeError: <module 'src.user_interface' from '/home/runner/workspace/tests...
FAILED tests/test_user_interface_consolidated.py::TestUserInterfaceConsolidated::test_interface_components_integration - TypeError: MainApplicationInterface.__init__() missing 3 required positional ar...
FAILED tests/test_vacancy_display_handler.py::TestVacancyDisplayHandler::test_vacancy_display_handler_init - TypeError: VacancyDisplayHandler.__init__() missing 1 required positional argum...
FAILED tests/test_vacancy_operations_coordinator_complete.py::TestVacancyOperationsCoordinatorComplete::test_coordinator_init - TypeError: VacancyOperationsCoordinator.__init__() missing 2 required positiona...
=================== 27 failed, 1292 passed, 10 skipped in 12.30s ===================
~/workspace$ 