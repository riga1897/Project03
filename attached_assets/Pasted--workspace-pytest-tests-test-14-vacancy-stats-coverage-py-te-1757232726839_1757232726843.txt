~/workspace$ pytest tests/test_14_vacancy_stats_coverage.py 
=================================== test session starts ====================================
platform linux -- Python 3.11.13, pytest-8.4.2, pluggy-1.6.0
rootdir: /home/runner/workspace
configfile: pyproject.toml
plugins: cov-6.2.1, mock-3.15.0
collected 50 items                                                                         

tests/test_14_vacancy_stats_coverage.py ...................F........................ [ 88%]
..F...                                                                               [100%]

========================================= FAILURES =========================================
___________________ TestDisplayCompanyStats.test_vacancy_with_exception ____________________

self = <MagicMock name='print' id='140188207411152'>
args = ('Ошибка обработки вакансии для статистики: Test error',), kwargs = {}
expected = call('Ошибка обработки вакансии для статистики: Test error'), cause = None
actual = [call('Статистика по компаниям: 1 вакансий'), call('\nТоп компаний по количеству вакансий:'), call("  <Mock id='140188207703312'>: 1 вакансий")]
expected_string = "print('Ошибка обработки вакансии для статистики: Test error')"

    def assert_any_call(self, /, *args, **kwargs):
        """assert the mock has been called with the specified arguments.
    
        The assert passes if the mock has *ever* been called, unlike
        `assert_called_with` and `assert_called_once_with` that only pass if
        the call is the most recent one."""
        expected = self._call_matcher(_Call((args, kwargs), two=True))
        cause = expected if isinstance(expected, Exception) else None
        actual = [self._call_matcher(c) for c in self.call_args_list]
        if cause or expected not in _AnyComparer(actual):
            expected_string = self._format_mock_call_signature(args, kwargs)
>           raise AssertionError(
                '%s call not found' % expected_string
            ) from cause
E           AssertionError: print('Ошибка обработки вакансии для статистики: Test error') call not found

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1010: AssertionError

During handling of the above exception, another exception occurred:

self = <tests.test_14_vacancy_stats_coverage.TestDisplayCompanyStats object at 0x7f801c526a50>
mock_print = <MagicMock name='print' id='140188207411152'>

    @patch('builtins.print')
    def test_vacancy_with_exception(self, mock_print):
        """Покрытие исключения при обработке вакансии."""
        # Создаем объект, который вызовет исключение
        mock_vacancy = Mock()
        mock_vacancy.employer = Mock()
        # Настроим так, чтобы обращение к name вызывало исключение
        type(mock_vacancy.employer).name = Mock(side_effect=Exception("Test error"))
    
        stats = VacancyStats()
        stats.display_company_stats([mock_vacancy])
    
        # Проверяем что сообщение об ошибке было выведено
>       mock_print.assert_any_call("Ошибка обработки вакансии для статистики: Test error")
E       AssertionError: print('Ошибка обработки вакансии для статистики: Test error') call not found
E       
E       pytest introspection follows:
E       
E       Args:
E       assert ("  <Mock id=... 1 вакансий",) == ('Ошибка обра... Test error',)
E         
E         At index 0 diff: "  <Mock id='140188207703312'>: 1 вакансий" != 'Ошибка обработки вакансии для статистики: Test error'
E         Use -v to get more diff

tests/test_14_vacancy_stats_coverage.py:305: AssertionError
_____________ TestEdgeCases.test_extract_company_name_with_employer_id_mapping _____________

self = <tests.test_14_vacancy_stats_coverage.TestEdgeCases object at 0x7f801c536d50>

    def test_extract_company_name_with_employer_id_mapping(self):
        """Покрытие маппинга employer_id в SuperJob формате."""
        vacancy = {
            "firm_name": "Test Firm",
            "firm_id": "123"
        }
    
        # Создаем mock объект с атрибутом employer_id для проверки маппинга
        mock_vacancy = Mock()
        mock_vacancy.employer_id = None
    
        # Патчим hasattr для проверки ветки с employer_id
        with patch('builtins.hasattr', return_value=True):
>           result = VacancyStatsExtended._extract_company_name(vacancy)
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_14_vacancy_stats_coverage.py:613: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

vacancy = {'firm_id': '123', 'firm_name': 'Test Firm'}

    @staticmethod
    def _extract_company_name(vacancy: Dict[str, Any]) -> str:
        """
        Извлечь название компании из данных вакансии (приоритет - сырые данные API)
    
        Args:
            vacancy: Данные вакансии (сырые данные API или объект Vacancy)
    
        Returns:
            str: Название компании или "Неизвестная компания"
        """
        # ПРИОРИТЕТ 1: Объекты Vacancy - атрибут employer (новая структура)
>       if hasattr(vacancy, "employer") and vacancy.employer:
                                            ^^^^^^^^^^^^^^^^
E       AttributeError: 'dict' object has no attribute 'employer'

src/utils/vacancy_stats.py:210: AttributeError
================================= short test summary info ==================================
FAILED tests/test_14_vacancy_stats_coverage.py::TestDisplayCompanyStats::test_vacancy_with_exception - AssertionError: print('Ошибка обработки вакансии для статистики: Test error') call not ...
FAILED tests/test_14_vacancy_stats_coverage.py::TestEdgeCases::test_extract_company_name_with_employer_id_mapping - AttributeError: 'dict' object has no attribute 'employer'
=============================== 2 failed, 48 passed in 0.35s ===============================
~/workspace$ 