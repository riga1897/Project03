=========================== 8 failed, 1 passed in 0.11s ============================
~/workspace$ pytest tests/test_abstract_filter_complete.py^C
~/workspace$ pytest --cov=src --cov-report=term-missing
=============================== test session starts ================================
platform linux -- Python 3.11.13, pytest-8.4.2, pluggy-1.6.0
rootdir: /home/runner/workspace
configfile: pyproject.toml
plugins: cov-6.2.1, mock-3.15.0
collected 1280 items                                                               

tests/test_abstract.py ........                                              [  0%]
tests/test_abstract_db_manager.py ....                                       [  0%]
tests/test_abstract_filter_complete.py ........F                             [  1%]
tests/test_api_complete.py ...................                               [  3%]
tests/test_api_config.py ....                                                [  3%]
tests/test_api_data_filter.py ......                                         [  3%]
tests/test_api_fixes.py .......                                              [  4%]
tests/test_api_modules.py .............................                      [  6%]
tests/test_api_modules_consolidated.py ....                                  [  7%]
tests/test_app_config.py .........                                           [  7%]
tests/test_base_api.py ...............                                       [  8%]
tests/test_base_formatter.py ....FFFFFFFFFF                                  [ 10%]
tests/test_base_formatter_complete.py ..............................         [ 12%]
tests/test_base_parser.py ......                                             [ 12%]
tests/test_cache.py ......................                                   [ 14%]
tests/test_cached_api.py ....                                                [ 14%]
tests/test_cached_api_complete.py sssssssssssssssssssFsssssssss              [ 17%]
tests/test_components_fixed.py ...                                           [ 17%]
tests/test_comprehensive_fixed.py s....                                      [ 17%]
tests/test_config_consolidated.py .....                                      [ 18%]
tests/test_config_missing_coverage.py ssssssssss.............ss...           [ 20%]
tests/test_config_modules_consolidated.py ......                             [ 20%]
tests/test_console_interface.py ......                                       [ 21%]
tests/test_core_functionality_consolidated.py .....                          [ 21%]
tests/test_core_modules_comprehensive.py ........                            [ 22%]
tests/test_data_normalizers_comprehensive.py ............................    [ 24%]
tests/test_database_connection.py ........                                   [ 25%]
tests/test_db_config.py .....                                                [ 25%]
tests/test_db_manager.py .................                                   [ 26%]
tests/test_decorators.py .......                                             [ 27%]
tests/test_description_parser.py ..........                                  [ 28%]
tests/test_env_loader.py ................                                    [ 29%]
tests/test_filter_utils.py ssssss                                            [ 29%]
tests/test_get_api_complete.py ssssssssssssssssssss                          [ 31%]
tests/test_hh_api_complete.py .................                              [ 32%]
tests/test_hh_api_config.py .....                                            [ 33%]
tests/test_hh_parser.py ........                                             [ 33%]
tests/test_integration.py .............                                      [ 34%]
tests/test_interfaces.py Fss                                                 [ 35%]
tests/test_main_application_interface.py F.F                                 [ 35%]
tests/test_main_application_interface_complete.py ..FFFFF...F...F.F..F.F.FFF [ 37%]
FF.FF.F.FFF.....F                                                            [ 38%]
tests/test_main_consolidated.py .........                                    [ 39%]
tests/test_menu_manager.py ..........                                        [ 40%]
tests/test_missing_components.py .........                                   [ 40%]
tests/test_missing_coverage_components.py ......F.....FFF..                  [ 42%]
tests/test_models_fixed.py ...                                               [ 42%]
tests/test_paginator.py ......                                               [ 42%]
tests/test_parsers_complete.py sss.sss.ssss                                  [ 43%]
tests/test_repository_fixed.py ..                                            [ 43%]
tests/test_salary_fixed.py ...........                                       [ 44%]
tests/test_salary_utils.py ......................                            [ 46%]
tests/test_search_utils.py ............................                      [ 48%]
tests/test_search_utils_complete.py .................FF.FFFFFFF............. [ 51%]
......                                                                       [ 52%]
tests/test_services_consolidated.py ....                                     [ 52%]
tests/test_services_storage_consolidated.py ..........                       [ 53%]
tests/test_simple_db_adapter.py .........                                    [ 54%]
tests/test_sj_api.py ..............                                          [ 55%]
tests/test_sj_api_complete.py .............F....                             [ 56%]
tests/test_sj_api_config.py .....                                            [ 56%]
tests/test_sj_parser.py ........                                             [ 57%]
tests/test_sj_parser_complete.py ssssssssssssss                              [ 58%]
tests/test_source_manager.py .................                               [ 60%]
tests/test_source_selector.py .................                              [ 61%]
tests/test_storage_abstractions.py ssssssss                                  [ 61%]
tests/test_storage_complete.py .............                                 [ 62%]
tests/test_storage_factory.py ........                                       [ 63%]
tests/test_storage_modules_consolidated.py .F..                              [ 63%]
tests/test_target_companies.py .....                                         [ 64%]
tests/test_typed_data_processor.py ................                          [ 65%]
tests/test_ui_components_extended.py .F................                      [ 66%]
tests/test_ui_config.py .......................                              [ 68%]
tests/test_ui_helpers_comprehensive.py ..................................... [ 71%]
..                                                                           [ 71%]
tests/test_ui_helpers_extended.py ........................................   [ 74%]
tests/test_ui_modules_consolidated.py .....                                  [ 75%]
tests/test_ui_navigation.py ......................                           [ 77%]
tests/test_ui_navigation_complete.py ..s..                                   [ 77%]
tests/test_ui_navigation_comprehensive.py ......                             [ 77%]
tests/test_ui_navigation_extended.py .......FF..........................     [ 80%]
tests/test_unified_api.py ................F...F.                             [ 82%]
tests/test_unified_api_complete.py ......F......................             [ 84%]
tests/test_unified_api_fixed.py ...                                          [ 84%]
tests/test_user_interface.py ...............                                 [ 86%]
tests/test_user_interface_consolidated.py F.F                                [ 86%]
tests/test_user_interface_fixed.py ...                                       [ 86%]
tests/test_utils_consolidated.py .....                                       [ 86%]
tests/test_utils_ui_consolidated.py ......                                   [ 87%]
tests/test_vacancy_abstractions.py .................                         [ 88%]
tests/test_vacancy_display_handler.py F..................                    [ 90%]
tests/test_vacancy_formatter.py ........                                     [ 90%]
tests/test_vacancy_models_complete.py F...                                   [ 91%]
tests/test_vacancy_models_consolidated.py ....                               [ 91%]
tests/test_vacancy_operations.py ......                                      [ 91%]
tests/test_vacancy_operations_coordinator.py ...........................     [ 93%]
tests/test_vacancy_operations_coordinator_complete.py F..................... [ 95%]
                                                                             [ 95%]
tests/test_vacancy_processing_coordinator.py .............                   [ 96%]
tests/test_vacancy_repository.py F........                                   [ 97%]
tests/test_vacancy_stats.py ............                                     [ 98%]
tests/test_vacancy_stats_fixed.py .........                                  [ 99%]
tests/test_vacancy_validator.py ............                                 [100%]

===================================== FAILURES =====================================
__________________ TestAbstractFilterIntegration.test_edge_cases ___________________

self = <tests.test_abstract_filter_complete.TestAbstractFilterIntegration object at 0x7fe888316e10>

    def test_edge_cases(self):
        """Тест граничных случаев"""
        if not ABSTRACT_FILTER_AVAILABLE:
            pytest.skip("AbstractDataFilter not available")
    
        filter_instance = ConcreteDataFilter()
    
        # Тест с нулевой зарплатой
        test_data = [{'id': 1, 'salary': {'from': 0}}]
        result = filter_instance.filter_by_salary(test_data, min_salary=0)
        assert len(result) == 1
    
        # Тест с отрицательными значениями
        test_data = [{'id': 1, 'salary': {'from': -1000}}]
        result = filter_instance.filter_by_salary(test_data, min_salary=0)
>       assert len(result) == 0
E       AssertionError: assert 1 == 0
E        +  where 1 = len([{'id': 1, 'salary': {'from': -1000}}])

tests/test_abstract_filter_complete.py:192: AssertionError
__________________ TestBaseFormatter.test_format_item_with_index ___________________

self = <tests.test_base_formatter.TestBaseFormatter object at 0x7fe887fb0550>
formatter = <tests.test_base_formatter.TestBaseFormatter.formatter.<locals>.ConcreteFormatter object at 0x7fe8864a1bd0>

    def test_format_item_with_index(self, formatter):
        """Тест форматирования элемента с индексом"""
        if not BASE_FORMATTER_AVAILABLE:
            # Mocking the method if BaseFormatter is not available
            formatter.format_item.return_value = "1. test"
>       result = formatter.format_item("test", 1)
                 ^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: 'ConcreteFormatter' object has no attribute 'format_item'

tests/test_base_formatter.py:139: AttributeError
_________________ TestBaseFormatter.test_format_item_without_index _________________

self = <tests.test_base_formatter.TestBaseFormatter object at 0x7fe887fb0e10>
formatter = <tests.test_base_formatter.TestBaseFormatter.formatter.<locals>.ConcreteFormatter object at 0x7fe8864b0890>

    def test_format_item_without_index(self, formatter):
        """Тест форматирования элемента без индекса"""
        if not BASE_FORMATTER_AVAILABLE:
            # Mocking the method if BaseFormatter is not available
            formatter.format_item.return_value = "test"
>       result = formatter.format_item("test")
                 ^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: 'ConcreteFormatter' object has no attribute 'format_item'

tests/test_base_formatter.py:147: AttributeError
__________________ TestBaseFormatter.test_format_item_none_index ___________________

self = <tests.test_base_formatter.TestBaseFormatter object at 0x7fe887fb0cd0>
formatter = <tests.test_base_formatter.TestBaseFormatter.formatter.<locals>.ConcreteFormatter object at 0x7fe88778edd0>

    def test_format_item_none_index(self, formatter):
        """Тест форматирования элемента с None индексом"""
        if not BASE_FORMATTER_AVAILABLE:
            # Mocking the method if BaseFormatter is not available
            formatter.format_item.return_value = "test"
>       result = formatter.format_item("test", None)
                 ^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: 'ConcreteFormatter' object has no attribute 'format_item'

tests/test_base_formatter.py:155: AttributeError
_____________________ TestBaseFormatter.test_format_list_basic _____________________

self = <tests.test_base_formatter.TestBaseFormatter object at 0x7fe887fb1950>
formatter = <tests.test_base_formatter.TestBaseFormatter.formatter.<locals>.ConcreteFormatter object at 0x7fe887779fd0>

    def test_format_list_basic(self, formatter):
        """Тест базового форматирования списка"""
        items = ["item1", "item2", "item3"]
        if not BASE_FORMATTER_AVAILABLE:
            # Mocking the method if BaseFormatter is not available
            formatted_items = [f"{i+1}. {item}" for i, item in enumerate(items)]
            formatter.format_list.return_value = formatted_items
>       result = formatter.format_list(items)
                 ^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: 'ConcreteFormatter' object has no attribute 'format_list'

tests/test_base_formatter.py:165: AttributeError
______________ TestBaseFormatter.test_format_list_custom_start_index _______________

self = <tests.test_base_formatter.TestBaseFormatter object at 0x7fe887fc01d0>
formatter = <tests.test_base_formatter.TestBaseFormatter.formatter.<locals>.ConcreteFormatter object at 0x7fe887e59a50>

    def test_format_list_custom_start_index(self, formatter):
        """Тест форматирования списка с кастомным начальным индексом"""
        items = ["item1", "item2"]
        if not BASE_FORMATTER_AVAILABLE:
            # Mocking the method if BaseFormatter is not available
            formatted_items = [f"{i+5}. {item}" for i, item in enumerate(items, start=5)]
            formatter.format_list.return_value = formatted_items
>       result = formatter.format_list(items, start_index=5)
                 ^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: 'ConcreteFormatter' object has no attribute 'format_list'

tests/test_base_formatter.py:176: AttributeError
_____________________ TestBaseFormatter.test_format_list_empty _____________________

self = <tests.test_base_formatter.TestBaseFormatter object at 0x7fe887fc1cd0>
formatter = <tests.test_base_formatter.TestBaseFormatter.formatter.<locals>.ConcreteFormatter object at 0x7fe8883d29d0>

    def test_format_list_empty(self, formatter):
        """Тест форматирования пустого списка"""
        if not BASE_FORMATTER_AVAILABLE:
            # Mocking the method if BaseFormatter is not available
            formatter.format_list.return_value = []
>       result = formatter.format_list([])
                 ^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: 'ConcreteFormatter' object has no attribute 'format_list'

tests/test_base_formatter.py:185: AttributeError
__________________ TestBaseFormatter.test_format_table_row_basic ___________________

self = <tests.test_base_formatter.TestBaseFormatter object at 0x7fe887fc2750>
formatter = <tests.test_base_formatter.TestBaseFormatter.formatter.<locals>.ConcreteFormatter object at 0x7fe887fb17d0>

    def test_format_table_row_basic(self, formatter):
        """Тест форматирования строки таблицы"""
        data = {"name": "Test", "age": 25, "city": "Moscow"}
        columns = ["name", "age", "city"]
        if not BASE_FORMATTER_AVAILABLE:
            # Mocking the method if BaseFormatter is not available
            values = [str(data.get(col, "")) for col in columns]
            formatter.format_table_row.return_value = " | ".join(values)
>       result = formatter.format_table_row(data, columns)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: 'ConcreteFormatter' object has no attribute 'format_table_row'

tests/test_base_formatter.py:196: AttributeError
______________ TestBaseFormatter.test_format_table_row_missing_column ______________

self = <tests.test_base_formatter.TestBaseFormatter object at 0x7fe887fc2d90>
formatter = <tests.test_base_formatter.TestBaseFormatter.formatter.<locals>.ConcreteFormatter object at 0x7fe8878db550>

    def test_format_table_row_missing_column(self, formatter):
        """Тест форматирования строки таблицы с отсутствующей колонкой"""
        data = {"name": "Test", "age": 25}
        columns = ["name", "age", "city"]
        if not BASE_FORMATTER_AVAILABLE:
            # Mocking the method if BaseFormatter is not available
            values = [str(data.get(col, "")) for col in columns]
            formatter.format_table_row.return_value = " | ".join(values)
>       result = formatter.format_table_row(data, columns)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: 'ConcreteFormatter' object has no attribute 'format_table_row'

tests/test_base_formatter.py:207: AttributeError
______________ TestBaseFormatter.test_format_table_row_empty_columns _______________

self = <tests.test_base_formatter.TestBaseFormatter object at 0x7fe887fc33d0>
formatter = <tests.test_base_formatter.TestBaseFormatter.formatter.<locals>.ConcreteFormatter object at 0x7fe8864a17d0>

    def test_format_table_row_empty_columns(self, formatter):
        """Тест форматирования строки таблицы с пустыми колонками"""
        data = {"name": "Test"}
        columns = []
        if not BASE_FORMATTER_AVAILABLE:
            # Mocking the method if BaseFormatter is not available
            formatter.format_table_row.return_value = ""
>       result = formatter.format_table_row(data, columns)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: 'ConcreteFormatter' object has no attribute 'format_table_row'

tests/test_base_formatter.py:217: AttributeError
________________ TestBaseFormatter.test_format_item_complex_object _________________

self = <tests.test_base_formatter.TestBaseFormatter object at 0x7fe887fc3a10>
formatter = <tests.test_base_formatter.TestBaseFormatter.formatter.<locals>.ConcreteFormatter object at 0x7fe8883d2050>

    def test_format_item_complex_object(self, formatter):
        """Тест форматирования сложного объекта"""
        obj = {"key": "value", "nested": {"inner": "data"}}
        if not BASE_FORMATTER_AVAILABLE:
            # Mocking the method if BaseFormatter is not available
            formatter.format_item.return_value = "1. " + str(obj)
>       result = formatter.format_item(obj, 1)
                 ^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: 'ConcreteFormatter' object has no attribute 'format_item'

tests/test_base_formatter.py:226: AttributeError
_______________ TestCachedAPIComplete.test_get_vacancies_from_cache ________________

args = (<tests.test_cached_api_complete.TestCachedAPIComplete object at 0x7fe887d65cd0>,)
keywargs = {'cached_api': <tests.test_cached_api_complete.ConcreteCachedAPI object at 0x7fe887791110>}

    @wraps(func)
    def patched(*args, **keywargs):
>       with self.decoration_helper(patched,
                                    args,
                                    keywargs) as (newargs, newkeywargs):

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1375: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
           ^^^^^^^^^^^^^^
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1357: in decoration_helper
    arg = exit_stack.enter_context(patching)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/contextlib.py:517: in enter_context
    result = _enter(cm)
             ^^^^^^^^^^
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1446: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7fe887e922d0>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <class 'tests.test_cached_api_complete.ConcreteCachedAPI'> does not have the attribute '_load_from_cache'

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1419: AttributeError
_______________ TestMainApplicationInterface.test_interface_creation _______________

self = <tests.test_interfaces.TestMainApplicationInterface object at 0x7fe887c4ded0>
mock_dependencies = {'api': <Mock id='140636662565456'>, 'storage': <Mock id='140636662570704'>, 'ui': <Mock id='140636662577808'>}

    def test_interface_creation(self, mock_dependencies):
        """Тест создания интерфейса"""
        if not INTERFACES_AVAILABLE:
            pytest.skip("Interfaces not available")
    
        try:
>           interface = MainApplicationInterface(**mock_dependencies)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E           TypeError: Can't instantiate abstract class MainApplicationInterface with abstract method run_application

tests/test_interfaces.py:38: TypeError

During handling of the above exception, another exception occurred:

self = <tests.test_interfaces.TestMainApplicationInterface object at 0x7fe887c4ded0>
mock_dependencies = {'api': <Mock id='140636662565456'>, 'storage': <Mock id='140636662570704'>, 'ui': <Mock id='140636662577808'>}

    def test_interface_creation(self, mock_dependencies):
        """Тест создания интерфейса"""
        if not INTERFACES_AVAILABLE:
            pytest.skip("Interfaces not available")
    
        try:
            interface = MainApplicationInterface(**mock_dependencies)
            assert interface is not None
        except TypeError:
            # Если требуются другие аргументы
>           interface = MainApplicationInterface()
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^
E           TypeError: Can't instantiate abstract class MainApplicationInterface with abstract method run_application

tests/test_interfaces.py:42: TypeError
________ TestMainApplicationInterface.test_main_application_interface_init _________

self = <tests.test_main_application_interface.TestMainApplicationInterface object at 0x7fe887c4f850>

    def test_main_application_interface_init(self):
        """Тест инициализации главного интерфейса приложения"""
        if not INTERFACE_AVAILABLE:
            pytest.skip("MainApplicationInterface not available")
    
        # Создаем конкретную реализацию абстрактного класса
        class ConcreteMainApplication(MainApplicationInterface):
            def run_application(self):
                pass
    
>       interface = ConcreteMainApplication()
                    ^^^^^^^^^^^^^^^^^^^^^^^^^
E       TypeError: MainApplicationInterface.__init__() missing 3 required positional arguments: 'provider', 'processor', and 'storage'

tests/test_main_application_interface.py:33: TypeError
_ TestMainApplicationInterface.test_main_application_interface_concrete_implementation _

self = <tests.test_main_application_interface.TestMainApplicationInterface object at 0x7fe887c5c490>

    def test_main_application_interface_concrete_implementation(self):
        """Тест конкретной реализации"""
        if not INTERFACE_AVAILABLE:
            pytest.skip("MainApplicationInterface not available")
    
        class TestApplication(MainApplicationInterface):
            def run_application(self):
                return "Application started"
    
>       app = TestApplication()
              ^^^^^^^^^^^^^^^^^
E       TypeError: MainApplicationInterface.__init__() missing 3 required positional arguments: 'provider', 'processor', and 'storage'

tests/test_main_application_interface.py:53: TypeError
________ TestMainApplicationInterfaceComplete.test_concrete_run_application ________

self = <tests.test_main_application_interface_complete.TestMainApplicationInterfaceComplete object at 0x7fe8879e9750>
app_interface = <tests.test_main_application_interface_complete.ConcreteMainApp object at 0x7fe88676e450>

    def test_concrete_run_application(self, app_interface):
        """Тест конкретной реализации run_application"""
>       with patch.object(app_interface, 'start_application') as mock_start:

tests/test_main_application_interface_complete.py:120: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1446: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7fe88676ff50>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <tests.test_main_application_interface_complete.ConcreteMainApp object at 0x7fe88676e450> does not have the attribute 'start_application'

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1419: AttributeError
____________ TestMainApplicationInterfaceComplete.test_get_data_sources ____________

self = <tests.test_main_application_interface_complete.TestMainApplicationInterfaceComplete object at 0x7fe8879e9650>
app_interface = <tests.test_main_application_interface_complete.ConcreteMainApp object at 0x7fe886735810>

    def test_get_data_sources(self, app_interface):
        """Тест получения источников данных"""
        mock_sources = ["hh", "sj"]
        app_interface.data_provider.get_available_sources.return_value = mock_sources
    
>       result = app_interface.get_data_sources()
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: 'ConcreteMainApp' object has no attribute 'get_data_sources'

tests/test_main_application_interface_complete.py:130: AttributeError
_________ TestMainApplicationInterfaceComplete.test_get_data_sources_error _________

self = <tests.test_main_application_interface_complete.TestMainApplicationInterfaceComplete object at 0x7fe8879e9f90>
app_interface = <tests.test_main_application_interface_complete.ConcreteMainApp object at 0x7fe8867c6590>

    def test_get_data_sources_error(self, app_interface):
        """Тест обработки ошибок при получении источников"""
        app_interface.data_provider.get_available_sources.side_effect = Exception("Provider error")
    
>       result = app_interface.get_data_sources()
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: 'ConcreteMainApp' object has no attribute 'get_data_sources'

tests/test_main_application_interface_complete.py:137: AttributeError
____________ TestMainApplicationInterfaceComplete.test_validate_sources ____________

self = <tests.test_main_application_interface_complete.TestMainApplicationInterfaceComplete object at 0x7fe8879ea950>
app_interface = <tests.test_main_application_interface_complete.ConcreteMainApp object at 0x7fe88678e090>

    def test_validate_sources(self, app_interface):
        """Тест валидации источников"""
        sources = ["hh", "sj"]
        app_interface.data_provider.validate_sources.return_value = sources
    
>       result = app_interface.validate_sources(sources)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: 'ConcreteMainApp' object has no attribute 'validate_sources'

tests/test_main_application_interface_complete.py:145: AttributeError
_________ TestMainApplicationInterfaceComplete.test_validate_sources_error _________

self = <tests.test_main_application_interface_complete.TestMainApplicationInterfaceComplete object at 0x7fe8879ea610>
app_interface = <tests.test_main_application_interface_complete.ConcreteMainApp object at 0x7fe88673a910>

    def test_validate_sources_error(self, app_interface):
        """Тест обработки ошибок валидации источников"""
        app_interface.data_provider.validate_sources.side_effect = Exception("Validation error")
    
>       result = app_interface.validate_sources(["invalid"])
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: 'ConcreteMainApp' object has no attribute 'validate_sources'

tests/test_main_application_interface_complete.py:152: AttributeError
___________ TestMainApplicationInterfaceComplete.test_process_data_error ___________

self = <tests.test_main_application_interface_complete.TestMainApplicationInterfaceComplete object at 0x7fe887bdb810>
app_interface = <tests.test_main_application_interface_complete.ConcreteMainApp object at 0x7fe8867a5510>

    def test_process_data_error(self, app_interface):
        """Тест обработки ошибок при обработке данных"""
        app_interface.processor.process.side_effect = Exception("Processing error")
    
>       result = app_interface.process_data([{"id": "1"}])