~/workspace$ pytest tests/test_integration.py -v
============================ test session starts ============================
platform linux -- Python 3.11.13, pytest-8.4.1, pluggy-1.6.0 -- /nix/store/2lcqw1d28vklbk8ikiwad28iq2smwndv-python-wrapped-0.1.0/bin/python3
cachedir: .pytest_cache
rootdir: /home/runner/workspace/tests
configfile: pytest.ini
plugins: mock-3.14.1, cov-6.2.1
collected 11 items                                                          

tests/test_integration.py::TestStorageIntegration::test_postgres_saver_integration FAILED [  9%]
tests/test_integration.py::TestAPIIntegration::test_hh_api_integration PASSED [ 18%]
tests/test_integration.py::TestAPIIntegration::test_superjob_api_integration PASSED [ 27%]
tests/test_integration.py::TestFullWorkflowIntegration::test_search_and_save_workflow PASSED [ 36%]
tests/test_integration.py::TestCacheIntegration::test_cache_integration PASSED [ 45%]
tests/test_integration.py::TestErrorHandlingIntegration::test_api_error_handling PASSED [ 54%]
tests/test_integration.py::TestErrorHandlingIntegration::test_database_error_handling PASSED [ 63%]
tests/test_integration.py::TestFormatterIntegration::test_vacancy_formatter_integration PASSED [ 72%]
tests/test_integration.py::TestFormatterIntegration::test_brief_formatter_integration PASSED [ 81%]
tests/test_integration.py::TestVacancyOperationsIntegration::test_vacancy_operations_filters PASSED [ 90%]
tests/test_integration.py::TestVacancyOperationsIntegration::test_vacancy_operations_search PASSED [100%]

================================= FAILURES ==================================
__________ TestStorageIntegration.test_postgres_saver_integration ___________

self = <tests.test_integration.TestStorageIntegration object at 0x7fc77a925d10>
mock_connect = <MagicMock name='connect' id='140494698107536'>
mock_execute_values = <MagicMock name='execute_values' id='140494726551376'>
sample_vacancy = <src.vacancies.models.Vacancy object at 0x7fc77993e820>

    @patch("psycopg2.extras.execute_values")
    @patch("psycopg2.connect")
    def test_postgres_saver_integration(self, mock_connect, mock_execute_values, sample_vacancy):
        """Тест интеграции с PostgreSQL"""
        # Настраиваем мок подключения
        mock_conn = Mock()
        mock_cursor = Mock()
        mock_cursor.rowcount = 1
        mock_cursor.fetchall.return_value = []
        # Настраиваем кодировку для psycopg2
        mock_conn.encoding = "UTF8"
        mock_cursor.connection = mock_conn
    
        # Исправляем мок для field_info - возвращаем правильную структуру
        # Добавляем больше ответов для всех возможных запросов
        mock_responses = [
            (0,),  # для check database exists
        ]
        # Добавляем ответы для каждого поля в required_fields (около 20 полей)
        for _ in range(25):
            mock_responses.extend([
                ("column_name", "integer"),
                ("column_name", "text"),
                ("column_name", "varchar"),
                ("column_name", "timestamp"),
            ])
    
        mock_cursor.fetchone.side_effect = mock_responses
        mock_conn.cursor.return_value = mock_cursor
        mock_connect.return_value = mock_conn
    
        # Настраиваем мок для execute_values
        mock_execute_values.return_value = None
    
        # Создаем хранилище и тестируем операции
        storage = PostgresSaver()
    
        # Мокируем метод add_vacancies для возврата списка с вакансией
        with patch.object(storage, 'add_vacancies', return_value=[sample_vacancy]) as mock_add_vacancies:
            # Тест добавления
            result = storage.add_vacancy(sample_vacancy)
            assert result is True
            mock_add_vacancies.assert_called_once_with([sample_vacancy])
    
        # Тест получения
        vacancies = storage.get_vacancies()
        assert isinstance(vacancies, list)
    
        # Тест подсчета
        count = storage.get_vacancies_count()
>       assert isinstance(count, int)
E       AssertionError: assert False
E        +  where False = isinstance('column_name', int)

tests/test_integration.py:91: AssertionError
--------------------------- Captured stderr call ----------------------------
ERROR:src.storage.postgres_saver:Ошибка при получении вакансий: 'Mock' object does not support the context manager protocol
----------------------------- Captured log call -----------------------------
ERROR    src.storage.postgres_saver:postgres_saver.py:1038 Ошибка при получении вакансий: 'Mock' object does not support the context manager protocol
========================== short test summary info ==========================
FAILED tests/test_integration.py::TestStorageIntegration::test_postgres_saver_integration - AssertionError: assert False
======================= 1 failed, 10 passed in 0.20s ========================
~/workspace$ 