~/workspace$ pytest
========================== test session starts ==========================
platform linux -- Python 3.11.13, pytest-8.4.1, pluggy-1.6.0
rootdir: /home/runner/workspace
configfile: pyproject.toml
plugins: mock-3.14.1, cov-6.2.1
collected 341 items                                                     

tests/test_abstract.py ........                                   [  2%]
tests/test_abstract_db_manager.py ....                            [  3%]
tests/test_api_config.py ....                                     [  4%]
tests/test_app_config.py .....                                    [  6%]
tests/test_base_api.py ......                                     [  7%]
tests/test_base_parser.py ......                                  [  9%]
tests/test_cache.py .......                                       [ 11%]
tests/test_cached_api.py ....F......                              [ 14%]
tests/test_db_manager.py .................                        [ 19%]
tests/test_decorators.py .......                                  [ 21%]
tests/test_env_loader.py ............                             [ 25%]
tests/test_file_handlers.py ............                          [ 29%]
tests/test_get_api.py ......                                      [ 30%]
tests/test_hh_api.py .......                                      [ 32%]
tests/test_hh_api_config.py .....                                 [ 34%]
tests/test_hh_parser.py ........                                  [ 36%]
tests/test_menu_manager.py ..........                             [ 39%]
tests/test_paginator.py ......                                    [ 41%]
tests/test_postgres_saver.py .......                              [ 43%]
tests/test_salary_utils.py ......................                 [ 49%]
tests/test_search_utils.py ..................                     [ 55%]
tests/test_sj_api.py ..F...........                               [ 59%]
tests/test_sj_api_config.py .....                                 [ 60%]
tests/test_sj_parser.py ........                                  [ 63%]
tests/test_storage_factory.py ........                            [ 65%]
tests/test_target_companies.py .....                              [ 66%]
tests/test_ui_config.py .....                                     [ 68%]
tests/test_ui_helpers.py ...........                              [ 71%]
tests/test_unified_api.py .................                       [ 76%]
tests/test_user_interface.py ........                             [ 78%]
tests/test_vacancy_display_handler.py .........                   [ 81%]
tests/test_vacancy_formatter.py ..............                    [ 85%]
tests/test_vacancy_models.py ......F..............FF..            [ 92%]
tests/test_vacancy_operations_coordinator.py ...........          [ 96%]
tests/test_vacancy_search_handler.py ......                       [ 97%]
tests/test_vacancy_stats.py .......                               [100%]

=============================== FAILURES ================================
_________________ TestCachedAPI.test_clear_cache_method _________________

self = <Mock name='FileCache().clear' id='139952909403088'>

    def assert_called_once(self):
        """assert that the mock was called only once.
        """
        if not self.call_count == 1:
            msg = ("Expected '%s' to have been called once. Called %s times.%s"
                   % (self._mock_name or 'mock',
                      self.call_count,
                      self._calls_repr()))
>           raise AssertionError(msg)
E           AssertionError: Expected 'clear' to have been called once. Called 0 times.

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:918: AssertionError

During handling of the above exception, another exception occurred:

self = <workspace.tests.test_cached_api.TestCachedAPI object at 0x7f4954b6b810>
mock_file_cache = <MagicMock name='FileCache' id='139952909412688'>

    @patch("src.utils.cache.FileCache")
    def test_clear_cache_method(self, mock_file_cache):
        """Тест метода очистки кэша"""
        mock_cache_instance = Mock()
        mock_cache_instance.clear.return_value = None
        mock_file_cache.return_value = mock_cache_instance
    
        api = ConcreteCachedAPI()
    
        # Проверяем наличие метода clear_cache или аналогичного
        if hasattr(api, 'clear_cache'):
            api.clear_cache("test_prefix")
>           mock_cache_instance.clear.assert_called_once()
E           AssertionError: Expected 'clear' to have been called once. Called 0 times.

tests/test_cached_api.py:119: AssertionError
______________ TestSuperJobAPI.test_get_companies_success _______________

self = <workspace.tests.test_sj_api.TestSuperJobAPI object at 0x7f4953f78850>
mock_paginator = <MagicMock name='Paginator' id='139952909841552'>
mock_api_config = <MagicMock name='APIConfig' id='139952909626320'>
mock_cache = <MagicMock name='FileCache' id='139952909615824'>
mock_connector = <MagicMock name='APIConnector' id='139952909828560'>

    @patch('src.api_modules.sj_api.APIConnector')
    @patch('src.utils.cache.FileCache')
    @patch('src.api_modules.sj_api.APIConfig')
    @patch('src.api_modules.sj_api.Paginator')
    def test_get_companies_success(self, mock_paginator, mock_api_config, mock_cache, mock_connector):
        """Тест успешного получения компаний"""
        mock_config = Mock()
        mock_config.superjob_base_url = "https://api.superjob.ru"
        mock_config.superjob_api_key = "test_key"
        mock_api_config.return_value = mock_config
    
        mock_connector_instance = Mock()
        mock_connector.return_value = mock_connector_instance
        mock_connector_instance.get.return_value = {"objects": [], "total": 0}
    
        api = SuperJobAPI()
    
        # Мокируем метод получения компаний
        api._get_companies_from_api = Mock(return_value=[])
>       result = api.get_companies()
                 ^^^^^^^^^^^^^^^^^
E       AttributeError: 'SuperJobAPI' object has no attribute 'get_companies'

tests/test_sj_api.py:114: AttributeError
_____________________ TestVacancy.test_vacancy_repr _____________________

self = <workspace.tests.test_vacancy_models.TestVacancy object at 0x7f4953b2ce10>

    def test_vacancy_repr(self):
        """Тест представления Vacancy для разработчика"""
        vacancy = TestableVacancy("123", "Python Developer", "https://test.com", "hh.ru")
        repr_str = repr(vacancy)
        assert "Vacancy" in repr_str
>       assert "123" in repr_str
E       AssertionError: assert '123' in '<workspace.tests.test_vacancy_models.TestableVacancy object at 0x7f4953bc35f0>'

tests/test_vacancy_models.py:149: AssertionError
_______ TestVacancyDataTransformation.test_vacancy_dict_roundtrip _______

self = <workspace.tests.test_vacancy_models.TestVacancyDataTransformation object at 0x7f4953facad0>

    def test_vacancy_dict_roundtrip(self):
        """Тест преобразования вакансии в словарь и обратно"""
        # Создаем оригинальную вакансию
        salary_data = {"from": 100000, "to": 150000, "currency": "RUR"}
    
        original_vacancy = Vacancy(
            vacancy_id="123",
            title="Python Developer",
            url="https://test.com",
            source="hh.ru",
            salary=salary_data
        )
    
        # Преобразуем в словарь
>       vacancy_dict = original_vacancy.to_dict()
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_vacancy_models.py:378: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <src.vacancies.models.Vacancy object at 0x7f4953364ef0>

    def to_dict(self) -> Dict[str, Any]:
        """Преобразование вакансии в словарь"""
        result = {
            "vacancy_id": self.vacancy_id,
            "title": self.title,
            "url": self.url,
            "source": self.source,
            "area": self.area,
            "experience": self.experience,
            "employment": self.employment,
            "description": self.description,
            "published_at": self.published_at,
        }
    
        if self.salary:
            result["salary"] = {
>               "from_amount": self.salary.from_amount,
                               ^^^^^^^^^^^^^^^^^^^^^^^
                "to_amount": self.salary.to_amount,
                "currency": self.salary.currency,
            }
E           AttributeError: 'Salary' object has no attribute 'from_amount'

src/vacancies/models.py:364: AttributeError
___ TestVacancyDataTransformation.test_vacancy_dict_with_complex_data ___

self = <workspace.tests.test_vacancy_models.TestVacancyDataTransformation object at 0x7f4953fad350>

    def test_vacancy_dict_with_complex_data(self):
        """Тест преобразования сложных данных в словарь"""
        employer = {"name": "Test Company", "id": "123", "trusted": True}
        salary_data = {"from": 100000, "to": 150000, "currency": "RUR"}
    
        vacancy = Vacancy(
            vacancy_id="123",
            title="Python Developer",
            url="https://test.com",
            source="hh.ru",
            salary=salary_data,
            employer=employer,
            description="Long description",
            area="Москва"
        )
    
>       result = vacancy.to_dict()
                 ^^^^^^^^^^^^^^^^^

tests/test_vacancy_models.py:405: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <src.vacancies.models.Vacancy object at 0x7f49533faea0>

    def to_dict(self) -> Dict[str, Any]:
        """Преобразование вакансии в словарь"""
        result = {
            "vacancy_id": self.vacancy_id,
            "title": self.title,
            "url": self.url,
            "source": self.source,
            "area": self.area,
            "experience": self.experience,
            "employment": self.employment,
            "description": self.description,
            "published_at": self.published_at,
        }
    
        if self.salary:
            result["salary"] = {
>               "from_amount": self.salary.from_amount,
                               ^^^^^^^^^^^^^^^^^^^^^^^
                "to_amount": self.salary.to_amount,
                "currency": self.salary.currency,
            }
E           AttributeError: 'Salary' object has no attribute 'from_amount'

src/vacancies/models.py:364: AttributeError
=========================== warnings summary ============================
tests/test_vacancy_display_handler.py:30
  /home/runner/workspace/tests/test_vacancy_display_handler.py:30: PytestCollectionWarning: cannot collect test class 'TestableVacancyDisplayHandler' because it has a __init__ constructor (from: tests/test_vacancy_display_handler.py)
    class TestableVacancyDisplayHandler(VacancyDisplayHandler):

tests/test_vacancy_formatter.py:15
  /home/runner/workspace/tests/test_vacancy_formatter.py:15: PytestCollectionWarning: cannot collect test class 'TestableVacancyFormatter' because it has a __init__ constructor (from: tests/test_vacancy_formatter.py)
    class TestableVacancyFormatter(VacancyFormatter):

tests/test_vacancy_models.py:36
  /home/runner/workspace/tests/test_vacancy_models.py:36: PytestCollectionWarning: cannot collect test class 'TestableVacancy' because it has a __init__ constructor (from: tests/test_vacancy_models.py)
    class TestableVacancy(Vacancy):

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
======================== short test summary info ========================
FAILED tests/test_cached_api.py::TestCachedAPI::test_clear_cache_method - AssertionError: Expected 'clear' to have been called once. Called 0 ...
FAILED tests/test_sj_api.py::TestSuperJobAPI::test_get_companies_success - AttributeError: 'SuperJobAPI' object has no attribute 'get_companies'
FAILED tests/test_vacancy_models.py::TestVacancy::test_vacancy_repr - AssertionError: assert '123' in '<workspace.tests.test_vacancy_model...
FAILED tests/test_vacancy_models.py::TestVacancyDataTransformation::test_vacancy_dict_roundtrip - AttributeError: 'Salary' object has no attribute 'from_amount'
FAILED tests/test_vacancy_models.py::TestVacancyDataTransformation::test_vacancy_dict_with_complex_data - AttributeError: 'Salary' object has no attribute 'from_amount'
=============== 5 failed, 336 passed, 3 warnings in 1.70s ===============
~/workspace$ 