~/workspace$ pytest tests/test_console_interface.py
============================ test session starts =============================
platform linux -- Python 3.11.13, pytest-8.4.1, pluggy-1.6.0
rootdir: /home/runner/workspace/tests
configfile: pytest.ini
plugins: mock-3.14.1, cov-6.2.1
collected 36 items                                                           

tests/test_console_interface.py EFEEEEEEEEEEEE.FEEEEEEEEEEFEEEEEEEE.   [100%]

=================================== ERRORS ===================================
__________ ERROR at setup of TestUserInterface.test_initialization ___________

self = <tests.test_console_interface.TestUserInterface object at 0x7f34647e2b50>
mock_storage = <Mock id='139862979538448'>
mock_db_manager = <Mock id='139862979538960'>

    @pytest.fixture
    def user_interface(self, mock_storage, mock_db_manager):
        """Экземпляр UserInterface для тестирования"""
>       with patch('src.ui_interfaces.console_interface.UnifiedAPI') as mock_unified_api, \
             patch('src.ui_interfaces.console_interface.VacancySearchHandler') as mock_search_handler, \
             patch('src.ui_interfaces.console_interface.VacancyDisplayHandler') as mock_display_handler, \
             patch('src.ui_interfaces.console_interface.VacancyOperationsCoordinator') as mock_coordinator:

tests/test_console_interface.py:43: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1446: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f3463332a90>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'src.ui_interfaces.console_interface' from '/home/runner/workspace/src/ui_interfaces/console_interface.py'> does not have the attribute 'VacancyOperationsCoordinator'

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1419: AttributeError
_____________ ERROR at setup of TestUserInterface.test_show_menu _____________

self = <tests.test_console_interface.TestUserInterface object at 0x7f3463340ed0>
mock_storage = <Mock id='139862975418384'>
mock_db_manager = <Mock id='139862975422864'>

    @pytest.fixture
    def user_interface(self, mock_storage, mock_db_manager):
        """Экземпляр UserInterface для тестирования"""
>       with patch('src.ui_interfaces.console_interface.UnifiedAPI') as mock_unified_api, \
             patch('src.ui_interfaces.console_interface.VacancySearchHandler') as mock_search_handler, \
             patch('src.ui_interfaces.console_interface.VacancyDisplayHandler') as mock_display_handler, \
             patch('src.ui_interfaces.console_interface.VacancyOperationsCoordinator') as mock_coordinator:

tests/test_console_interface.py:43: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1446: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f34633f7a10>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'src.ui_interfaces.console_interface' from '/home/runner/workspace/src/ui_interfaces/console_interface.py'> does not have the attribute 'VacancyOperationsCoordinator'

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1419: AttributeError
_____ ERROR at setup of TestUserInterface.test_get_period_choice_default _____

self = <tests.test_console_interface.TestUserInterface object at 0x7f3463341650>
mock_storage = <Mock id='139862967261200'>
mock_db_manager = <Mock id='139862967269072'>

    @pytest.fixture
    def user_interface(self, mock_storage, mock_db_manager):
        """Экземпляр UserInterface для тестирования"""
>       with patch('src.ui_interfaces.console_interface.UnifiedAPI') as mock_unified_api, \
             patch('src.ui_interfaces.console_interface.VacancySearchHandler') as mock_search_handler, \
             patch('src.ui_interfaces.console_interface.VacancyDisplayHandler') as mock_display_handler, \
             patch('src.ui_interfaces.console_interface.VacancyOperationsCoordinator') as mock_coordinator:

tests/test_console_interface.py:43: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1446: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f346440f910>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'src.ui_interfaces.console_interface' from '/home/runner/workspace/src/ui_interfaces/console_interface.py'> does not have the attribute 'VacancyOperationsCoordinator'

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1419: AttributeError
_____ ERROR at setup of TestUserInterface.test_get_period_choice_custom ______

self = <tests.test_console_interface.TestUserInterface object at 0x7f3463341dd0>
mock_storage = <Mock id='139862980063888'>
mock_db_manager = <Mock id='139862975545168'>

    @pytest.fixture
    def user_interface(self, mock_storage, mock_db_manager):
        """Экземпляр UserInterface для тестирования"""
>       with patch('src.ui_interfaces.console_interface.UnifiedAPI') as mock_unified_api, \
             patch('src.ui_interfaces.console_interface.VacancySearchHandler') as mock_search_handler, \
             patch('src.ui_interfaces.console_interface.VacancyDisplayHandler') as mock_display_handler, \
             patch('src.ui_interfaces.console_interface.VacancyOperationsCoordinator') as mock_coordinator:

tests/test_console_interface.py:43: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1446: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f3462f97810>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'src.ui_interfaces.console_interface' from '/home/runner/workspace/src/ui_interfaces/console_interface.py'> does not have the attribute 'VacancyOperationsCoordinator'

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1419: AttributeError
_ ERROR at setup of TestUserInterface.test_get_period_choice_invalid_custom __

self = <tests.test_console_interface.TestUserInterface object at 0x7f3463342510>
mock_storage = <Mock id='139862975524688'>
mock_db_manager = <Mock id='139862975514128'>

    @pytest.fixture
    def user_interface(self, mock_storage, mock_db_manager):
        """Экземпляр UserInterface для тестирования"""
>       with patch('src.ui_interfaces.console_interface.UnifiedAPI') as mock_unified_api, \
             patch('src.ui_interfaces.console_interface.VacancySearchHandler') as mock_search_handler, \
             patch('src.ui_interfaces.console_interface.VacancyDisplayHandler') as mock_display_handler, \
             patch('src.ui_interfaces.console_interface.VacancyOperationsCoordinator') as mock_coordinator:

tests/test_console_interface.py:43: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1446: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f3462f29f90>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'src.ui_interfaces.console_interface' from '/home/runner/workspace/src/ui_interfaces/console_interface.py'> does not have the attribute 'VacancyOperationsCoordinator'

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1419: AttributeError
_____ ERROR at setup of TestUserInterface.test_get_period_choice_cancel ______

self = <tests.test_console_interface.TestUserInterface object at 0x7f3463341f50>
mock_storage = <Mock id='139862979451856'>
mock_db_manager = <Mock id='139862991782224'>

    @pytest.fixture
    def user_interface(self, mock_storage, mock_db_manager):
        """Экземпляр UserInterface для тестирования"""
>       with patch('src.ui_interfaces.console_interface.UnifiedAPI') as mock_unified_api, \
             patch('src.ui_interfaces.console_interface.VacancySearchHandler') as mock_search_handler, \
             patch('src.ui_interfaces.console_interface.VacancyDisplayHandler') as mock_display_handler, \
             patch('src.ui_interfaces.console_interface.VacancyOperationsCoordinator') as mock_coordinator:

tests/test_console_interface.py:43: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1446: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f346335ec10>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'src.ui_interfaces.console_interface' from '/home/runner/workspace/src/ui_interfaces/console_interface.py'> does not have the attribute 'VacancyOperationsCoordinator'

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1419: AttributeError
_ ERROR at setup of TestUserInterface.test_get_period_choice_keyboard_interrupt _

self = <tests.test_console_interface.TestUserInterface object at 0x7f3463342d10>
mock_storage = <Mock id='139862975515920'>
mock_db_manager = <Mock id='139862975517072'>

    @pytest.fixture
    def user_interface(self, mock_storage, mock_db_manager):
        """Экземпляр UserInterface для тестирования"""
>       with patch('src.ui_interfaces.console_interface.UnifiedAPI') as mock_unified_api, \
             patch('src.ui_interfaces.console_interface.VacancySearchHandler') as mock_search_handler, \
             patch('src.ui_interfaces.console_interface.VacancyDisplayHandler') as mock_display_handler, \
             patch('src.ui_interfaces.console_interface.VacancyOperationsCoordinator') as mock_coordinator:

tests/test_console_interface.py:43: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1446: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f3462f972d0>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'src.ui_interfaces.console_interface' from '/home/runner/workspace/src/ui_interfaces/console_interface.py'> does not have the attribute 'VacancyOperationsCoordinator'

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1419: AttributeError
__ ERROR at setup of TestUserInterface.test_show_vacancies_for_deletion_all __

self = <tests.test_console_interface.TestUserInterface object at 0x7f3463343150>
mock_storage = <Mock id='139862980058000'>
mock_db_manager = <Mock id='139862980051792'>

    @pytest.fixture
    def user_interface(self, mock_storage, mock_db_manager):
        """Экземпляр UserInterface для тестирования"""
>       with patch('src.ui_interfaces.console_interface.UnifiedAPI') as mock_unified_api, \
             patch('src.ui_interfaces.console_interface.VacancySearchHandler') as mock_search_handler, \
             patch('src.ui_interfaces.console_interface.VacancyDisplayHandler') as mock_display_handler, \
             patch('src.ui_interfaces.console_interface.VacancyOperationsCoordinator') as mock_coordinator:

tests/test_console_interface.py:43: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1446: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f34633cd190>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'src.ui_interfaces.console_interface' from '/home/runner/workspace/src/ui_interfaces/console_interface.py'> does not have the attribute 'VacancyOperationsCoordinator'

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1419: AttributeError
_ ERROR at setup of TestUserInterface.test_show_vacancies_for_deletion_single _

self = <tests.test_console_interface.TestUserInterface object at 0x7f3463343550>
mock_storage = <Mock id='139862975751504'>
mock_db_manager = <Mock id='139862975752784'>

    @pytest.fixture
    def user_interface(self, mock_storage, mock_db_manager):
        """Экземпляр UserInterface для тестирования"""
>       with patch('src.ui_interfaces.console_interface.UnifiedAPI') as mock_unified_api, \
             patch('src.ui_interfaces.console_interface.VacancySearchHandler') as mock_search_handler, \
             patch('src.ui_interfaces.console_interface.VacancyDisplayHandler') as mock_display_handler, \
             patch('src.ui_interfaces.console_interface.VacancyOperationsCoordinator') as mock_coordinator:

tests/test_console_interface.py:43: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1446: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f3462f39650>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'src.ui_interfaces.console_interface' from '/home/runner/workspace/src/ui_interfaces/console_interface.py'> does not have the attribute 'VacancyOperationsCoordinator'

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1419: AttributeError
_ ERROR at setup of TestUserInterface.test_show_vacancies_for_deletion_quit __

self = <tests.test_console_interface.TestUserInterface object at 0x7f3463343c10>
mock_storage = <Mock id='139862975050000'>
mock_db_manager = <Mock id='139863004184976'>

    @pytest.fixture
    def user_interface(self, mock_storage, mock_db_manager):
        """Экземпляр UserInterface для тестирования"""
>       with patch('src.ui_interfaces.console_interface.UnifiedAPI') as mock_unified_api, \
             patch('src.ui_interfaces.console_interface.VacancySearchHandler') as mock_search_handler, \
             patch('src.ui_interfaces.console_interface.VacancyDisplayHandler') as mock_display_handler, \
             patch('src.ui_interfaces.console_interface.VacancyOperationsCoordinator') as mock_coordinator:

tests/test_console_interface.py:43: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1446: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f34633f7f10>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'src.ui_interfaces.console_interface' from '/home/runner/workspace/src/ui_interfaces/console_interface.py'> does not have the attribute 'VacancyOperationsCoordinator'

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1419: AttributeError
_ ERROR at setup of TestUserInterface.test_show_vacancies_for_deletion_range _

self = <tests.test_console_interface.TestUserInterface object at 0x7f34633482d0>
mock_storage = <Mock id='139862975836880'>
mock_db_manager = <Mock id='139862974948880'>

    @pytest.fixture
    def user_interface(self, mock_storage, mock_db_manager):
        """Экземпляр UserInterface для тестирования"""
>       with patch('src.ui_interfaces.console_interface.UnifiedAPI') as mock_unified_api, \
             patch('src.ui_interfaces.console_interface.VacancySearchHandler') as mock_search_handler, \
             patch('src.ui_interfaces.console_interface.VacancyDisplayHandler') as mock_display_handler, \
             patch('src.ui_interfaces.console_interface.VacancyOperationsCoordinator') as mock_coordinator:

tests/test_console_interface.py:43: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1446: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f3462f04110>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'src.ui_interfaces.console_interface' from '/home/runner/workspace/src/ui_interfaces/console_interface.py'> does not have the attribute 'VacancyOperationsCoordinator'

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1419: AttributeError
_ ERROR at setup of TestUserInterface.test_show_vacancies_for_deletion_invalid_range _

self = <tests.test_console_interface.TestUserInterface object at 0x7f34633489d0>
mock_storage = <Mock id='139862975279056'>
mock_db_manager = <Mock id='139862975273872'>

    @pytest.fixture
    def user_interface(self, mock_storage, mock_db_manager):
        """Экземпляр UserInterface для тестирования"""
>       with patch('src.ui_interfaces.console_interface.UnifiedAPI') as mock_unified_api, \
             patch('src.ui_interfaces.console_interface.VacancySearchHandler') as mock_search_handler, \
             patch('src.ui_interfaces.console_interface.VacancyDisplayHandler') as mock_display_handler, \
             patch('src.ui_interfaces.console_interface.VacancyOperationsCoordinator') as mock_coordinator:

tests/test_console_interface.py:43: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1446: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f3462f34750>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'src.ui_interfaces.console_interface' from '/home/runner/workspace/src/ui_interfaces/console_interface.py'> does not have the attribute 'VacancyOperationsCoordinator'

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1419: AttributeError
_ ERROR at setup of TestUserInterface.test_show_vacancies_for_deletion_pagination _

self = <tests.test_console_interface.TestUserInterface object at 0x7f3463349110>
mock_storage = <Mock id='139862975340944'>
mock_db_manager = <Mock id='139862975338128'>

    @pytest.fixture
    def user_interface(self, mock_storage, mock_db_manager):
        """Экземпляр UserInterface для тестирования"""
>       with patch('src.ui_interfaces.console_interface.UnifiedAPI') as mock_unified_api, \
             patch('src.ui_interfaces.console_interface.VacancySearchHandler') as mock_search_handler, \
             patch('src.ui_interfaces.console_interface.VacancyDisplayHandler') as mock_display_handler, \
             patch('src.ui_interfaces.console_interface.VacancyOperationsCoordinator') as mock_coordinator:

tests/test_console_interface.py:43: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1446: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f3461f3a650>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'src.ui_interfaces.console_interface' from '/home/runner/workspace/src/ui_interfaces/console_interface.py'> does not have the attribute 'VacancyOperationsCoordinator'

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1419: AttributeError
______ ERROR at setup of TestUserInterface.test_run_keyboard_interrupt _______

self = <tests.test_console_interface.TestUserInterface object at 0x7f346334a590>
mock_storage = <Mock id='139862975754896'>
mock_db_manager = <Mock id='139862975041552'>

    @pytest.fixture
    def user_interface(self, mock_storage, mock_db_manager):
        """Экземпляр UserInterface для тестирования"""
>       with patch('src.ui_interfaces.console_interface.UnifiedAPI') as mock_unified_api, \
             patch('src.ui_interfaces.console_interface.VacancySearchHandler') as mock_search_handler, \
             patch('src.ui_interfaces.console_interface.VacancyDisplayHandler') as mock_display_handler, \
             patch('src.ui_interfaces.console_interface.VacancyOperationsCoordinator') as mock_coordinator:

tests/test_console_interface.py:43: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1446: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f3462f7bbd0>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'src.ui_interfaces.console_interface' from '/home/runner/workspace/src/ui_interfaces/console_interface.py'> does not have the attribute 'VacancyOperationsCoordinator'

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1419: AttributeError
______ ERROR at setup of TestUserInterface.test_run_exception_handling _______

self = <tests.test_console_interface.TestUserInterface object at 0x7f346334ac90>
mock_storage = <Mock id='139862975465168'>
mock_db_manager = <Mock id='139862975468944'>

    @pytest.fixture
    def user_interface(self, mock_storage, mock_db_manager):
        """Экземпляр UserInterface для тестирования"""
>       with patch('src.ui_interfaces.console_interface.UnifiedAPI') as mock_unified_api, \
             patch('src.ui_interfaces.console_interface.VacancySearchHandler') as mock_search_handler, \
             patch('src.ui_interfaces.console_interface.VacancyDisplayHandler') as mock_display_handler, \
             patch('src.ui_interfaces.console_interface.VacancyOperationsCoordinator') as mock_coordinator:

tests/test_console_interface.py:43: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1446: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f34627b0310>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'src.ui_interfaces.console_interface' from '/home/runner/workspace/src/ui_interfaces/console_interface.py'> does not have the attribute 'VacancyOperationsCoordinator'

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1419: AttributeError
_________ ERROR at setup of TestUserInterface.test_run_method_exists _________

self = <tests.test_console_interface.TestUserInterface object at 0x7f346334b490>
mock_storage = <Mock id='139862974952144'>
mock_db_manager = <Mock id='139862975096208'>

    @pytest.fixture
    def user_interface(self, mock_storage, mock_db_manager):
        """Экземпляр UserInterface для тестирования"""
>       with patch('src.ui_interfaces.console_interface.UnifiedAPI') as mock_unified_api, \
             patch('src.ui_interfaces.console_interface.VacancySearchHandler') as mock_search_handler, \
             patch('src.ui_interfaces.console_interface.VacancyDisplayHandler') as mock_display_handler, \
             patch('src.ui_interfaces.console_interface.VacancyOperationsCoordinator') as mock_coordinator:

tests/test_console_interface.py:43: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1446: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f3462f28d50>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'src.ui_interfaces.console_interface' from '/home/runner/workspace/src/ui_interfaces/console_interface.py'> does not have the attribute 'VacancyOperationsCoordinator'

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1419: AttributeError
_____ ERROR at setup of TestUserInterface.test_advanced_search_vacancies _____

self = <tests.test_console_interface.TestUserInterface object at 0x7f346334bb90>
mock_storage = <Mock id='139862975053200'>
mock_db_manager = <Mock id='139862975039248'>

    @pytest.fixture
    def user_interface(self, mock_storage, mock_db_manager):
        """Экземпляр UserInterface для тестирования"""
>       with patch('src.ui_interfaces.console_interface.UnifiedAPI') as mock_unified_api, \
             patch('src.ui_interfaces.console_interface.VacancySearchHandler') as mock_search_handler, \
             patch('src.ui_interfaces.console_interface.VacancyDisplayHandler') as mock_display_handler, \
             patch('src.ui_interfaces.console_interface.VacancyOperationsCoordinator') as mock_coordinator:

tests/test_console_interface.py:43: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1446: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f346335c0d0>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'src.ui_interfaces.console_interface' from '/home/runner/workspace/src/ui_interfaces/console_interface.py'> does not have the attribute 'VacancyOperationsCoordinator'

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1419: AttributeError
_ ERROR at setup of TestUserInterface.test_advanced_search_vacancies_empty_query _

self = <tests.test_console_interface.TestUserInterface object at 0x7f34633502d0>
mock_storage = <Mock id='139862980058832'>
mock_db_manager = <Mock id='139862980064528'>

    @pytest.fixture
    def user_interface(self, mock_storage, mock_db_manager):
        """Экземпляр UserInterface для тестирования"""
>       with patch('src.ui_interfaces.console_interface.UnifiedAPI') as mock_unified_api, \
             patch('src.ui_interfaces.console_interface.VacancySearchHandler') as mock_search_handler, \
             patch('src.ui_interfaces.console_interface.VacancyDisplayHandler') as mock_display_handler, \
             patch('src.ui_interfaces.console_interface.VacancyOperationsCoordinator') as mock_coordinator:

tests/test_console_interface.py:43: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1446: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f3462f74b90>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'src.ui_interfaces.console_interface' from '/home/runner/workspace/src/ui_interfaces/console_interface.py'> does not have the attribute 'VacancyOperationsCoordinator'

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1419: AttributeError
_ ERROR at setup of TestUserInterface.test_filter_saved_vacancies_by_salary_min _

self = <tests.test_console_interface.TestUserInterface object at 0x7f3463350a10>
mock_storage = <Mock id='139862980125776'>
mock_db_manager = <Mock id='139862980126416'>

    @pytest.fixture
    def user_interface(self, mock_storage, mock_db_manager):
        """Экземпляр UserInterface для тестирования"""
>       with patch('src.ui_interfaces.console_interface.UnifiedAPI') as mock_unified_api, \
             patch('src.ui_interfaces.console_interface.VacancySearchHandler') as mock_search_handler, \
             patch('src.ui_interfaces.console_interface.VacancyDisplayHandler') as mock_display_handler, \
             patch('src.ui_interfaces.console_interface.VacancyOperationsCoordinator') as mock_coordinator:

tests/test_console_interface.py:43: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1446: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f3463349f10>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'src.ui_interfaces.console_interface' from '/home/runner/workspace/src/ui_interfaces/console_interface.py'> does not have the attribute 'VacancyOperationsCoordinator'

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1419: AttributeError
_ ERROR at setup of TestUserInterface.test_filter_saved_vacancies_by_salary_invalid_input _

self = <tests.test_console_interface.TestUserInterface object at 0x7f3463351150>
mock_storage = <Mock id='139862975420624'>
mock_db_manager = <Mock id='139862975429072'>

    @pytest.fixture
    def user_interface(self, mock_storage, mock_db_manager):
        """Экземпляр UserInterface для тестирования"""
>       with patch('src.ui_interfaces.console_interface.UnifiedAPI') as mock_unified_api, \
             patch('src.ui_interfaces.console_interface.VacancySearchHandler') as mock_search_handler, \
             patch('src.ui_interfaces.console_interface.VacancyDisplayHandler') as mock_display_handler, \
             patch('src.ui_interfaces.console_interface.VacancyOperationsCoordinator') as mock_coordinator:

tests/test_console_interface.py:43: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1446: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f34627f6250>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'src.ui_interfaces.console_interface' from '/home/runner/workspace/src/ui_interfaces/console_interface.py'> does not have the attribute 'VacancyOperationsCoordinator'

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1419: AttributeError
_ ERROR at setup of TestUserInterface.test_interface_components_integration __

self = <tests.test_console_interface.TestUserInterface object at 0x7f34633519d0>
mock_storage = <Mock id='139862966856400'>
mock_db_manager = <Mock id='139862966855952'>

    @pytest.fixture
    def user_interface(self, mock_storage, mock_db_manager):
        """Экземпляр UserInterface для тестирования"""
>       with patch('src.ui_interfaces.console_interface.UnifiedAPI') as mock_unified_api, \
             patch('src.ui_interfaces.console_interface.VacancySearchHandler') as mock_search_handler, \
             patch('src.ui_interfaces.console_interface.VacancyDisplayHandler') as mock_display_handler, \
             patch('src.ui_interfaces.console_interface.VacancyOperationsCoordinator') as mock_coordinator:

tests/test_console_interface.py:43: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1446: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f34633e6ed0>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'src.ui_interfaces.console_interface' from '/home/runner/workspace/src/ui_interfaces/console_interface.py'> does not have the attribute 'VacancyOperationsCoordinator'

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1419: AttributeError
_____ ERROR at setup of TestUserInterface.test_error_handling_in_methods _____

self = <tests.test_console_interface.TestUserInterface object at 0x7f3463352110>
mock_storage = <Mock id='139862966687056'>
mock_db_manager = <Mock id='139862966682704'>

    @pytest.fixture
    def user_interface(self, mock_storage, mock_db_manager):
        """Экземпляр UserInterface для тестирования"""
>       with patch('src.ui_interfaces.console_interface.UnifiedAPI') as mock_unified_api, \
             patch('src.ui_interfaces.console_interface.VacancySearchHandler') as mock_search_handler, \
             patch('src.ui_interfaces.console_interface.VacancyDisplayHandler') as mock_display_handler, \
             patch('src.ui_interfaces.console_interface.VacancyOperationsCoordinator') as mock_coordinator:

tests/test_console_interface.py:43: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1446: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f3463361d50>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'src.ui_interfaces.console_interface' from '/home/runner/workspace/src/ui_interfaces/console_interface.py'> does not have the attribute 'VacancyOperationsCoordinator'

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1419: AttributeError
_______ ERROR at setup of TestUserInterface.test_menu_choices_coverage _______

self = <tests.test_console_interface.TestUserInterface object at 0x7f3463352910>
mock_storage = <Mock id='139862974953296'>
mock_db_manager = <Mock id='139862974952336'>

    @pytest.fixture
    def user_interface(self, mock_storage, mock_db_manager):
        """Экземпляр UserInterface для тестирования"""
>       with patch('src.ui_interfaces.console_interface.UnifiedAPI') as mock_unified_api, \
             patch('src.ui_interfaces.console_interface.VacancySearchHandler') as mock_search_handler, \
             patch('src.ui_interfaces.console_interface.VacancyDisplayHandler') as mock_display_handler, \
             patch('src.ui_interfaces.console_interface.VacancyOperationsCoordinator') as mock_coordinator:

tests/test_console_interface.py:43: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1446: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f3462f9b210>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'src.ui_interfaces.console_interface' from '/home/runner/workspace/src/ui_interfaces/console_interface.py'> does not have the attribute 'VacancyOperationsCoordinator'

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1419: AttributeError
________ ERROR at setup of TestUserInterface.test_storage_integration ________

self = <tests.test_console_interface.TestUserInterface object at 0x7f3463342dd0>
mock_storage = <Mock id='139862980063824'>
mock_db_manager = <Mock id='139862980057936'>

    @pytest.fixture
    def user_interface(self, mock_storage, mock_db_manager):
        """Экземпляр UserInterface для тестирования"""
>       with patch('src.ui_interfaces.console_interface.UnifiedAPI') as mock_unified_api, \
             patch('src.ui_interfaces.console_interface.VacancySearchHandler') as mock_search_handler, \
             patch('src.ui_interfaces.console_interface.VacancyDisplayHandler') as mock_display_handler, \
             patch('src.ui_interfaces.console_interface.VacancyOperationsCoordinator') as mock_coordinator:

tests/test_console_interface.py:43: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1446: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f3462f1d310>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'src.ui_interfaces.console_interface' from '/home/runner/workspace/src/ui_interfaces/console_interface.py'> does not have the attribute 'VacancyOperationsCoordinator'

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1419: AttributeError
______ ERROR at setup of TestUserInterface.test_db_manager_integration _______

self = <tests.test_console_interface.TestUserInterface object at 0x7f3463351e10>
mock_storage = <Mock id='139862958380176'>
mock_db_manager = <Mock id='139862958387664'>

    @pytest.fixture
    def user_interface(self, mock_storage, mock_db_manager):
        """Экземпляр UserInterface для тестирования"""
>       with patch('src.ui_interfaces.console_interface.UnifiedAPI') as mock_unified_api, \
             patch('src.ui_interfaces.console_interface.VacancySearchHandler') as mock_search_handler, \
             patch('src.ui_interfaces.console_interface.VacancyDisplayHandler') as mock_display_handler, \
             patch('src.ui_interfaces.console_interface.VacancyOperationsCoordinator') as mock_coordinator:

tests/test_console_interface.py:43: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1446: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f3462305290>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'src.ui_interfaces.console_interface' from '/home/runner/workspace/src/ui_interfaces/console_interface.py'> does not have the attribute 'VacancyOperationsCoordinator'

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1419: AttributeError
__ ERROR at setup of TestUserInterface.test_operations_coordinator_methods ___

self = <tests.test_console_interface.TestUserInterface object at 0x7f3463352c50>
mock_storage = <Mock id='139862975506640'>
mock_db_manager = <Mock id='139862975508368'>

    @pytest.fixture
    def user_interface(self, mock_storage, mock_db_manager):
        """Экземпляр UserInterface для тестирования"""
>       with patch('src.ui_interfaces.console_interface.UnifiedAPI') as mock_unified_api, \
             patch('src.ui_interfaces.console_interface.VacancySearchHandler') as mock_search_handler, \
             patch('src.ui_interfaces.console_interface.VacancyDisplayHandler') as mock_display_handler, \
             patch('src.ui_interfaces.console_interface.VacancyOperationsCoordinator') as mock_coordinator:

tests/test_console_interface.py:43: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1446: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f3462f7f510>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'src.ui_interfaces.console_interface' from '/home/runner/workspace/src/ui_interfaces/console_interface.py'> does not have the attribute 'VacancyOperationsCoordinator'

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1419: AttributeError
__________ ERROR at setup of TestUserInterface.test_demo_db_manager __________

self = <tests.test_console_interface.TestUserInterface object at 0x7f3463353090>
mock_storage = <Mock id='139862980052752'>
mock_db_manager = <Mock id='139862962361104'>

    @pytest.fixture
    def user_interface(self, mock_storage, mock_db_manager):
        """Экземпляр UserInterface для тестирования"""
>       with patch('src.ui_interfaces.console_interface.UnifiedAPI') as mock_unified_api, \
             patch('src.ui_interfaces.console_interface.VacancySearchHandler') as mock_search_handler, \
             patch('src.ui_interfaces.console_interface.VacancyDisplayHandler') as mock_display_handler, \
             patch('src.ui_interfaces.console_interface.VacancyOperationsCoordinator') as mock_coordinator:

tests/test_console_interface.py:43: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1446: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f3462307990>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'src.ui_interfaces.console_interface' from '/home/runner/workspace/src/ui_interfaces/console_interface.py'> does not have the attribute 'VacancyOperationsCoordinator'

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1419: AttributeError
________ ERROR at setup of TestUserInterface.test_setup_superjob_api _________

self = <tests.test_console_interface.TestUserInterface object at 0x7f3463353490>
mock_storage = <Mock id='139862980126416'>
mock_db_manager = <Mock id='139862980122320'>

    @pytest.fixture
    def user_interface(self, mock_storage, mock_db_manager):
        """Экземпляр UserInterface для тестирования"""
>       with patch('src.ui_interfaces.console_interface.UnifiedAPI') as mock_unified_api, \
             patch('src.ui_interfaces.console_interface.VacancySearchHandler') as mock_search_handler, \
             patch('src.ui_interfaces.console_interface.VacancyDisplayHandler') as mock_display_handler, \
             patch('src.ui_interfaces.console_interface.VacancyOperationsCoordinator') as mock_coordinator:

tests/test_console_interface.py:43: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1446: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f3462fd3390>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'src.ui_interfaces.console_interface' from '/home/runner/workspace/src/ui_interfaces/console_interface.py'> does not have the attribute 'VacancyOperationsCoordinator'

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1419: AttributeError
__________ ERROR at setup of TestUserInterface.test_run_normal_exit __________

self = <tests.test_console_interface.TestUserInterface object at 0x7f34633538d0>
mock_storage = <Mock id='139862975831120'>
mock_db_manager = <Mock id='139862975835152'>

    @pytest.fixture
    def user_interface(self, mock_storage, mock_db_manager):
        """Экземпляр UserInterface для тестирования"""
>       with patch('src.ui_interfaces.console_interface.UnifiedAPI') as mock_unified_api, \
             patch('src.ui_interfaces.console_interface.VacancySearchHandler') as mock_search_handler, \
             patch('src.ui_interfaces.console_interface.VacancyDisplayHandler') as mock_display_handler, \
             patch('src.ui_interfaces.console_interface.VacancyOperationsCoordinator') as mock_coordinator:

tests/test_console_interface.py:43: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1446: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f3462752210>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'src.ui_interfaces.console_interface' from '/home/runner/workspace/src/ui_interfaces/console_interface.py'> does not have the attribute 'VacancyOperationsCoordinator'

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1419: AttributeError
_____ ERROR at setup of TestUserInterface.test_all_public_methods_exist ______

self = <tests.test_console_interface.TestUserInterface object at 0x7f3463353dd0>
mock_storage = <Mock id='139862975556048'>
mock_db_manager = <Mock id='139862975545872'>

    @pytest.fixture
    def user_interface(self, mock_storage, mock_db_manager):
        """Экземпляр UserInterface для тестирования"""
>       with patch('src.ui_interfaces.console_interface.UnifiedAPI') as mock_unified_api, \
             patch('src.ui_interfaces.console_interface.VacancySearchHandler') as mock_search_handler, \
             patch('src.ui_interfaces.console_interface.VacancyDisplayHandler') as mock_display_handler, \
             patch('src.ui_interfaces.console_interface.VacancyOperationsCoordinator') as mock_coordinator:

tests/test_console_interface.py:43: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1446: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f3463332dd0>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'src.ui_interfaces.console_interface' from '/home/runner/workspace/src/ui_interfaces/console_interface.py'> does not have the attribute 'VacancyOperationsCoordinator'

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1419: AttributeError
_____ ERROR at setup of TestUserInterface.test_all_private_methods_exist _____

self = <tests.test_console_interface.TestUserInterface object at 0x7f346335c510>
mock_storage = <Mock id='139862962742864'>
mock_db_manager = <Mock id='139862962743568'>

    @pytest.fixture
    def user_interface(self, mock_storage, mock_db_manager):
        """Экземпляр UserInterface для тестирования"""
>       with patch('src.ui_interfaces.console_interface.UnifiedAPI') as mock_unified_api, \
             patch('src.ui_interfaces.console_interface.VacancySearchHandler') as mock_search_handler, \
             patch('src.ui_interfaces.console_interface.VacancyDisplayHandler') as mock_display_handler, \
             patch('src.ui_interfaces.console_interface.VacancyOperationsCoordinator') as mock_coordinator:

tests/test_console_interface.py:43: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1446: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f34623052d0>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'src.ui_interfaces.console_interface' from '/home/runner/workspace/src/ui_interfaces/console_interface.py'> does not have the attribute 'VacancyOperationsCoordinator'

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1419: AttributeError
================================== FAILURES ==================================
___________ TestUserInterface.test_initialization_default_storage ____________

self = <tests.test_console_interface.TestUserInterface object at 0x7f3463340690>
mock_db_manager = <Mock id='139862975533392'>

    def test_initialization_default_storage(self, mock_db_manager):
        """Тест инициализации с хранилищем по умолчанию"""
>       with patch('src.ui_interfaces.console_interface.StorageFactory.get_default_storage') as mock_factory, \
             patch('src.ui_interfaces.console_interface.UnifiedAPI'), \
             patch('src.ui_interfaces.console_interface.VacancySearchHandler'), \
             patch('src.ui_interfaces.console_interface.VacancyDisplayHandler'), \
             patch('src.ui_interfaces.console_interface.VacancyOperationsCoordinator'):

tests/test_console_interface.py:75: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1446: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f3462f9b8d0>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'src.ui_interfaces.console_interface' from '/home/runner/workspace/src/ui_interfaces/console_interface.py'> does not have the attribute 'VacancyOperationsCoordinator'

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1419: AttributeError
___ TestUserInterface.test_display_vacancies_with_pagination_static_method ___

self = <tests.test_console_interface.TestUserInterface object at 0x7f3463349e90>
mock_print = <MagicMock name='print' id='139862975826576'>
mock_input = <MagicMock name='input' id='139862979420176'>

    @patch('builtins.input', side_effect=['n', 'q'])
    @patch('builtins.print')
    def test_display_vacancies_with_pagination_static_method(self, mock_print, mock_input):
        """Тест статического метода отображения вакансий с пагинацией"""
        vacancies = [Mock(vacancy_id=str(i), title=f'Test {i}') for i in range(1, 25)]
    
        # В реальном коде это приватный метод _display_vacancies_with_pagination
>       UserInterface._display_vacancies_with_pagination(vacancies)

tests/test_console_interface.py:224: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/ui_interfaces/console_interface.py:381: in _display_vacancies_with_pagination
    quick_paginate(vacancies, formatter=format_vacancy, header="Вакансии", items_per_page=10)
src/utils/ui_navigation.py:246: in quick_paginate
    navigator.paginate_display(items, formatter, header, show_numbers, custom_actions)
src/utils/ui_navigation.py:47: in paginate_display
    self._display_page(items, current_page, total_pages, formatter, header, show_numbers)
src/utils/ui_navigation.py:92: in _display_page
    formatted_item = formatter(item, i)
                     ^^^^^^^^^^^^^^^^^^
src/ui_interfaces/console_interface.py:379: in format_vacancy
    return VacancyFormatter.format_vacancy_info(vacancy, number)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Mock id='139862958381200'>, vacancy = 1, number = None

    def format_vacancy_info(self, vacancy: Any, number: Optional[int] = None) -> str:
        """
        Форматирование информации о вакансии в строку
    
        Args:
            vacancy: Объект вакансии
            number: Порядковый номер (опционально)
    
        Returns:
            Отформатированная строка с информацией о вакансии
        """
        lines = self._build_vacancy_lines(vacancy, number)
>       return '\n'.join(lines)
               ^^^^^^^^^^^^^^^^
E       TypeError: can only join an iterable

src/utils/vacancy_formatter.py:26: TypeError
______________ TestUserInterface.test_initialization_with_mocks ______________

args = (<tests.test_console_interface.TestUserInterface object at 0x7f346334a290>,)
keywargs = {'mock_db_manager': <Mock id='139862975754192'>, 'mock_storage': <Mock id='139862975836560'>}

    @wraps(func)
    def patched(*args, **keywargs):
>       with self.decoration_helper(patched,
                                    args,
                                    keywargs) as (newargs, newkeywargs):

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1375: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
           ^^^^^^^^^^^^^^
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1357: in decoration_helper
    arg = exit_stack.enter_context(patching)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/contextlib.py:517: in enter_context
    result = _enter(cm)
             ^^^^^^^^^^
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1446: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f3463331050>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'src.ui_interfaces.console_interface' from '/home/runner/workspace/src/ui_interfaces/console_interface.py'> does not have the attribute 'VacancyOperationsCoordinator'

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1419: AttributeError
========================== short test summary info ===========================
FAILED tests/test_console_interface.py::TestUserInterface::test_initialization_default_storage - AttributeError: <module 'src.ui_interfaces.console_interface' from '/home...
FAILED tests/test_console_interface.py::TestUserInterface::test_display_vacancies_with_pagination_static_method - TypeError: can only join an iterable
FAILED tests/test_console_interface.py::TestUserInterface::test_initialization_with_mocks - AttributeError: <module 'src.ui_interfaces.console_interface' from '/home...
ERROR tests/test_console_interface.py::TestUserInterface::test_initialization - AttributeError: <module 'src.ui_interfaces.console_interface' from '/home...
ERROR tests/test_console_interface.py::TestUserInterface::test_show_menu - AttributeError: <module 'src.ui_interfaces.console_interface' from '/home...
ERROR tests/test_console_interface.py::TestUserInterface::test_get_period_choice_default - AttributeError: <module 'src.ui_interfaces.console_interface' from '/home...
ERROR tests/test_console_interface.py::TestUserInterface::test_get_period_choice_custom - AttributeError: <module 'src.ui_interfaces.console_interface' from '/home...
ERROR tests/test_console_interface.py::TestUserInterface::test_get_period_choice_invalid_custom - AttributeError: <module 'src.ui_interfaces.console_interface' from '/home...
ERROR tests/test_console_interface.py::TestUserInterface::test_get_period_choice_cancel - AttributeError: <module 'src.ui_interfaces.console_interface' from '/home...
ERROR tests/test_console_interface.py::TestUserInterface::test_get_period_choice_keyboard_interrupt - AttributeError: <module 'src.ui_interfaces.console_interface' from '/home...
ERROR tests/test_console_interface.py::TestUserInterface::test_show_vacancies_for_deletion_all - AttributeError: <module 'src.ui_interfaces.console_interface' from '/home...
ERROR tests/test_console_interface.py::TestUserInterface::test_show_vacancies_for_deletion_single - AttributeError: <module 'src.ui_interfaces.console_interface' from '/home...
ERROR tests/test_console_interface.py::TestUserInterface::test_show_vacancies_for_deletion_quit - AttributeError: <module 'src.ui_interfaces.console_interface' from '/home...
ERROR tests/test_console_interface.py::TestUserInterface::test_show_vacancies_for_deletion_range - AttributeError: <module 'src.ui_interfaces.console_interface' from '/home...
ERROR tests/test_console_interface.py::TestUserInterface::test_show_vacancies_for_deletion_invalid_range - AttributeError: <module 'src.ui_interfaces.console_interface' from '/home...
ERROR tests/test_console_interface.py::TestUserInterface::test_show_vacancies_for_deletion_pagination - AttributeError: <module 'src.ui_interfaces.console_interface' from '/home...
ERROR tests/test_console_interface.py::TestUserInterface::test_run_keyboard_interrupt - AttributeError: <module 'src.ui_interfaces.console_interface' from '/home...
ERROR tests/test_console_interface.py::TestUserInterface::test_run_exception_handling - AttributeError: <module 'src.ui_interfaces.console_interface' from '/home...
ERROR tests/test_console_interface.py::TestUserInterface::test_run_method_exists - AttributeError: <module 'src.ui_interfaces.console_interface' from '/home...
ERROR tests/test_console_interface.py::TestUserInterface::test_advanced_search_vacancies - AttributeError: <module 'src.ui_interfaces.console_interface' from '/home...
ERROR tests/test_console_interface.py::TestUserInterface::test_advanced_search_vacancies_empty_query - AttributeError: <module 'src.ui_interfaces.console_interface' from '/home...
ERROR tests/test_console_interface.py::TestUserInterface::test_filter_saved_vacancies_by_salary_min - AttributeError: <module 'src.ui_interfaces.console_interface' from '/home...
ERROR tests/test_console_interface.py::TestUserInterface::test_filter_saved_vacancies_by_salary_invalid_input - AttributeError: <module 'src.ui_interfaces.console_interface' from '/home...
ERROR tests/test_console_interface.py::TestUserInterface::test_interface_components_integration - AttributeError: <module 'src.ui_interfaces.console_interface' from '/home...
ERROR tests/test_console_interface.py::TestUserInterface::test_error_handling_in_methods - AttributeError: <module 'src.ui_interfaces.console_interface' from '/home...
ERROR tests/test_console_interface.py::TestUserInterface::test_menu_choices_coverage - AttributeError: <module 'src.ui_interfaces.console_interface' from '/home...
ERROR tests/test_console_interface.py::TestUserInterface::test_storage_integration - AttributeError: <module 'src.ui_interfaces.console_interface' from '/home...
ERROR tests/test_console_interface.py::TestUserInterface::test_db_manager_integration - AttributeError: <module 'src.ui_interfaces.console_interface' from '/home...
ERROR tests/test_console_interface.py::TestUserInterface::test_operations_coordinator_methods - AttributeError: <module 'src.ui_interfaces.console_interface' from '/home...
ERROR tests/test_console_interface.py::TestUserInterface::test_demo_db_manager - AttributeError: <module 'src.ui_interfaces.console_interface' from '/home...
ERROR tests/test_console_interface.py::TestUserInterface::test_setup_superjob_api - AttributeError: <module 'src.ui_interfaces.console_interface' from '/home...
ERROR tests/test_console_interface.py::TestUserInterface::test_run_normal_exit - AttributeError: <module 'src.ui_interfaces.console_interface' from '/home...
ERROR tests/test_console_interface.py::TestUserInterface::test_all_public_methods_exist - AttributeError: <module 'src.ui_interfaces.console_interface' from '/home...
ERROR tests/test_console_interface.py::TestUserInterface::test_all_private_methods_exist - AttributeError: <module 'src.ui_interfaces.console_interface' from '/home...