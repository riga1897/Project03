~/workspace$ pytest
========================== test session starts ==========================
platform linux -- Python 3.11.13, pytest-8.4.1, pluggy-1.6.0
rootdir: /home/runner/workspace
configfile: pyproject.toml
plugins: mock-3.14.1, cov-6.2.1
collected 341 items                                                     

tests/test_abstract.py ........                                   [  2%]
tests/test_abstract_db_manager.py ....                            [  3%]
tests/test_api_config.py ....                                     [  4%]
tests/test_app_config.py .....                                    [  6%]
tests/test_base_api.py ......                                     [  7%]
tests/test_base_parser.py ......                                  [  9%]
tests/test_cache.py .......                                       [ 11%]
tests/test_cached_api.py ...FF...FFF                              [ 14%]
tests/test_db_manager.py .................                        [ 19%]
tests/test_decorators.py .......                                  [ 21%]
tests/test_env_loader.py ............                             [ 25%]
tests/test_file_handlers.py ............                          [ 29%]
tests/test_get_api.py ......                                      [ 30%]
tests/test_hh_api.py .......                                      [ 32%]
tests/test_hh_api_config.py .....                                 [ 34%]
tests/test_hh_parser.py ........                                  [ 36%]
tests/test_menu_manager.py ..........                             [ 39%]
tests/test_paginator.py ......                                    [ 41%]
tests/test_postgres_saver.py .......                              [ 43%]
tests/test_salary_utils.py ......................                 [ 49%]
tests/test_search_utils.py ..................                     [ 55%]
tests/test_sj_api.py ..FF.........F                               [ 59%]
tests/test_sj_api_config.py .....                                 [ 60%]
tests/test_sj_parser.py ........                                  [ 63%]
tests/test_storage_factory.py ........                            [ 65%]
tests/test_target_companies.py .....                              [ 66%]
tests/test_ui_config.py .....                                     [ 68%]
tests/test_ui_helpers.py ...........                              [ 71%]
tests/test_unified_api.py .................                       [ 76%]
tests/test_user_interface.py ........                             [ 78%]
tests/test_vacancy_display_handler.py .........                   [ 81%]
tests/test_vacancy_formatter.py ..............                    [ 85%]
tests/test_vacancy_models.py F..FF.F.FF..FFFF.FF..FF..            [ 92%]
tests/test_vacancy_operations_coordinator.py ...........          [ 96%]
tests/test_vacancy_search_handler.py ......                       [ 97%]
tests/test_vacancy_stats.py .......                               [100%]

=============================== FAILURES ================================
_________________ TestCachedAPI.test_cache_integration __________________

self = <workspace.tests.test_cached_api.TestCachedAPI object at 0x7fe47a169dd0>
mock_file_cache = <MagicMock name='FileCache' id='140619260514000'>

    @patch("src.utils.cache.FileCache")
    def test_cache_integration(self, mock_file_cache):
        """Тест интеграции с кэшем"""
        mock_cache_instance = Mock()
        mock_cache_instance.get.return_value = None
        mock_cache_instance.set.return_value = None
        mock_file_cache.return_value = mock_cache_instance
    
        api = ConcreteCachedAPI()
    
        # Устанавливаем тестовые данные
        test_vacancies = [
            Vacancy("123", "Python Developer", "https://test.com", "test_source")
        ]
        api._test_data = test_vacancies
    
        # Тестируем получение вакансий
        result = api.get_vacancies("Python")
>       assert result == test_vacancies
E       assert [] == [<src.vacanci...7fe4795853d0>]
E         
E         Right contains one more item: <src.vacancies.models.Vacancy object at 0x7fe4795853d0>
E         Use -v to get more diff

tests/test_cached_api.py:95: AssertionError
_________________ TestCachedAPI.test_clear_cache_method _________________

self = <workspace.tests.test_cached_api.TestCachedAPI object at 0x7fe47a16a0d0>
mock_file_cache = <MagicMock name='FileCache' id='140619261036240'>

    @patch("src.utils.cache.FileCache")
    def test_clear_cache_method(self, mock_file_cache):
        """Тест метода очистки кэша"""
        mock_cache_instance = Mock()
        mock_cache_instance.clear.return_value = None
        mock_file_cache.return_value = mock_cache_instance
    
        api = ConcreteCachedAPI()
    
        # Проверяем наличие метода clear_cache или аналогичного
        if hasattr(api, 'clear_cache'):
>           api.clear_cache()
E           TypeError: CachedAPI.clear_cache() missing 1 required positional argument: 'api_prefix'

tests/test_cached_api.py:108: TypeError
_____________ TestCachedAPIHelpers.test_make_request_method _____________

self = <workspace.tests.test_cached_api.TestCachedAPIHelpers object at 0x7fe47a1697d0>
mock_file_cache = <MagicMock name='FileCache' id='140619256447952'>

    @patch("src.utils.cache.FileCache")
    def test_make_request_method(self, mock_file_cache):
        """Тест метода _make_request"""
        api = ConcreteCachedAPI()
    
>       result = api._make_request("https://test.com", {"query": "Python"})
                 ^^^^^^^^^^^^^^^^^
E       AttributeError: 'ConcreteCachedAPI' object has no attribute '_make_request'

tests/test_cached_api.py:167: AttributeError
____________ TestCachedAPIHelpers.test_parse_response_method ____________

self = <workspace.tests.test_cached_api.TestCachedAPIHelpers object at 0x7fe47a168b10>
mock_file_cache = <MagicMock name='FileCache' id='140619260698384'>

    @patch("src.utils.cache.FileCache")
    def test_parse_response_method(self, mock_file_cache):
        """Тест метода _parse_response"""
        api = ConcreteCachedAPI()
    
        test_response = {"items": [{"id": "123", "name": "Test"}], "found": 1}
>       result = api._parse_response(test_response)
                 ^^^^^^^^^^^^^^^^^^^
E       AttributeError: 'ConcreteCachedAPI' object has no attribute '_parse_response'

tests/test_cached_api.py:176: AttributeError
___________ TestCachedAPIHelpers.test_cached_api_inheritance ____________

self = <workspace.tests.test_cached_api.TestCachedAPIHelpers object at 0x7fe47a169610>
mock_file_cache = <MagicMock name='FileCache' id='140619256462992'>

    @patch("src.utils.cache.FileCache")
    def test_cached_api_inheritance(self, mock_file_cache):
        """Тест наследования от CachedAPI"""
        api = ConcreteCachedAPI()
        assert isinstance(api, CachedAPI)
    
        # Проверяем, что все необходимые методы доступны
        assert hasattr(api, 'get_vacancies')
>       assert hasattr(api, '_make_request')
E       AssertionError: assert False
E        +  where False = hasattr(<workspace.tests.test_cached_api.ConcreteCachedAPI object at 0x7fe478d465d0>, '_make_request')

tests/test_cached_api.py:187: AssertionError
______________ TestSuperJobAPI.test_get_companies_success _______________

self = <workspace.tests.test_sj_api.TestSuperJobAPI object at 0x7fe479130690>
mock_paginator = <MagicMock name='Paginator' id='140619264837392'>
mock_api_config = <MagicMock name='APIConfig' id='140619256619792'>
mock_cache = <MagicMock name='FileCache' id='140619256625872'>
mock_connector = <MagicMock name='APIConnector' id='140619261394320'>

    @patch('src.api_modules.sj_api.APIConnector')
    @patch('src.utils.cache.FileCache')
    @patch('src.api_modules.sj_api.APIConfig')
    @patch('src.api_modules.sj_api.Paginator')
    def test_get_companies_success(self, mock_paginator, mock_api_config, mock_cache, mock_connector):
        """Тест успешного получения компаний"""
        mock_config = Mock()
        mock_config.superjob_base_url = "https://api.superjob.ru"
        mock_config.superjob_api_key = "test_key"
        mock_api_config.return_value = mock_config
    
        mock_connector_instance = Mock()
        mock_connector.return_value = mock_connector_instance
        mock_connector_instance.get.return_value = {"objects": [], "total": 0}
    
        api = SuperJobAPI()
    
        # Мокируем метод получения компаний
        api._get_companies_from_api = Mock(return_value=[])
>       result = api.get_companies()
                 ^^^^^^^^^^^^^^^^^
E       AttributeError: 'SuperJobAPI' object has no attribute 'get_companies'

tests/test_sj_api.py:98: AttributeError
________________ TestSuperJobAPI.test_parse_vacancy_data ________________

self = <workspace.tests.test_sj_api.TestSuperJobAPI object at 0x7fe479130a50>
mock_paginator = <MagicMock name='Paginator' id='140619261392208'>
mock_api_config = <MagicMock name='APIConfig' id='140619261050000'>
mock_cache = <MagicMock name='FileCache' id='140619261046096'>
mock_connector = <MagicMock name='APIConnector' id='140619261043344'>

    @patch('src.api_modules.sj_api.APIConnector')
    @patch('src.utils.cache.FileCache')
    @patch('src.api_modules.sj_api.APIConfig')
    @patch('src.api_modules.sj_api.Paginator')
    def test_parse_vacancy_data(self, mock_paginator, mock_api_config, mock_cache, mock_connector):
        """Тест парсинга данных вакансии"""
        mock_config = Mock()
        mock_config.superjob_base_url = "https://api.superjob.ru"
        mock_config.superjob_api_key = "test_key"
        mock_api_config.return_value = mock_config
    
        api = SuperJobAPI()
    
        # Тестовые данные вакансии
        vacancy_data = {
            "id": 123,
            "profession": "Python Developer",
            "link": "https://superjob.ru/vacancy/123",
            "payment_from": 100000,
            "payment_to": 150000,
            "currency": "rub",
            "firm": {"title": "Test Company"}
        }
    
        # Создаем мок парсера в модуле
>       with patch('src.vacancies.parsers.sj_parser.SJParser') as mock_parser:

tests/test_sj_api.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1446: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <unittest.mock._patch object at 0x7fe478d49910>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'src.vacancies.parsers.sj_parser' from '/home/runner/workspace/tests/../src/vacancies/parsers/sj_parser.py'> does not have the attribute 'SJParser'

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1419: AttributeError
___________ TestSuperJobAPIHelpers.test_api_response_parsing ____________

self = <workspace.tests.test_sj_api.TestSuperJobAPIHelpers object at 0x7fe479118690>
mock_paginator = <MagicMock name='Paginator' id='140619256345744'>
mock_api_config = <MagicMock name='APIConfig' id='140619256547600'>
mock_cache = <MagicMock name='FileCache' id='140619256921552'>
mock_connector = <MagicMock name='APIConnector' id='140619264876944'>

    @patch('src.api_modules.sj_api.APIConnector')
    @patch('src.utils.cache.FileCache')
    @patch('src.api_modules.sj_api.APIConfig')
    @patch('src.api_modules.sj_api.Paginator')
    def test_api_response_parsing(self, mock_paginator, mock_api_config, mock_cache, mock_connector):
        """Тест парсинга ответа API"""
        mock_config = Mock()
        mock_config.superjob_base_url = "https://api.superjob.ru"
        mock_config.superjob_api_key = "test_key"
        mock_api_config.return_value = mock_config
    
        api = SuperJobAPI()
    
        # Тестируем парсинг ответа
        test_response = {
            "objects": [
                {"id": 123, "profession": "Python Developer"},
                {"id": 124, "profession": "Java Developer"}
            ],
            "total": 2
        }
    
        # Мокируем методы парсинга
>       with patch('src.vacancies.parsers.sj_parser.SJParser') as mock_parser:

tests/test_sj_api.py:384: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1446: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <unittest.mock._patch object at 0x7fe4791ed850>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'src.vacancies.parsers.sj_parser' from '/home/runner/workspace/tests/../src/vacancies/parsers/sj_parser.py'> does not have the attribute 'SJParser'

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1419: AttributeError
________________ TestVacancy.test_vacancy_initialization ________________

self = <workspace.tests.test_vacancy_models.TestVacancy object at 0x7fe47890ac10>

    def test_vacancy_initialization(self):
        """Тест инициализации вакансии"""
        vacancy = Vacancy("123", "Python Developer", "https://test.com", "hh.ru")
>       assert vacancy.vacancy_id == "123"
E       AssertionError: assert 'fdaf1193-42a...-01dc10b41546' == '123'
E         
E         - 123
E         + fdaf1193-42af-458c-be73-01dc10b41546

tests/test_vacancy_models.py:95: AssertionError
__________________ TestVacancy.test_vacancy_comparison __________________

self = <workspace.tests.test_vacancy_models.TestVacancy object at 0x7fe47890ad50>

    def test_vacancy_comparison(self):
        """Тест сравнения вакансий"""
>       vacancy1 = TestableVacancy("123", "Python Developer", "https://test.com", "hh.ru")
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_vacancy_models.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests/test_vacancy_models.py:50: in __init__
    super().__init__(vacancy_id, title, url, source, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <workspace.tests.test_vacancy_models.TestableVacancy object at 0x7fe478d60bb0>
title = '123', url = 'Python Developer', salary = 'https://test.com'
description = 'hh.ru', requirements = None, responsibilities = None
employer = None, employer_id = None, experience = None, employment = None
schedule = None, published_at = None, skills = None
detailed_description = None, benefits = None, vacancy_id = None
source = 'unknown', area = None

    def __init__(
        self,
        title: str,
        url: str,
        salary: Optional[Dict[str, Any]] = None,
        description: str = "",
        requirements: Optional[str] = None,
        responsibilities: Optional[str] = None,
        employer: Optional[Dict[str, Any]] = None,
        employer_id: Optional[str] = None,  # Новый параметр для ID работодателя
        experience: Optional[str] = None,
        employment: Optional[str] = None,
        schedule: Optional[str] = None,
        published_at: Optional[str] = None,
        skills: Optional[List[Dict[str, str]]] = None,
        detailed_description: Optional[str] = None,
        benefits: Optional[str] = None,
        vacancy_id: Optional[str] = None,
        source: str = "unknown",
        area: Optional[str] = None,
    ):
        self.company_id = ""  # Инициализируем как строку
        # Используем переданный ID, если есть, иначе генерируем UUID
        if vacancy_id and str(vacancy_id).strip() and str(vacancy_id) != "":
            self.vacancy_id = str(vacancy_id)
        else:
            self.vacancy_id = str(uuid.uuid4())
>       self.title = title
        ^^^^^^^^^^
E       AttributeError: property 'title' of 'TestableVacancy' object has no setter

src/vacancies/models.py:72: AttributeError
_____________________ TestVacancy.test_vacancy_hash _____________________

self = <workspace.tests.test_vacancy_models.TestVacancy object at 0x7fe47890b250>

    def test_vacancy_hash(self):
        """Тест хэширования вакансий"""
>       vacancy1 = TestableVacancy("123", "Python Developer", "https://test.com", "hh.ru")
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_vacancy_models.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests/test_vacancy_models.py:50: in __init__
    super().__init__(vacancy_id, title, url, source, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <workspace.tests.test_vacancy_models.TestableVacancy object at 0x7fe4789ae5b0>
title = '123', url = 'Python Developer', salary = 'https://test.com'
description = 'hh.ru', requirements = None, responsibilities = None
employer = None, employer_id = None, experience = None, employment = None
schedule = None, published_at = None, skills = None
detailed_description = None, benefits = None, vacancy_id = None
source = 'unknown', area = None

    def __init__(
        self,
        title: str,
        url: str,
        salary: Optional[Dict[str, Any]] = None,
        description: str = "",
        requirements: Optional[str] = None,
        responsibilities: Optional[str] = None,
        employer: Optional[Dict[str, Any]] = None,
        employer_id: Optional[str] = None,  # Новый параметр для ID работодателя
        experience: Optional[str] = None,
        employment: Optional[str] = None,
        schedule: Optional[str] = None,
        published_at: Optional[str] = None,
        skills: Optional[List[Dict[str, str]]] = None,
        detailed_description: Optional[str] = None,
        benefits: Optional[str] = None,
        vacancy_id: Optional[str] = None,
        source: str = "unknown",
        area: Optional[str] = None,
    ):
        self.company_id = ""  # Инициализируем как строку
        # Используем переданный ID, если есть, иначе генерируем UUID
        if vacancy_id and str(vacancy_id).strip() and str(vacancy_id) != "":
            self.vacancy_id = str(vacancy_id)
        else:
            self.vacancy_id = str(uuid.uuid4())
>       self.title = title
        ^^^^^^^^^^
E       AttributeError: property 'title' of 'TestableVacancy' object has no setter

src/vacancies/models.py:72: AttributeError
_____________________ TestVacancy.test_vacancy_repr _____________________

self = <workspace.tests.test_vacancy_models.TestVacancy object at 0x7fe478908650>

    def test_vacancy_repr(self):
        """Тест представления Vacancy для разработчика"""
>       vacancy = TestableVacancy("123", "Python Developer", "https://test.com", "hh.ru")
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_vacancy_models.py:153: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests/test_vacancy_models.py:50: in __init__
    super().__init__(vacancy_id, title, url, source, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <workspace.tests.test_vacancy_models.TestableVacancy object at 0x7fe47895eea0>
title = '123', url = 'Python Developer', salary = 'https://test.com'
description = 'hh.ru', requirements = None, responsibilities = None
employer = None, employer_id = None, experience = None, employment = None
schedule = None, published_at = None, skills = None
detailed_description = None, benefits = None, vacancy_id = None
source = 'unknown', area = None

    def __init__(
        self,
        title: str,
        url: str,
        salary: Optional[Dict[str, Any]] = None,
        description: str = "",
        requirements: Optional[str] = None,
        responsibilities: Optional[str] = None,
        employer: Optional[Dict[str, Any]] = None,
        employer_id: Optional[str] = None,  # Новый параметр для ID работодателя
        experience: Optional[str] = None,
        employment: Optional[str] = None,
        schedule: Optional[str] = None,
        published_at: Optional[str] = None,
        skills: Optional[List[Dict[str, str]]] = None,
        detailed_description: Optional[str] = None,
        benefits: Optional[str] = None,
        vacancy_id: Optional[str] = None,
        source: str = "unknown",
        area: Optional[str] = None,
    ):
        self.company_id = ""  # Инициализируем как строку
        # Используем переданный ID, если есть, иначе генерируем UUID
        if vacancy_id and str(vacancy_id).strip() and str(vacancy_id) != "":
            self.vacancy_id = str(vacancy_id)
        else:
            self.vacancy_id = str(uuid.uuid4())
>       self.title = title
        ^^^^^^^^^^
E       AttributeError: property 'title' of 'TestableVacancy' object has no setter

src/vacancies/models.py:72: AttributeError
___________________ TestVacancy.test_vacancy_to_dict ____________________

self = <workspace.tests.test_vacancy_models.TestVacancy object at 0x7fe478909150>

    def test_vacancy_to_dict(self):
        """Тест преобразования вакансии в словарь"""
        # Создаем зарплату с правильными параметрами
        salary_data = {"from": 100000, "to": 150000, "currency": "RUR"}
    
        vacancy = Vacancy(
            vacancy_id="123",
            title="Python Developer",
            url="https://test.com",
            source="hh.ru",
            salary=salary_data
        )
    
>       result = vacancy.to_dict()
                 ^^^^^^^^^^^^^^^^^

tests/test_vacancy_models.py:186: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <src.vacancies.models.Vacancy object at 0x7fe4789afc70>

    def to_dict(self) -> Dict[str, Any]:
        """Преобразование вакансии в словарь"""
        result = {
            "vacancy_id": self.vacancy_id,
            "title": self.title,
            "url": self.url,
            "source": self.source,
            "area": self.area,
            "experience": self.experience,
            "employment": self.employment,
            "description": self.description,
            "published_at": self.published_at,
        }
    
        if self.salary:
            result["salary"] = {
>               "from_amount": self.salary.from_amount,
                               ^^^^^^^^^^^^^^^^^^^^^^^
                "to_amount": self.salary.to_amount,
                "currency": self.salary.currency,
            }
E           AttributeError: 'Salary' object has no attribute 'from_amount'

src/vacancies/models.py:364: AttributeError
_________________ TestVacancy.test_vacancy_minimal_data _________________

self = <workspace.tests.test_vacancy_models.TestVacancy object at 0x7fe478909610>

    def test_vacancy_minimal_data(self):
        """Тест создания вакансии с минимальными данными"""
        vacancy = Vacancy("123", "Python Developer", "https://test.com", "hh.ru")
>       assert vacancy.vacancy_id == "123"
E       AssertionError: assert '6d4afe07-d65...-36ad6b46789c' == '123'
E         
E         - 123
E         + 6d4afe07-d658-40e1-8a6c-36ad6b46789c

tests/test_vacancy_models.py:194: AssertionError
_____________ TestVacancy.test_vacancy_employer_properties ______________

self = <workspace.tests.test_vacancy_models.TestVacancy object at 0x7fe478dfb650>

    def test_vacancy_employer_properties(self):
        """Тест свойств работодателя вакансии"""
        employer = {"name": "Test Company", "id": "1"}
>       vacancy = TestableVacancy(
            vacancy_id="123",
            title="Python Developer",
            url="https://test.com",
            source="hh.ru",
            employer=employer,
        )

tests/test_vacancy_models.py:237: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests/test_vacancy_models.py:50: in __init__
    super().__init__(vacancy_id, title, url, source, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <workspace.tests.test_vacancy_models.TestableVacancy object at 0x7fe479948ae0>
title = '123', url = 'Python Developer', salary = 'https://test.com'
description = 'hh.ru', requirements = None, responsibilities = None
employer = {'id': '1', 'name': 'Test Company'}, employer_id = None
experience = None, employment = None, schedule = None
published_at = None, skills = None, detailed_description = None
benefits = None, vacancy_id = None, source = 'unknown', area = None

    def __init__(
        self,
        title: str,
        url: str,
        salary: Optional[Dict[str, Any]] = None,
        description: str = "",
        requirements: Optional[str] = None,
        responsibilities: Optional[str] = None,
        employer: Optional[Dict[str, Any]] = None,
        employer_id: Optional[str] = None,  # Новый параметр для ID работодателя
        experience: Optional[str] = None,
        employment: Optional[str] = None,
        schedule: Optional[str] = None,
        published_at: Optional[str] = None,
        skills: Optional[List[Dict[str, str]]] = None,
        detailed_description: Optional[str] = None,
        benefits: Optional[str] = None,
        vacancy_id: Optional[str] = None,
        source: str = "unknown",
        area: Optional[str] = None,
    ):
        self.company_id = ""  # Инициализируем как строку
        # Используем переданный ID, если есть, иначе генерируем UUID
        if vacancy_id and str(vacancy_id).strip() and str(vacancy_id) != "":
            self.vacancy_id = str(vacancy_id)
        else:
            self.vacancy_id = str(uuid.uuid4())
>       self.title = title
        ^^^^^^^^^^
E       AttributeError: property 'title' of 'TestableVacancy' object has no setter

src/vacancies/models.py:72: AttributeError
__________________ TestVacancy.test_vacancy_validation __________________

self = <workspace.tests.test_vacancy_models.TestVacancy object at 0x7fe478dfb3d0>

    def test_vacancy_validation(self):
        """Тест валидации данных вакансии"""
        # Валидная вакансия
>       valid_vacancy = TestableVacancy("123", "Python Developer", "https://test.com", "hh.ru")
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_vacancy_models.py:250: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests/test_vacancy_models.py:50: in __init__
    super().__init__(vacancy_id, title, url, source, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <workspace.tests.test_vacancy_models.TestableVacancy object at 0x7fe478d81570>
title = '123', url = 'Python Developer', salary = 'https://test.com'
description = 'hh.ru', requirements = None, responsibilities = None
employer = None, employer_id = None, experience = None, employment = None
schedule = None, published_at = None, skills = None
detailed_description = None, benefits = None, vacancy_id = None
source = 'unknown', area = None

    def __init__(
        self,
        title: str,
        url: str,
        salary: Optional[Dict[str, Any]] = None,
        description: str = "",
        requirements: Optional[str] = None,
        responsibilities: Optional[str] = None,
        employer: Optional[Dict[str, Any]] = None,
        employer_id: Optional[str] = None,  # Новый параметр для ID работодателя
        experience: Optional[str] = None,
        employment: Optional[str] = None,
        schedule: Optional[str] = None,
        published_at: Optional[str] = None,
        skills: Optional[List[Dict[str, str]]] = None,
        detailed_description: Optional[str] = None,
        benefits: Optional[str] = None,
        vacancy_id: Optional[str] = None,
        source: str = "unknown",
        area: Optional[str] = None,
    ):
        self.company_id = ""  # Инициализируем как строку
        # Используем переданный ID, если есть, иначе генерируем UUID
        if vacancy_id and str(vacancy_id).strip() and str(vacancy_id) != "":
            self.vacancy_id = str(vacancy_id)
        else:
            self.vacancy_id = str(uuid.uuid4())
>       self.title = title
        ^^^^^^^^^^
E       AttributeError: property 'title' of 'TestableVacancy' object has no setter

src/vacancies/models.py:72: AttributeError
_________________ TestVacancy.test_vacancy_update_data __________________

self = <workspace.tests.test_vacancy_models.TestVacancy object at 0x7fe478df86d0>

    def test_vacancy_update_data(self):
        """Тест обновления данных вакансии"""
>       vacancy = TestableVacancy("123", "Python Developer", "https://test.com", "hh.ru")
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_vacancy_models.py:259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests/test_vacancy_models.py:50: in __init__
    super().__init__(vacancy_id, title, url, source, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <workspace.tests.test_vacancy_models.TestableVacancy object at 0x7fe478d0fd40>
title = '123', url = 'Python Developer', salary = 'https://test.com'
description = 'hh.ru', requirements = None, responsibilities = None
employer = None, employer_id = None, experience = None, employment = None
schedule = None, published_at = None, skills = None
detailed_description = None, benefits = None, vacancy_id = None
source = 'unknown', area = None

    def __init__(
        self,
        title: str,
        url: str,
        salary: Optional[Dict[str, Any]] = None,
        description: str = "",
        requirements: Optional[str] = None,
        responsibilities: Optional[str] = None,
        employer: Optional[Dict[str, Any]] = None,
        employer_id: Optional[str] = None,  # Новый параметр для ID работодателя
        experience: Optional[str] = None,
        employment: Optional[str] = None,
        schedule: Optional[str] = None,
        published_at: Optional[str] = None,
        skills: Optional[List[Dict[str, str]]] = None,
        detailed_description: Optional[str] = None,
        benefits: Optional[str] = None,
        vacancy_id: Optional[str] = None,
        source: str = "unknown",
        area: Optional[str] = None,
    ):
        self.company_id = ""  # Инициализируем как строку
        # Используем переданный ID, если есть, иначе генерируем UUID
        if vacancy_id and str(vacancy_id).strip() and str(vacancy_id) != "":
            self.vacancy_id = str(vacancy_id)
        else:
            self.vacancy_id = str(uuid.uuid4())
>       self.title = title
        ^^^^^^^^^^
E       AttributeError: property 'title' of 'TestableVacancy' object has no setter

src/vacancies/models.py:72: AttributeError
______________ TestVacancy.test_vacancy_source_formatting _______________

self = <workspace.tests.test_vacancy_models.TestVacancy object at 0x7fe478dfa790>

    def test_vacancy_source_formatting(self):
        """Тест форматирования источника вакансии"""
>       hh_vacancy = TestableVacancy("123", "Python Developer", "https://test.com", "hh.ru")
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_vacancy_models.py:274: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests/test_vacancy_models.py:50: in __init__
    super().__init__(vacancy_id, title, url, source, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <workspace.tests.test_vacancy_models.TestableVacancy object at 0x7fe47895ed00>
title = '123', url = 'Python Developer', salary = 'https://test.com'
description = 'hh.ru', requirements = None, responsibilities = None
employer = None, employer_id = None, experience = None, employment = None
schedule = None, published_at = None, skills = None
detailed_description = None, benefits = None, vacancy_id = None
source = 'unknown', area = None

    def __init__(
        self,
        title: str,
        url: str,
        salary: Optional[Dict[str, Any]] = None,
        description: str = "",
        requirements: Optional[str] = None,
        responsibilities: Optional[str] = None,
        employer: Optional[Dict[str, Any]] = None,
        employer_id: Optional[str] = None,  # Новый параметр для ID работодателя
        experience: Optional[str] = None,
        employment: Optional[str] = None,
        schedule: Optional[str] = None,
        published_at: Optional[str] = None,
        skills: Optional[List[Dict[str, str]]] = None,
        detailed_description: Optional[str] = None,
        benefits: Optional[str] = None,
        vacancy_id: Optional[str] = None,
        source: str = "unknown",
        area: Optional[str] = None,
    ):
        self.company_id = ""  # Инициализируем как строку
        # Используем переданный ID, если есть, иначе генерируем UUID
        if vacancy_id and str(vacancy_id).strip() and str(vacancy_id) != "":
            self.vacancy_id = str(vacancy_id)
        else:
            self.vacancy_id = str(uuid.uuid4())
>       self.title = title
        ^^^^^^^^^^
E       AttributeError: property 'title' of 'TestableVacancy' object has no setter

src/vacancies/models.py:72: AttributeError
____________ TestVacancyEdgeCases.test_vacancy_empty_fields _____________

self = <workspace.tests.test_vacancy_models.TestVacancyEdgeCases object at 0x7fe478df9890>

    def test_vacancy_empty_fields(self):
        """Тест вакансии с пустыми полями"""
        vacancy = Vacancy("", "", "", "")
>       assert vacancy.vacancy_id == ""
E       AssertionError: assert 'd3cfbb75-61b...-940a58db4af9' == ''
E         
E         + d3cfbb75-61b7-4e33-9fbd-940a58db4af9

tests/test_vacancy_models.py:301: AssertionError
_____________ TestVacancyEdgeCases.test_vacancy_none_salary _____________

self = <workspace.tests.test_vacancy_models.TestVacancyEdgeCases object at 0x7fe478df9d90>

    def test_vacancy_none_salary(self):
        """Тест вакансии без зарплаты"""
>       vacancy = Vacancy("123", "Python Developer", "https://test.com", "hh.ru", salary=None)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       TypeError: Vacancy.__init__() got multiple values for argument 'salary'

tests/test_vacancy_models.py:308: TypeError
_______ TestVacancyDataTransformation.test_vacancy_dict_roundtrip _______

self = <workspace.tests.test_vacancy_models.TestVacancyDataTransformation object at 0x7fe478dfaf10>

    def test_vacancy_dict_roundtrip(self):
        """Тест преобразования вакансии в словарь и обратно"""
        # Создаем оригинальную вакансию
        salary_data = {"from": 100000, "to": 150000, "currency": "RUR"}
    
        original_vacancy = Vacancy(
            vacancy_id="123",
            title="Python Developer",
            url="https://test.com",
            source="hh.ru",
            salary=salary_data
        )
    
        # Преобразуем в словарь
>       vacancy_dict = original_vacancy.to_dict()
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_vacancy_models.py:374: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <src.vacancies.models.Vacancy object at 0x7fe4789acfc0>

    def to_dict(self) -> Dict[str, Any]:
        """Преобразование вакансии в словарь"""
        result = {
            "vacancy_id": self.vacancy_id,
            "title": self.title,
            "url": self.url,
            "source": self.source,
            "area": self.area,
            "experience": self.experience,
            "employment": self.employment,
            "description": self.description,
            "published_at": self.published_at,
        }
    
        if self.salary:
            result["salary"] = {
>               "from_amount": self.salary.from_amount,
                               ^^^^^^^^^^^^^^^^^^^^^^^
                "to_amount": self.salary.to_amount,
                "currency": self.salary.currency,
            }
E           AttributeError: 'Salary' object has no attribute 'from_amount'

src/vacancies/models.py:364: AttributeError
___ TestVacancyDataTransformation.test_vacancy_dict_with_complex_data ___

self = <workspace.tests.test_vacancy_models.TestVacancyDataTransformation object at 0x7fe478deb050>

    def test_vacancy_dict_with_complex_data(self):
        """Тест преобразования сложных данных в словарь"""
        employer = {"name": "Test Company", "id": "123", "trusted": True}
        salary_data = {"from": 100000, "to": 150000, "currency": "RUR"}
    
        vacancy = Vacancy(
            vacancy_id="123",
            title="Python Developer",
            url="https://test.com",
            source="hh.ru",
            salary=salary_data,
            employer=employer,
            description="Long description",
            area="Москва"
        )
    
>       result = vacancy.to_dict()
                 ^^^^^^^^^^^^^^^^^

tests/test_vacancy_models.py:401: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <src.vacancies.models.Vacancy object at 0x7fe4789ae5b0>

    def to_dict(self) -> Dict[str, Any]:
        """Преобразование вакансии в словарь"""
        result = {
            "vacancy_id": self.vacancy_id,
            "title": self.title,
            "url": self.url,
            "source": self.source,
            "area": self.area,
            "experience": self.experience,
            "employment": self.employment,
            "description": self.description,
            "published_at": self.published_at,
        }
    
        if self.salary:
            result["salary"] = {
>               "from_amount": self.salary.from_amount,
                               ^^^^^^^^^^^^^^^^^^^^^^^
                "to_amount": self.salary.to_amount,
                "currency": self.salary.currency,
            }
E           AttributeError: 'Salary' object has no attribute 'from_amount'

src/vacancies/models.py:364: AttributeError
=========================== warnings summary ============================
tests/test_vacancy_display_handler.py:30
  /home/runner/workspace/tests/test_vacancy_display_handler.py:30: PytestCollectionWarning: cannot collect test class 'TestableVacancyDisplayHandler' because it has a __init__ constructor (from: tests/test_vacancy_display_handler.py)
    class TestableVacancyDisplayHandler(VacancyDisplayHandler):

tests/test_vacancy_formatter.py:15
  /home/runner/workspace/tests/test_vacancy_formatter.py:15: PytestCollectionWarning: cannot collect test class 'TestableVacancyFormatter' because it has a __init__ constructor (from: tests/test_vacancy_formatter.py)
    class TestableVacancyFormatter(VacancyFormatter):

tests/test_vacancy_models.py:36
  /home/runner/workspace/tests/test_vacancy_models.py:36: PytestCollectionWarning: cannot collect test class 'TestableVacancy' because it has a __init__ constructor (from: tests/test_vacancy_models.py)
    class TestableVacancy(Vacancy):

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
======================== short test summary info ========================
FAILED tests/test_cached_api.py::TestCachedAPI::test_cache_integration - assert [] == [<src.vacanci...7fe4795853d0>]
FAILED tests/test_cached_api.py::TestCachedAPI::test_clear_cache_method - TypeError: CachedAPI.clear_cache() missing 1 required positional arg...
FAILED tests/test_cached_api.py::TestCachedAPIHelpers::test_make_request_method - AttributeError: 'ConcreteCachedAPI' object has no attribute '_make_r...
FAILED tests/test_cached_api.py::TestCachedAPIHelpers::test_parse_response_method - AttributeError: 'ConcreteCachedAPI' object has no attribute '_parse_...
FAILED tests/test_cached_api.py::TestCachedAPIHelpers::test_cached_api_inheritance - AssertionError: assert False
FAILED tests/test_sj_api.py::TestSuperJobAPI::test_get_companies_success - AttributeError: 'SuperJobAPI' object has no attribute 'get_companies'
FAILED tests/test_sj_api.py::TestSuperJobAPI::test_parse_vacancy_data - AttributeError: <module 'src.vacancies.parsers.sj_parser' from '/hom...
FAILED tests/test_sj_api.py::TestSuperJobAPIHelpers::test_api_response_parsing - AttributeError: <module 'src.vacancies.parsers.sj_parser' from '/hom...
FAILED tests/test_vacancy_models.py::TestVacancy::test_vacancy_initialization - AssertionError: assert 'fdaf1193-42a...-01dc10b41546' == '123'
FAILED tests/test_vacancy_models.py::TestVacancy::test_vacancy_comparison - AttributeError: property 'title' of 'TestableVacancy' object has no ...
FAILED tests/test_vacancy_models.py::TestVacancy::test_vacancy_hash - AttributeError: property 'title' of 'TestableVacancy' object has no ...
FAILED tests/test_vacancy_models.py::TestVacancy::test_vacancy_repr - AttributeError: property 'title' of 'TestableVacancy' object has no ...
FAILED tests/test_vacancy_models.py::TestVacancy::test_vacancy_to_dict - AttributeError: 'Salary' object has no attribute 'from_amount'
FAILED tests/test_vacancy_models.py::TestVacancy::test_vacancy_minimal_data - AssertionError: assert '6d4afe07-d65...-36ad6b46789c' == '123'
FAILED tests/test_vacancy_models.py::TestVacancy::test_vacancy_employer_properties - AttributeError: property 'title' of 'TestableVacancy' object has no ...
FAILED tests/test_vacancy_models.py::TestVacancy::test_vacancy_validation - AttributeError: property 'title' of 'TestableVacancy' object has no ...
FAILED tests/test_vacancy_models.py::TestVacancy::test_vacancy_update_data - AttributeError: property 'title' of 'TestableVacancy' object has no ...
FAILED tests/test_vacancy_models.py::TestVacancy::test_vacancy_source_formatting - AttributeError: property 'title' of 'TestableVacancy' object has no ...
FAILED tests/test_vacancy_models.py::TestVacancyEdgeCases::test_vacancy_empty_fields - AssertionError: assert 'd3cfbb75-61b...-940a58db4af9' == ''
FAILED tests/test_vacancy_models.py::TestVacancyEdgeCases::test_vacancy_none_salary - TypeError: Vacancy.__init__() got multiple values for argument 'salary'
FAILED tests/test_vacancy_models.py::TestVacancyDataTransformation::test_vacancy_dict_roundtrip - AttributeError: 'Salary' object has no attribute 'from_amount'
FAILED tests/test_vacancy_models.py::TestVacancyDataTransformation::test_vacancy_dict_with_complex_data - AttributeError: 'Salary' object has no attribute 'from_amount'
============== 22 failed, 319 passed, 3 warnings in 3.03s ===============
~/workspace$ 