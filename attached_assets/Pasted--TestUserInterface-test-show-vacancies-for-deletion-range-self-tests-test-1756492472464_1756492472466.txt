__________ TestUserInterface.test_show_vacancies_for_deletion_range __________

self = <tests.test_console_interface.TestUserInterface object at 0x7f437775ce10>
mock_print = <MagicMock name='print' id='139927744035920'>
mock_input = <MagicMock name='input' id='139927744102032'>
user_interface = <src.ui_interfaces.console_interface.UserInterface object at 0x7f43777b2490>

    @patch('builtins.input', side_effect=['1-3', 'y'])
    @patch('builtins.print')
    def test_show_vacancies_for_deletion_range(self, mock_print, mock_input, user_interface):
        """Тест удаления диапазона вакансий"""
        vacancies = []
        for i in range(1, 5):
            vacancy = Mock()
            vacancy.vacancy_id = str(i)
            vacancy.title = f'Test {i}'
            vacancy.employer = {'name': f'Company {i}'}
            vacancy.salary = f'{i * 10000} руб.'
            vacancy.url = f'http://test{i}.com'
            vacancies.append(vacancy)
    
>       user_interface._show_vacancies_for_deletion(vacancies, "test")

tests/test_console_interface.py:198: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/ui_interfaces/console_interface.py:431: in _show_vacancies_for_deletion
    choice = input("Ваш выбор: ").strip().lower()
             ^^^^^^^^^^^^^^^^^^^^
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1124: in __call__
    return self._mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1128: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <MagicMock name='input' id='139927744102032'>, args = ('Ваш выбор: ',)
kwargs = {}, effect = <list_iterator object at 0x7f4377773220>

    def _execute_mock_call(self, /, *args, **kwargs):
        # separate from _increment_mock_call so that awaited functions are
        # executed separately from their call, also AsyncMock overrides this method
    
        effect = self.side_effect
        if effect is not None:
            if _is_exception(effect):
                raise effect
            elif not _callable(effect):
>               result = next(effect)
                         ^^^^^^^^^^^^
E               StopIteration

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1185: StopIteration
___ TestUserInterface.test_display_vacancies_with_pagination_static_method ___

self = <tests.test_console_interface.TestUserInterface object at 0x7f437775e8d0>
mock_print = <MagicMock name='print' id='139927740037136'>
mock_input = <MagicMock name='input' id='139927740009552'>

    @patch('builtins.input', side_effect=['n', 'q'])
    @patch('builtins.print')
    def test_display_vacancies_with_pagination_static_method(self, mock_print, mock_input):
        """Тест статического метода отображения вакансий с пагинацией"""
        # Создаем моки вакансий с необходимыми атрибутами
        vacancies = []
        for i in range(1, 25):
            vacancy = Mock()
            vacancy.vacancy_id = str(i)
            vacancy.title = f'Test {i}'
            vacancy.employer = {'name': f'Company {i}'}
            vacancy.salary = f'{i * 10000} руб.'
            vacancy.url = f'http://test{i}.com'
            vacancy.description = f'Test description {i}'
            vacancies.append(vacancy)
    
        # В реальном коде это приватный метод _display_vacancies_with_pagination
>       UserInterface._display_vacancies_with_pagination(vacancies)

tests/test_console_interface.py:274: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/ui_interfaces/console_interface.py:381: in _display_vacancies_with_pagination
    quick_paginate(vacancies, formatter=format_vacancy, header="Вакансии", items_per_page=10)
src/utils/ui_navigation.py:246: in quick_paginate
    navigator.paginate_display(items, formatter, header, show_numbers, custom_actions)
src/utils/ui_navigation.py:47: in paginate_display
    self._display_page(items, current_page, total_pages, formatter, header, show_numbers)
src/utils/ui_navigation.py:92: in _display_page
    formatted_item = formatter(item, i)
                     ^^^^^^^^^^^^^^^^^^
src/ui_interfaces/console_interface.py:379: in format_vacancy
    return VacancyFormatter.format_vacancy_info(vacancy, number)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Mock id='139927740036816'>, vacancy = 1, number = None

    def format_vacancy_info(self, vacancy: Any, number: Optional[int] = None) -> str:
        """
        Форматирование информации о вакансии в строку
    
        Args:
            vacancy: Объект вакансии
            number: Порядковый номер (опционально)
    
        Returns:
            Отформатированная строка с информацией о вакансии
        """
        lines = self._build_vacancy_lines(vacancy, number)
>       return '\n'.join(lines)
               ^^^^^^^^^^^^^^^^
E       TypeError: can only join an iterable

src/utils/vacancy_formatter.py:26: TypeError
_______________ TestUserInterface.test_run_keyboard_interrupt ________________

self = <tests.test_console_interface.TestUserInterface object at 0x7f437775efd0>
mock_print = <MagicMock name='print' id='139927744118544'>
mock_input = <MagicMock name='input' id='139927743819408'>
user_interface = <src.ui_interfaces.console_interface.UserInterface object at 0x7f4376f1a890>

    @patch('builtins.input', side_effect=KeyboardInterrupt)
    @patch('builtins.print')
    def test_run_keyboard_interrupt(self, mock_print, mock_input, user_interface):
        """Тест обработки KeyboardInterrupt в основном цикле"""
        with patch.object(user_interface, '_show_menu', return_value='0'):
            user_interface.run()
    
        # Проверяем, что было выведено сообщение о завершении
        exit_messages = [str(call) for call in mock_print.call_args_list]
        exit_found = any("прервана" in msg.lower() for msg in exit_messages)
>       assert exit_found
E       assert False

tests/test_console_interface.py:288: AssertionError
========================== short test summary info ===========================
FAILED tests/test_console_interface.py::TestUserInterface::test_show_vacancies_for_deletion_range - StopIteration
FAILED tests/test_console_interface.py::TestUserInterface::test_display_vacancies_with_pagination_static_method - TypeError: can only join an iterable
FAILED tests/test_console_interface.py::TestUserInterface::test_run_keyboard_interrupt - assert False
======================== 3 failed, 33 passed in 0.47s ========================
~/workspace$ 