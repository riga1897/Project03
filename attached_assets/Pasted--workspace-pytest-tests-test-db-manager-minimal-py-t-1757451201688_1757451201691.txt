~/workspace$ pytest tests/test_db_manager_minimal.py
============================================ test session starts =============================================
platform linux -- Python 3.11.13, pytest-8.4.2, pluggy-1.6.0
rootdir: /home/runner/workspace
configfile: pyproject.toml
plugins: cov-6.2.1, mock-3.15.0
collected 26 items                                                                                           

tests/test_db_manager_minimal.py ...............F.FFFF.....                                            [100%]

================================================== FAILURES ==================================================
__________________________ TestDBManagerMinimal.test_is_target_company_match_simple __________________________

self = <tests.test_db_manager_minimal.TestDBManagerMinimal object at 0x7f85285f5610>

    def test_is_target_company_match_simple(self):
        """Простой тест _is_target_company_match"""
        db_manager = DBManager()
    
>       with patch('src.storage.db_manager.TARGET_COMPANIES', [{'name': 'TestCo'}]):

tests/test_db_manager_minimal.py:246: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1446: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f852752d290>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'src.storage.db_manager' from '/home/runner/workspace/src/storage/db_manager.py'> does not have the attribute 'TARGET_COMPANIES'

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1419: AttributeError
______________________ TestDBManagerSuccessfulPaths.test_get_all_vacancies_success_path ______________________

self = <tests.test_db_manager_minimal.TestDBManagerSuccessfulPaths object at 0x7f85285f6450>

    def test_get_all_vacancies_success_path(self):
        """Покрытие успешного пути get_all_vacancies"""
        db_manager = DBManager()
        mock_conn = MagicMock()
        mock_cursor = MagicMock()
        mock_conn.__enter__ = MagicMock(return_value=mock_conn)
        mock_conn.__exit__ = MagicMock(return_value=None)
        mock_conn.cursor.return_value.__enter__ = MagicMock(return_value=mock_cursor)
        mock_conn.cursor.return_value.__exit__ = MagicMock(return_value=None)
    
        mock_cursor.fetchall.return_value = [{'title': 'Test Job'}]
    
        with patch.object(db_manager, '_get_connection', return_value=mock_conn):
>           with patch.object(db_manager, '_ensure_tables_exist', return_value=True):

tests/test_db_manager_minimal.py:288: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1446: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f8527965290>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <src.storage.db_manager.DBManager object at 0x7f85279704d0> does not have the attribute '_ensure_tables_exist'

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1419: AttributeError
_______________________ TestDBManagerSuccessfulPaths.test_get_avg_salary_success_path ________________________

self = <tests.test_db_manager_minimal.TestDBManagerSuccessfulPaths object at 0x7f85285ee190>

    def test_get_avg_salary_success_path(self):
        """Покрытие успешного пути get_avg_salary"""
        db_manager = DBManager()
        mock_conn = MagicMock()
        mock_cursor = MagicMock()
        mock_conn.__enter__ = MagicMock(return_value=mock_conn)
        mock_conn.__exit__ = MagicMock(return_value=None)
        mock_conn.cursor.return_value.__enter__ = MagicMock(return_value=mock_cursor)
        mock_conn.cursor.return_value.__exit__ = MagicMock(return_value=None)
    
        mock_cursor.fetchone.return_value = (100000.0,)
    
        with patch.object(db_manager, '_get_connection', return_value=mock_conn):
>           with patch.object(db_manager, '_ensure_tables_exist', return_value=True):

tests/test_db_manager_minimal.py:305: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1446: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f852753f110>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <src.storage.db_manager.DBManager object at 0x7f85279decd0> does not have the attribute '_ensure_tables_exist'

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1419: AttributeError
______________ TestDBManagerSuccessfulPaths.test_get_vacancies_with_higher_salary_success_path _______________

self = <tests.test_db_manager_minimal.TestDBManagerSuccessfulPaths object at 0x7f85285d6f10>

    def test_get_vacancies_with_higher_salary_success_path(self):
        """Покрытие успешного пути get_vacancies_with_higher_salary"""
        db_manager = DBManager()
        mock_conn = MagicMock()
        mock_cursor = MagicMock()
        mock_conn.__enter__ = MagicMock(return_value=mock_conn)
        mock_conn.__exit__ = MagicMock(return_value=None)
        mock_conn.cursor.return_value.__enter__ = MagicMock(return_value=mock_cursor)
        mock_conn.cursor.return_value.__exit__ = MagicMock(return_value=None)
    
        mock_cursor.fetchall.return_value = [{'title': 'High Paid Job'}]
    
        with patch.object(db_manager, '_get_connection', return_value=mock_conn):
>           with patch.object(db_manager, '_ensure_tables_exist', return_value=True):

tests/test_db_manager_minimal.py:322: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1446: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f85279e9ad0>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <src.storage.db_manager.DBManager object at 0x7f85279f4210> does not have the attribute '_ensure_tables_exist'

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1419: AttributeError
_________________ TestDBManagerSuccessfulPaths.test_get_vacancies_with_keyword_success_path __________________

self = <tests.test_db_manager_minimal.TestDBManagerSuccessfulPaths object at 0x7f85285f5b90>

    def test_get_vacancies_with_keyword_success_path(self):
        """Покрытие успешного пути get_vacancies_with_keyword"""
        db_manager = DBManager()
        mock_conn = MagicMock()
        mock_cursor = MagicMock()
        mock_conn.__enter__ = MagicMock(return_value=mock_conn)
        mock_conn.__exit__ = MagicMock(return_value=None)
        mock_conn.cursor.return_value.__enter__ = MagicMock(return_value=mock_cursor)
        mock_conn.cursor.return_value.__exit__ = MagicMock(return_value=None)
    
        mock_cursor.fetchall.return_value = [{'title': 'Python Developer'}]
    
        with patch.object(db_manager, '_get_connection', return_value=mock_conn):
>           with patch.object(db_manager, '_ensure_tables_exist', return_value=True):

tests/test_db_manager_minimal.py:340: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1446: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f8527943b90>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <src.storage.db_manager.DBManager object at 0x7f8527939550> does not have the attribute '_ensure_tables_exist'

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1419: AttributeError
========================================== short test summary info ===========================================
FAILED tests/test_db_manager_minimal.py::TestDBManagerMinimal::test_is_target_company_match_simple - AttributeError: <module 'src.storage.db_manager' from '/home/runner/workspace/src/storage/db_manager.py'>...
FAILED tests/test_db_manager_minimal.py::TestDBManagerSuccessfulPaths::test_get_all_vacancies_success_path - AttributeError: <src.storage.db_manager.DBManager object at 0x7f85279704d0> does not have the attribute '...
FAILED tests/test_db_manager_minimal.py::TestDBManagerSuccessfulPaths::test_get_avg_salary_success_path - AttributeError: <src.storage.db_manager.DBManager object at 0x7f85279decd0> does not have the attribute '...
FAILED tests/test_db_manager_minimal.py::TestDBManagerSuccessfulPaths::test_get_vacancies_with_higher_salary_success_path - AttributeError: <src.storage.db_manager.DBManager object at 0x7f85279f4210> does not have the attribute '...
FAILED tests/test_db_manager_minimal.py::TestDBManagerSuccessfulPaths::test_get_vacancies_with_keyword_success_path - AttributeError: <src.storage.db_manager.DBManager object at 0x7f8527939550> does not have the attribute '...
======================================== 5 failed, 21 passed in 9.85s ========================================
~/workspace$ pytest tests/test_db_manager_minimal.py
=