~/workspace$ pytest tests/test_cached_api_coverage.py
=================================== test session starts ====================================
platform linux -- Python 3.11.13, pytest-8.4.2, pluggy-1.6.0
rootdir: /home/runner/workspace
configfile: pyproject.toml
plugins: cov-6.2.1, mock-3.15.0
collected 36 items                                                                         

tests/test_cached_api_coverage.py ......FFFFFFFFF.....................               [100%]

========================================= FAILURES =========================================
_____________ TestCachedAPIImplementation.test_connect_to_api_memory_cache_hit _____________

self = <tests.test_cached_api_coverage.TestCachedAPIImplementation object at 0x7fb06988b350>
mock_file_cache = <MagicMock name='FileCache' id='140395659558160'>
mock_path = <MagicMock name='Path' id='140395663098896'>
mock_logger = <MagicMock name='logger' id='140395658166224'>
mock_concrete_api = <class 'tests.test_cached_api_coverage.TestCachedAPIImplementation.mock_concrete_api.<locals>.ConcreteCachedAPI'>

    @patch('src.api_modules.cached_api.logger')
    @patch('src.api_modules.cached_api.Path')
    @patch('src.api_modules.cached_api.FileCache')
    def test_connect_to_api_memory_cache_hit(self, mock_file_cache, mock_path, mock_logger, mock_concrete_api):
        """Покрытие: __connect_to_api с попаданием в кэш памяти"""
        mock_path_instance = MagicMock()
        mock_path.return_value = mock_path_instance
    
        with patch('src.api_modules.base_api.BaseJobAPI.__init__', return_value=None):
            api = mock_concrete_api("/cache")
    
            # Мокируем кэш памяти, чтобы он вернул данные
            test_data = {"items": [{"id": "1", "title": "Test Job"}], "found": 1}
            with patch.object(api, '_cached_api_request', return_value=test_data):
>               result = api._CachedAPI__connect_to_api("http://test.url", {"q": "python"}, "hh")
                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E               AttributeError: 'ConcreteCachedAPI' object has no attribute '_CachedAPI__connect_to_api'

tests/test_cached_api_coverage.py:139: AttributeError
__________ TestCachedAPIImplementation.test_connect_to_api_memory_cache_exception __________

self = <tests.test_cached_api_coverage.TestCachedAPIImplementation object at 0x7fb06988b990>
mock_file_cache = <MagicMock name='FileCache' id='140395663239248'>
mock_path = <MagicMock name='Path' id='140395663244880'>
mock_logger = <MagicMock name='logger' id='140395659737936'>
mock_concrete_api = <class 'tests.test_cached_api_coverage.TestCachedAPIImplementation.mock_concrete_api.<locals>.ConcreteCachedAPI'>

    @patch('src.api_modules.cached_api.logger')
    @patch('src.api_modules.cached_api.Path')
    @patch('src.api_modules.cached_api.FileCache')
    def test_connect_to_api_memory_cache_exception(self, mock_file_cache, mock_path, mock_logger, mock_concrete_api):
        """Покрытие: __connect_to_api с ошибкой в кэше памяти"""
        mock_path_instance = MagicMock()
        mock_path.return_value = mock_path_instance
    
        mock_cache_instance = MagicMock()
        mock_cache_instance.load_response.return_value = {
            "data": {"items": [{"id": "2", "title": "Cached Job"}], "found": 1}
        }
        mock_file_cache.return_value = mock_cache_instance
    
        with patch('src.api_modules.base_api.BaseJobAPI.__init__', return_value=None):
            api = mock_concrete_api("/cache")
    
            # Мокируем исключение в кэше памяти
            with patch.object(api, '_cached_api_request', side_effect=Exception("Memory cache error")):
>               result = api._CachedAPI__connect_to_api("http://test.url", {"q": "java"}, "sj")
                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E               AttributeError: 'ConcreteCachedAPI' object has no attribute '_CachedAPI__connect_to_api'

tests/test_cached_api_coverage.py:163: AttributeError
______________ TestCachedAPIImplementation.test_connect_to_api_file_cache_hit ______________

self = <tests.test_cached_api_coverage.TestCachedAPIImplementation object at 0x7fb06988bfd0>
mock_file_cache = <MagicMock name='FileCache' id='140395658452304'>
mock_path = <MagicMock name='Path' id='140395659906384'>
mock_logger = <MagicMock name='logger' id='140395659909392'>
mock_concrete_api = <class 'tests.test_cached_api_coverage.TestCachedAPIImplementation.mock_concrete_api.<locals>.ConcreteCachedAPI'>

    @patch('src.api_modules.cached_api.logger')
    @patch('src.api_modules.cached_api.Path')
    @patch('src.api_modules.cached_api.FileCache')
    def test_connect_to_api_file_cache_hit(self, mock_file_cache, mock_path, mock_logger, mock_concrete_api):
        """Покрытие: __connect_to_api с попаданием в файловый кэш"""
        mock_path_instance = MagicMock()
        mock_path.return_value = mock_path_instance
    
        cached_data = {"items": [{"id": "cached", "title": "From File Cache"}], "found": 1}
        mock_cache_instance = MagicMock()
        mock_cache_instance.load_response.return_value = {"data": cached_data}
        mock_file_cache.return_value = mock_cache_instance
    
        with patch('src.api_modules.base_api.BaseJobAPI.__init__', return_value=None):
            api = mock_concrete_api("/cache")
    
            # Мокируем что кэш памяти пустой
            with patch.object(api, '_cached_api_request', return_value=None):
>               result = api._CachedAPI__connect_to_api("http://api.url", {"text": "developer"}, "hh")
                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E               AttributeError: 'ConcreteCachedAPI' object has no attribute '_CachedAPI__connect_to_api'

tests/test_cached_api_coverage.py:191: AttributeError
___________ TestCachedAPIImplementation.test_connect_to_api_real_request_success ___________

self = <tests.test_cached_api_coverage.TestCachedAPIImplementation object at 0x7fb069894650>
mock_file_cache = <MagicMock name='FileCache' id='140395658634256'>
mock_path = <MagicMock name='Path' id='140395658639952'>
mock_logger = <MagicMock name='logger' id='140395658577808'>
mock_concrete_api = <class 'tests.test_cached_api_coverage.TestCachedAPIImplementation.mock_concrete_api.<locals>.ConcreteCachedAPI'>

    @patch('src.api_modules.cached_api.logger')
    @patch('src.api_modules.cached_api.Path')
    @patch('src.api_modules.cached_api.FileCache')
    def test_connect_to_api_real_request_success(self, mock_file_cache, mock_path, mock_logger, mock_concrete_api):
        """Покрытие: __connect_to_api с реальным запросом к API (успешно)"""
        mock_path_instance = MagicMock()
        mock_path.return_value = mock_path_instance
    
        mock_cache_instance = MagicMock()
        mock_cache_instance.load_response.return_value = None  # Файлового кэша нет
        mock_file_cache.return_value = mock_cache_instance
    
        with patch('src.api_modules.base_api.BaseJobAPI.__init__', return_value=None):
            api = mock_concrete_api("/cache")
    
            # Мокируем connector
            mock_connector = MagicMock()
            api_data = {"items": [{"id": "api1", "name": "API Job", "employer": {"name": "Company"}}], "found": 1}
            mock_connector._APIConnector__connect.return_value = api_data
            api.connector = mock_connector
    
            # Мокируем что кэши пустые
            with patch.object(api, '_cached_api_request', return_value=None):
                with patch.object(api, '_is_complete_response', return_value=True):
                    with patch.object(api, '_validate_response_structure', return_value=True):
>                       result = api._CachedAPI__connect_to_api("http://api.url", {"q": "python"}, "hh")
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E                       AttributeError: 'ConcreteCachedAPI' object has no attribute '_CachedAPI__connect_to_api'

tests/test_cached_api_coverage.py:222: AttributeError
___________ TestCachedAPIImplementation.test_connect_to_api_incomplete_response ____________

self = <tests.test_cached_api_coverage.TestCachedAPIImplementation object at 0x7fb069894c90>
mock_file_cache = <MagicMock name='FileCache' id='140395657096976'>
mock_path = <MagicMock name='Path' id='140395656318992'>
mock_logger = <MagicMock name='logger' id='140395656325840'>
mock_concrete_api = <class 'tests.test_cached_api_coverage.TestCachedAPIImplementation.mock_concrete_api.<locals>.ConcreteCachedAPI'>

    @patch('src.api_modules.cached_api.logger')
    @patch('src.api_modules.cached_api.Path')
    @patch('src.api_modules.cached_api.FileCache')
    def test_connect_to_api_incomplete_response(self, mock_file_cache, mock_path, mock_logger, mock_concrete_api):
        """Покрытие: __connect_to_api с неполным ответом API"""
        mock_path_instance = MagicMock()
        mock_path.return_value = mock_path_instance
    
        mock_cache_instance = MagicMock()
        mock_cache_instance.load_response.return_value = None
        mock_file_cache.return_value = mock_cache_instance
    
        with patch('src.api_modules.base_api.BaseJobAPI.__init__', return_value=None):
            api = mock_concrete_api("/cache")
    
            mock_connector = MagicMock()
            incomplete_data = {"items": [], "found": 0}  # Неполные данные
            mock_connector._APIConnector__connect.return_value = incomplete_data
            api.connector = mock_connector
    
            with patch.object(api, '_cached_api_request', return_value=None):
                with patch.object(api, '_is_complete_response', return_value=False):  # Ответ неполный
>                   result = api._CachedAPI__connect_to_api("http://api.url", {"text": "java"}, "sj")
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E                   AttributeError: 'ConcreteCachedAPI' object has no attribute '_CachedAPI__connect_to_api'

tests/test_cached_api_coverage.py:252: AttributeError
____________ TestCachedAPIImplementation.test_connect_to_api_invalid_structure _____________

self = <tests.test_cached_api_coverage.TestCachedAPIImplementation object at 0x7fb0698952d0>
mock_file_cache = <MagicMock name='FileCache' id='140395657321360'>
mock_path = <MagicMock name='Path' id='140395657326992'>
mock_logger = <MagicMock name='logger' id='140395657365072'>
mock_concrete_api = <class 'tests.test_cached_api_coverage.TestCachedAPIImplementation.mock_concrete_api.<locals>.ConcreteCachedAPI'>

    @patch('src.api_modules.cached_api.logger')
    @patch('src.api_modules.cached_api.Path')
    @patch('src.api_modules.cached_api.FileCache')
    def test_connect_to_api_invalid_structure(self, mock_file_cache, mock_path, mock_logger, mock_concrete_api):
        """Покрытие: __connect_to_api с невалидной структурой данных"""
        mock_path_instance = MagicMock()
        mock_path.return_value = mock_path_instance
    
        mock_cache_instance = MagicMock()
        mock_cache_instance.load_response.return_value = None
        mock_file_cache.return_value = mock_cache_instance
    
        with patch('src.api_modules.base_api.BaseJobAPI.__init__', return_value=None):
            api = mock_concrete_api("/cache")
    
            mock_connector = MagicMock()
            invalid_data = {"items": [{"id": "1"}], "found": 1}  # Невалидная структура вакансии
            mock_connector._APIConnector__connect.return_value = invalid_data
            api.connector = mock_connector
    
            with patch.object(api, '_cached_api_request', return_value=None):
                with patch.object(api, '_is_complete_response', return_value=True):
                    with patch.object(api, '_validate_response_structure', return_value=False):  # Структура невалидна
>                       result = api._CachedAPI__connect_to_api("http://api.url", {"q": "designer"}, "hh")
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E                       AttributeError: 'ConcreteCachedAPI' object has no attribute '_CachedAPI__connect_to_api'

tests/test_cached_api_coverage.py:282: AttributeError
_____________ TestCachedAPIImplementation.test_connect_to_api_connection_error _____________

self = <tests.test_cached_api_coverage.TestCachedAPIImplementation object at 0x7fb069895910>
mock_file_cache = <MagicMock name='FileCache' id='140395656885520'>
mock_path = <MagicMock name='Path' id='140395657579344'>
mock_logger = <MagicMock name='logger' id='140395657584656'>
mock_concrete_api = <class 'tests.test_cached_api_coverage.TestCachedAPIImplementation.mock_concrete_api.<locals>.ConcreteCachedAPI'>

    @patch('src.api_modules.cached_api.logger')
    @patch('src.api_modules.cached_api.Path')
    @patch('src.api_modules.cached_api.FileCache')
    def test_connect_to_api_connection_error(self, mock_file_cache, mock_path, mock_logger, mock_concrete_api):
        """Покрытие: __connect_to_api с ошибкой соединения"""
        mock_path_instance = MagicMock()
        mock_path.return_value = mock_path_instance
    
        mock_cache_instance = MagicMock()
        mock_cache_instance.load_response.return_value = None
        mock_file_cache.return_value = mock_cache_instance
    
        with patch('src.api_modules.base_api.BaseJobAPI.__init__', return_value=None):
            api = mock_concrete_api("/cache")
    
            mock_connector = MagicMock()
            mock_connector._APIConnector__connect.side_effect = ConnectionError("Network error")
            api.connector = mock_connector
    
            with patch.object(api, '_cached_api_request', return_value=None):
>               result = api._CachedAPI__connect_to_api("http://api.url", {"q": "manager"}, "sj")
                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E               AttributeError: 'ConcreteCachedAPI' object has no attribute '_CachedAPI__connect_to_api'

tests/test_cached_api_coverage.py:308: AttributeError
______________ TestCachedAPIImplementation.test_connect_to_api_timeout_error _______________

self = <tests.test_cached_api_coverage.TestCachedAPIImplementation object at 0x7fb069895f50>
mock_file_cache = <MagicMock name='FileCache' id='140395657038096'>
mock_path = <MagicMock name='Path' id='140395657046800'>
mock_logger = <MagicMock name='logger' id='140395657048848'>
mock_concrete_api = <class 'tests.test_cached_api_coverage.TestCachedAPIImplementation.mock_concrete_api.<locals>.ConcreteCachedAPI'>

    @patch('src.api_modules.cached_api.logger')
    @patch('src.api_modules.cached_api.Path')
    @patch('src.api_modules.cached_api.FileCache')
    def test_connect_to_api_timeout_error(self, mock_file_cache, mock_path, mock_logger, mock_concrete_api):
        """Покрытие: __connect_to_api с ошибкой таймаута"""
        mock_path_instance = MagicMock()
        mock_path.return_value = mock_path_instance
    
        mock_cache_instance = MagicMock()
        mock_cache_instance.load_response.return_value = None
        mock_file_cache.return_value = mock_cache_instance
    
        with patch('src.api_modules.base_api.BaseJobAPI.__init__', return_value=None):
            api = mock_concrete_api("/cache")
    
            mock_connector = MagicMock()
            mock_connector._APIConnector__connect.side_effect = TimeoutError("Request timeout")
            api.connector = mock_connector
    
            with patch.object(api, '_cached_api_request', return_value=None):
>               result = api._CachedAPI__connect_to_api("http://slow-api.url", {"q": "analyst"}, "hh")
                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E               AttributeError: 'ConcreteCachedAPI' object has no attribute '_CachedAPI__connect_to_api'

tests/test_cached_api_coverage.py:335: AttributeError
______________ TestCachedAPIImplementation.test_connect_to_api_unknown_error _______________

self = <tests.test_cached_api_coverage.TestCachedAPIImplementation object at 0x7fb069896590>
mock_file_cache = <MagicMock name='FileCache' id='140395657652304'>
mock_path = <MagicMock name='Path' id='140395657658000'>
mock_logger = <MagicMock name='logger' id='140395657925520'>
mock_concrete_api = <class 'tests.test_cached_api_coverage.TestCachedAPIImplementation.mock_concrete_api.<locals>.ConcreteCachedAPI'>

    @patch('src.api_modules.cached_api.logger')
    @patch('src.api_modules.cached_api.Path')
    @patch('src.api_modules.cached_api.FileCache')
    def test_connect_to_api_unknown_error(self, mock_file_cache, mock_path, mock_logger, mock_concrete_api):
        """Покрытие: __connect_to_api с неизвестной ошибкой"""
        mock_path_instance = MagicMock()
        mock_path.return_value = mock_path_instance
    
        mock_cache_instance = MagicMock()
        mock_cache_instance.load_response.return_value = None
        mock_file_cache.return_value = mock_cache_instance
    
        with patch('src.api_modules.base_api.BaseJobAPI.__init__', return_value=None):
            api = mock_concrete_api("/cache")
    
            mock_connector = MagicMock()
            mock_connector._APIConnector__connect.side_effect = ValueError("Unexpected error")
            api.connector = mock_connector
    
            with patch.object(api, '_cached_api_request', return_value=None):
>               result = api._CachedAPI__connect_to_api("http://api.url", {"q": "tester"}, "sj")
                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E               AttributeError: 'ConcreteCachedAPI' object has no attribute '_CachedAPI__connect_to_api'

tests/test_cached_api_coverage.py:361: AttributeError
================================= short test summary info ==================================
FAILED tests/test_cached_api_coverage.py::TestCachedAPIImplementation::test_connect_to_api_memory_cache_hit - AttributeError: 'ConcreteCachedAPI' object has no attribute '_CachedAPI__connect_to_api'
FAILED tests/test_cached_api_coverage.py::TestCachedAPIImplementation::test_connect_to_api_memory_cache_exception - AttributeError: 'ConcreteCachedAPI' object has no attribute '_CachedAPI__connect_to_api'
FAILED tests/test_cached_api_coverage.py::TestCachedAPIImplementation::test_connect_to_api_file_cache_hit - AttributeError: 'ConcreteCachedAPI' object has no attribute '_CachedAPI__connect_to_api'
FAILED tests/test_cached_api_coverage.py::TestCachedAPIImplementation::test_connect_to_api_real_request_success - AttributeError: 'ConcreteCachedAPI' object has no attribute '_CachedAPI__connect_to_api'
FAILED tests/test_cached_api_coverage.py::TestCachedAPIImplementation::test_connect_to_api_incomplete_response - AttributeError: 'ConcreteCachedAPI' object has no attribute '_CachedAPI__connect_to_api'
FAILED tests/test_cached_api_coverage.py::TestCachedAPIImplementation::test_connect_to_api_invalid_structure - AttributeError: 'ConcreteCachedAPI' object has no attribute '_CachedAPI__connect_to_api'
FAILED tests/test_cached_api_coverage.py::TestCachedAPIImplementation::test_connect_to_api_connection_error - AttributeError: 'ConcreteCachedAPI' object has no attribute '_CachedAPI__connect_to_api'
FAILED tests/test_cached_api_coverage.py::TestCachedAPIImplementation::test_connect_to_api_timeout_error - AttributeError: 'ConcreteCachedAPI' object has no attribute '_CachedAPI__connect_to_api'
FAILED tests/test_cached_api_coverage.py::TestCachedAPIImplementation::test_connect_to_api_unknown_error - AttributeError: 'ConcreteCachedAPI' object has no attribute '_CachedAPI__connect_to_api'
=============================== 9 failed, 27 passed in 0.58s ===============================
~/workspace$ 