~/workspace$ pytest tests/test_20_database_connection_coverage.py
================================== test session starts ==================================
platform linux -- Python 3.11.13, pytest-8.4.2, pluggy-1.6.0
rootdir: /home/runner/workspace
configfile: pyproject.toml
plugins: cov-6.2.1, mock-3.15.0
collected 25 items                                                                      

tests/test_20_database_connection_coverage.py ...F.F...FFF...F..FF.FFFF           [100%]

======================================= FAILURES ========================================
___________ TestDatabaseConnection.test_get_connection_creates_new_when_none ____________

self = <tests.test_20_database_connection_coverage.TestDatabaseConnection object at 0x7f4cea139010>
mock_is_available = <MagicMock name='is_available' id='139968313723920'>
mock_real_dict_cursor = <MagicMock name='get_real_dict_cursor' id='139968313729232'>
mock_get_psycopg2 = <MagicMock name='get_psycopg2' id='139968313734480'>

    @patch('src.storage.db_psycopg2_compat.get_psycopg2')
    @patch('src.storage.db_psycopg2_compat.get_real_dict_cursor')
    @patch('src.storage.db_psycopg2_compat.is_available', return_value=True)
    def test_get_connection_creates_new_when_none(self, mock_is_available, mock_real_dict_cursor, mock_get_psycopg2):
        """Покрытие создания нового подключения когда его нет"""
        # Настройка mock
        mock_connection = Mock()
        mock_psycopg2 = Mock()
        mock_psycopg2.connect.return_value = mock_connection
        mock_get_psycopg2.return_value = mock_psycopg2
        mock_real_dict_cursor.return_value = Mock()
    
        db_conn = DatabaseConnection()
        result = db_conn.get_connection()
    
>       assert result == mock_connection
E       AssertionError: assert <connection object at 0x7f4ce996c180; dsn: 'user=neondb_owner password=xxx dbname=neondb host=ep-summer-bird-aegjrs6n.c-2.us-east-2.aws.neon.tech port=5432 sslmode=require', closed: 0> == <Mock name='get_psycopg2().connect()' id='139968313723344'>

tests/test_20_database_connection_coverage.py:118: AssertionError
________ TestDatabaseConnection.test_get_connection_recreates_invalid_connection ________

self = <tests.test_20_database_connection_coverage.TestDatabaseConnection object at 0x7f4cea139c90>
mock_is_available = <MagicMock name='is_available' id='139968313353104'>
mock_real_dict_cursor = <MagicMock name='get_real_dict_cursor' id='139968333494864'>
mock_get_psycopg2 = <MagicMock name='get_psycopg2' id='139968313325008'>

    @patch('src.storage.db_psycopg2_compat.get_psycopg2')
    @patch('src.storage.db_psycopg2_compat.get_real_dict_cursor')
    @patch('src.storage.db_psycopg2_compat.is_available', return_value=True)
    def test_get_connection_recreates_invalid_connection(self, mock_is_available, mock_real_dict_cursor, mock_get_psycopg2):
        """Покрытие пересоздания неисправного подключения"""
        # Настройка модуля совместимости
        mock_psycopg2 = Mock()
        mock_psycopg2.OperationalError = MockOperationalError
        mock_psycopg2.InterfaceError = MockInterfaceError
        mock_get_psycopg2.return_value = mock_psycopg2
        mock_real_dict_cursor.return_value = Mock()
    
        # Неисправное существующее подключение
        bad_connection = Mock()
        bad_cursor = Mock()
        bad_cursor.execute.side_effect = MockOperationalError("Connection lost")
        bad_cursor_context = Mock()
        bad_cursor_context.__enter__ = Mock(return_value=bad_cursor)
        bad_cursor_context.__exit__ = Mock(return_value=None)
        bad_connection.cursor.return_value = bad_cursor_context
    
        # Новое рабочее подключение
        new_connection = Mock()
        mock_psycopg2.connect.return_value = new_connection
    
        db_conn = DatabaseConnection()
        db_conn._connection = bad_connection
    
        result = db_conn.get_connection()
    
>       assert result == new_connection
E       AssertionError: assert <connection object at 0x7f4ce996c400; dsn: 'user=neondb_owner password=xxx dbname=neondb host=ep-summer-bird-aegjrs6n.c-2.us-east-2.aws.neon.tech port=5432 sslmode=require', closed: 0> == <Mock name='get_psycopg2().connect()' id='139968321290384'>

tests/test_20_database_connection_coverage.py:179: AssertionError
_______________ TestDatabaseConnection.test_create_new_connection_success _______________

self = <tests.test_20_database_connection_coverage.TestDatabaseConnection object at 0x7f4cea13b650>
mock_logger = <MagicMock name='logger' id='139968309005328'>
mock_is_available = <MagicMock name='is_available' id='139968309005648'>
mock_real_dict_cursor = <MagicMock name='get_real_dict_cursor' id='139968309010832'>
mock_get_psycopg2 = <MagicMock name='get_psycopg2' id='139968308988112'>

    @patch('src.storage.db_psycopg2_compat.get_psycopg2')
    @patch('src.storage.db_psycopg2_compat.get_real_dict_cursor')
    @patch('src.storage.db_psycopg2_compat.is_available', return_value=True)
    @patch('src.storage.components.database_connection.logger')
    def test_create_new_connection_success(self, mock_logger, mock_is_available, mock_real_dict_cursor, mock_get_psycopg2):
        """Покрытие успешного создания подключения"""
        # Настройка модуля совместимости
        mock_psycopg2 = Mock()
        mock_psycopg2.Error = MockError
        mock_get_psycopg2.return_value = mock_psycopg2
        mock_real_dict_cursor.return_value = Mock()
    
        mock_connection = Mock()
        mock_psycopg2.connect.return_value = mock_connection
    
        db_conn = DatabaseConnection()
        db_conn._create_new_connection()
    
>       assert db_conn._connection == mock_connection
E       AssertionError: assert <connection object at 0x7f4ce996c7c0; dsn: 'user=neondb_owner password=xxx dbname=neondb host=ep-summer-bird-aegjrs6n.c-2.us-east-2.aws.neon.tech port=5432 sslmode=require', closed: 0> == <Mock name='get_psycopg2().connect()' id='139968308993232'>
E        +  where <connection object at 0x7f4ce996c7c0; dsn: 'user=neondb_owner password=xxx dbname=neondb host=ep-summer-bird-aegjrs6n.c-2.us-east-2.aws.neon.tech port=5432 sslmode=require', closed: 0> = <src.storage.components.database_connection.DatabaseConnection object at 0x7f4ce9565d90>._connection

tests/test_20_database_connection_coverage.py:252: AssertionError
_______________ TestDatabaseConnection.test_create_new_connection_failure _______________

args = (<tests.test_20_database_connection_coverage.TestDatabaseConnection object at 0x7f4cea13bc90>,)
keywargs = {}

    @wraps(func)
    def patched(*args, **keywargs):
>       with self.decoration_helper(patched,
                                    args,
                                    keywargs) as (newargs, newkeywargs):

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1375: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
           ^^^^^^^^^^^^^^
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1357: in decoration_helper
    arg = exit_stack.enter_context(patching)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/contextlib.py:517: in enter_context
    result = _enter(cm)
             ^^^^^^^^^^
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1446: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <unittest.mock._patch object at 0x7f4cea128690>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'src.storage.components.database_connection' from '/home/runner/workspace/src/storage/components/database_connection.py'> does not have the attribute 'PsycopgError'

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1419: AttributeError
_________ TestDatabaseConnection.test_create_new_connection_with_cursor_factory _________

args = (<tests.test_20_database_connection_coverage.TestDatabaseConnection object at 0x7f4cea140310>,)
keywargs = {}

    @wraps(func)
    def patched(*args, **keywargs):
>       with self.decoration_helper(patched,
                                    args,
                                    keywargs) as (newargs, newkeywargs):

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1375: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
           ^^^^^^^^^^^^^^
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1357: in decoration_helper
    arg = exit_stack.enter_context(patching)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/contextlib.py:517: in enter_context
    result = _enter(cm)
             ^^^^^^^^^^
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1446: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <unittest.mock._patch object at 0x7f4cea128f10>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'src.storage.components.database_connection' from '/home/runner/workspace/src/storage/components/database_connection.py'> does not have the attribute 'RealDictCursor'

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1419: AttributeError
_________________ TestDatabaseConnection.test_context_manager_protocol __________________

args = (<tests.test_20_database_connection_coverage.TestDatabaseConnection object at 0x7f4cea140b50>,)
keywargs = {}
newargs = (<tests.test_20_database_connection_coverage.TestDatabaseConnection object at 0x7f4cea140b50>, <MagicMock name='is_ava...'>, <MagicMock name='get_real_dict_cursor' id='139968308805328'>, <MagicMock name='get_psycopg2' id='139968308798096'>)
newkeywargs = {}

    @wraps(func)
    def patched(*args, **keywargs):
        with self.decoration_helper(patched,
                                    args,
                                    keywargs) as (newargs, newkeywargs):
>           return func(*newargs, **newkeywargs)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E           TypeError: TestDatabaseConnection.test_context_manager_protocol() takes 2 positional arguments but 4 were given

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1378: TypeError
______________ TestDatabaseConnectionEdgeCases.test_psycopg2_not_available ______________

args = (<tests.test_20_database_connection_coverage.TestDatabaseConnectionEdgeCases object at 0x7f4cea141990>,)
keywargs = {}

    @wraps(func)
    def patched(*args, **keywargs):
>       with self.decoration_helper(patched,
                                    args,
                                    keywargs) as (newargs, newkeywargs):

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1375: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
           ^^^^^^^^^^^^^^
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1357: in decoration_helper
    arg = exit_stack.enter_context(patching)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/contextlib.py:517: in enter_context
    result = _enter(cm)
             ^^^^^^^^^^
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1446: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <unittest.mock._patch object at 0x7f4cea129910>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'src.storage.components.database_connection' from '/home/runner/workspace/src/storage/components/database_connection.py'> does not have the attribute 'psycopg2'

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1419: AttributeError
__________ TestDatabaseConnectionEdgeCases.test_real_dict_cursor_not_available __________

args = (<tests.test_20_database_connection_coverage.TestDatabaseConnectionEdgeCases object at 0x7f4cea141f50>,)
keywargs = {}

    @wraps(func)
    def patched(*args, **keywargs):
>       with self.decoration_helper(patched,
                                    args,
                                    keywargs) as (newargs, newkeywargs):

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1375: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
           ^^^^^^^^^^^^^^
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1357: in decoration_helper
    arg = exit_stack.enter_context(patching)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/contextlib.py:517: in enter_context
    result = _enter(cm)
             ^^^^^^^^^^
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1446: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <unittest.mock._patch object at 0x7f4cea129ad0>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'src.storage.components.database_connection' from '/home/runner/workspace/src/storage/components/database_connection.py'> does not have the attribute 'RealDictCursor'

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1419: AttributeError
_____________ TestDatabaseConnectionEdgeCases.test_empty_password_handling ______________

self = <tests.test_20_database_connection_coverage.TestDatabaseConnectionEdgeCases object at 0x7f4cea142b10>

    @patch.dict('os.environ', {'PGPASSWORD': ''})
    def test_empty_password_handling(self):
        """Покрытие обработки пустого пароля"""
        db_conn = DatabaseConnection()
    
>       assert db_conn._connection_params["password"] == ""
E       AssertionError: assert 'npg_MPnXu1JWZ5jB' == ''
E         
E         + npg_MPnXu1JWZ5jB

tests/test_20_database_connection_coverage.py:411: AssertionError
__________ TestDatabaseConnectionEdgeCases.test_multiple_get_connection_calls ___________

args = (<tests.test_20_database_connection_coverage.TestDatabaseConnectionEdgeCases object at 0x7f4cea1430d0>,)
keywargs = {}
newargs = (<tests.test_20_database_connection_coverage.TestDatabaseConnectionEdgeCases object at 0x7f4cea1430d0>, <MagicMock nam...'>, <MagicMock name='get_real_dict_cursor' id='139968304665424'>, <MagicMock name='get_psycopg2' id='139968304666384'>)
newkeywargs = {}

    @wraps(func)
    def patched(*args, **keywargs):
        with self.decoration_helper(patched,
                                    args,
                                    keywargs) as (newargs, newkeywargs):
>           return func(*newargs, **newkeywargs)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E           TypeError: TestDatabaseConnectionEdgeCases.test_multiple_get_connection_calls() takes 2 positional arguments but 4 were given

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1378: TypeError
_________________ TestDatabaseConnectionIntegration.test_full_lifecycle _________________

args = (<tests.test_20_database_connection_coverage.TestDatabaseConnectionIntegration object at 0x7f4cea143890>,)
keywargs = {}
newargs = (<tests.test_20_database_connection_coverage.TestDatabaseConnectionIntegration object at 0x7f4cea143890>, <MagicMock n...'>, <MagicMock name='get_real_dict_cursor' id='139968341497296'>, <MagicMock name='get_psycopg2' id='139968341422672'>)
newkeywargs = {}

    @wraps(func)
    def patched(*args, **keywargs):
        with self.decoration_helper(patched,
                                    args,
                                    keywargs) as (newargs, newkeywargs):
>           return func(*newargs, **newkeywargs)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E           TypeError: TestDatabaseConnectionIntegration.test_full_lifecycle() takes 2 positional arguments but 4 were given

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1378: TypeError
__________ TestDatabaseConnectionIntegration.test_connection_recovery_scenario __________

args = (<tests.test_20_database_connection_coverage.TestDatabaseConnectionIntegration object at 0x7f4cea143e50>,)
keywargs = {}
newargs = (<tests.test_20_database_connection_coverage.TestDatabaseConnectionIntegration object at 0x7f4cea143e50>, <MagicMock n...'>, <MagicMock name='get_real_dict_cursor' id='139968305244560'>, <MagicMock name='get_psycopg2' id='139968305234512'>)
newkeywargs = {}

    @wraps(func)
    def patched(*args, **keywargs):
        with self.decoration_helper(patched,
                                    args,
                                    keywargs) as (newargs, newkeywargs):
>           return func(*newargs, **newkeywargs)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E           TypeError: TestDatabaseConnectionIntegration.test_connection_recovery_scenario() takes 2 positional arguments but 4 were given

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1378: TypeError
================================ short test summary info ================================
FAILED tests/test_20_database_connection_coverage.py::TestDatabaseConnection::test_get_connection_creates_new_when_none - AssertionError: assert <connection object at 0x7f4ce996c180; dsn: 'user=neondb_owner...
FAILED tests/test_20_database_connection_coverage.py::TestDatabaseConnection::test_get_connection_recreates_invalid_connection - AssertionError: assert <connection object at 0x7f4ce996c400; dsn: 'user=neondb_owner...
FAILED tests/test_20_database_connection_coverage.py::TestDatabaseConnection::test_create_new_connection_success - AssertionError: assert <connection object at 0x7f4ce996c7c0; dsn: 'user=neondb_owner...
FAILED tests/test_20_database_connection_coverage.py::TestDatabaseConnection::test_create_new_connection_failure - AttributeError: <module 'src.storage.components.database_connection' from '/home/run...
FAILED tests/test_20_database_connection_coverage.py::TestDatabaseConnection::test_create_new_connection_with_cursor_factory - AttributeError: <module 'src.storage.components.database_connection' from '/home/run...
FAILED tests/test_20_database_connection_coverage.py::TestDatabaseConnection::test_context_manager_protocol - TypeError: TestDatabaseConnection.test_context_manager_protocol() takes 2 positional...
FAILED tests/test_20_database_connection_coverage.py::TestDatabaseConnectionEdgeCases::test_psycopg2_not_available - AttributeError: <module 'src.storage.components.database_connection' from '/home/run...
FAILED tests/test_20_database_connection_coverage.py::TestDatabaseConnectionEdgeCases::test_real_dict_cursor_not_available - AttributeError: <module 'src.storage.components.database_connection' from '/home/run...
FAILED tests/test_20_database_connection_coverage.py::TestDatabaseConnectionEdgeCases::test_empty_password_handling - AssertionError: assert 'npg_MPnXu1JWZ5jB' == ''
FAILED tests/test_20_database_connection_coverage.py::TestDatabaseConnectionEdgeCases::test_multiple_get_connection_calls - TypeError: TestDatabaseConnectionEdgeCases.test_multiple_get_connection_calls() take...
FAILED tests/test_20_database_connection_coverage.py::TestDatabaseConnectionIntegration::test_full_lifecycle - TypeError: TestDatabaseConnectionIntegration.test_full_lifecycle() takes 2 positiona...
FAILED tests/test_20_database_connection_coverage.py::TestDatabaseConnectionIntegration::test_connection_recovery_scenario - TypeError: TestDatabaseConnectionIntegration.test_connection_recovery_scenario() tak...
============================= 12 failed, 13 passed in 2.12s =============================
~/workspace$ 