~/workspace$ pytest -v
================================ test session starts ================================
platform linux -- Python 3.11.13, pytest-8.4.1, pluggy-1.6.0 -- /nix/store/2lcqw1d28vklbk8ikiwad28iq2smwndv-python-wrapped-0.1.0/bin/python3
cachedir: .pytest_cache
rootdir: /home/runner/workspace
configfile: pyproject.toml
plugins: cov-6.2.1, mock-3.14.1
collected 131 items                                                                 

tests/test_api_modules.py::TestHeadHunterAPI::test_api_initialization PASSED  [  0%]
tests/test_api_modules.py::TestHeadHunterAPI::test_validate_vacancy_valid PASSED [  1%]
tests/test_api_modules.py::TestHeadHunterAPI::test_validate_vacancy_invalid PASSED [  2%]
tests/test_api_modules.py::TestHeadHunterAPI::test_get_vacancies_page_success PASSED [  3%]
tests/test_api_modules.py::TestHeadHunterAPI::test_get_vacancies_empty_response PASSED [  3%]
tests/test_api_modules.py::TestHeadHunterAPI::test_empty_response_structure PASSED [  4%]
tests/test_api_modules.py::TestSuperJobAPI::test_api_initialization_with_custom_key PASSED [  5%]
tests/test_api_modules.py::TestSuperJobAPI::test_validate_vacancy_valid PASSED [  6%]
tests/test_api_modules.py::TestSuperJobAPI::test_validate_vacancy_invalid PASSED [  6%]
tests/test_api_modules.py::TestSuperJobAPI::test_get_vacancies_page_with_source PASSED [  7%]
tests/test_api_modules.py::TestSuperJobAPI::test_empty_response_structure PASSED [  8%]
tests/test_cache.py::TestFileCache::test_cache_initialization PASSED          [  9%]
tests/test_cache.py::TestFileCache::test_generate_params_hash PASSED          [  9%]
tests/test_cache.py::TestFileCache::test_generate_params_hash_different_params PASSED [ 10%]
tests/test_cache.py::TestFileCache::test_save_and_load_response PASSED        [ 11%]
tests/test_cache.py::TestFileCache::test_load_response_nonexistent PASSED     [ 12%]
tests/test_cache.py::TestFileCache::test_clear_cache_source PASSED            [ 12%]
tests/test_cache.py::TestFileCache::test_clear_cache_all PASSED               [ 13%]
tests/test_cache.py::TestFileCache::test_cache_with_complex_params PASSED     [ 14%]
tests/test_cache.py::TestFileCache::test_cache_file_corrupted PASSED          [ 15%]
tests/test_cache.py::TestFileCache::test_cache_unicode_support PASSED         [ 16%]
tests/test_config.py::TestAppConfig::test_default_initialization PASSED       [ 16%]
tests/test_config.py::TestAppConfig::test_get_storage_type PASSED             [ 17%]
tests/test_config.py::TestAppConfig::test_set_storage_type_valid PASSED       [ 18%]
tests/test_config.py::TestAppConfig::test_set_storage_type_invalid PASSED     [ 19%]
tests/test_config.py::TestAppConfig::test_get_db_config PASSED                [ 19%]
tests/test_config.py::TestAppConfig::test_db_config_from_env PASSED           [ 20%]
tests/test_config.py::TestDatabaseConfig::test_default_initialization SKIPPED [ 21%]
tests/test_config.py::TestDatabaseConfig::test_initialization_with_env PASSED [ 22%]
tests/test_config.py::TestDatabaseConfig::test_get_connection_params PASSED   [ 22%]
tests/test_config.py::TestDatabaseConfig::test_get_dsn PASSED                 [ 23%]
tests/test_config.py::TestDatabaseConfig::test_test_connection_success PASSED [ 24%]
tests/test_config.py::TestDatabaseConfig::test_test_connection_failure PASSED [ 25%]
tests/test_config.py::TestHHAPIConfig::test_initialization SKIPPED (HHAPI...) [ 25%]
tests/test_config.py::TestHHAPIConfig::test_get_headers PASSED                [ 26%]
tests/test_config.py::TestHHAPIConfig::test_get_vacancies_url PASSED          [ 27%]
tests/test_config.py::TestHHAPIConfig::test_get_employers_url PASSED          [ 28%]
tests/test_config.py::TestHHAPIConfig::test_get_areas_url PASSED              [ 29%]
tests/test_config.py::TestHHAPIConfig::test_get_request_params PASSED         [ 29%]
tests/test_config.py::TestSJAPIConfig::test_initialization PASSED             [ 30%]
tests/test_config.py::TestSJAPIConfig::test_initialization_with_secret_key PASSED [ 31%]
tests/test_config.py::TestSJAPIConfig::test_get_headers_without_key PASSED    [ 32%]
tests/test_config.py::TestSJAPIConfig::test_get_headers_with_key PASSED       [ 32%]
tests/test_config.py::TestSJAPIConfig::test_get_vacancies_url PASSED          [ 33%]
tests/test_config.py::TestSJAPIConfig::test_set_secret_key PASSED             [ 34%]
tests/test_config.py::TestSJAPIConfig::test_is_configured PASSED              [ 35%]
tests/test_config.py::TestSJAPIConfig::test_get_request_params PASSED         [ 35%]
tests/test_db_manager.py::TestDBManager::test_get_connection_success PASSED   [ 36%]
tests/test_db_manager.py::TestDBManager::test_get_connection_failure PASSED   [ 37%]
tests/test_db_manager.py::TestDBManager::test_create_tables_success PASSED    [ 38%]
tests/test_db_manager.py::TestDBManager::test_populate_companies_table PASSED [ 38%]
tests/test_db_manager.py::TestDBManager::test_get_companies_and_vacancies_count PASSED [ 39%]
tests/test_db_manager.py::TestDBManager::test_get_all_vacancies PASSED        [ 40%]
tests/test_db_manager.py::TestDBManager::test_get_avg_salary PASSED           [ 41%]
tests/test_db_manager.py::TestDBManager::test_get_avg_salary_no_data PASSED   [ 41%]
tests/test_db_manager.py::TestDBManager::test_get_vacancies_with_higher_salary PASSED [ 42%]
tests/test_db_manager.py::TestDBManager::test_get_vacancies_with_keyword PASSED [ 43%]
tests/test_db_manager.py::TestDBManager::test_get_vacancies_with_keyword_empty PASSED [ 44%]
tests/test_db_manager.py::TestDBManager::test_get_database_stats PASSED       [ 45%]
tests/test_db_manager.py::TestDBManager::test_check_connection_success PASSED [ 45%]
tests/test_db_manager.py::TestDBManager::test_check_connection_failure PASSED [ 46%]
tests/test_db_manager.py::TestDBManager::test_is_target_company_match PASSED  [ 47%]
tests/test_integration.py::TestAPIIntegration::test_hh_api_search_integration FAILED [ 48%]
tests/test_integration.py::TestAPIIntegration::test_sj_api_search_integration FAILED [ 48%]
tests/test_integration.py::TestStorageIntegration::test_postgres_saver_integration PASSED [ 49%]
tests/test_integration.py::TestCacheIntegration::test_cached_api_integration FAILED [ 50%]
tests/test_integration.py::TestFullWorkflowIntegration::test_search_and_save_workflow FAILED [ 51%]
tests/test_integration.py::TestFullWorkflowIntegration::test_error_handling_integration PASSED [ 51%]
tests/test_integration.py::TestFullWorkflowIntegration::test_data_consistency_integration FAILED [ 52%]
tests/test_storage.py::TestPostgresSaver::test_postgres_saver_initialization PASSED [ 53%]
tests/test_storage.py::TestPostgresSaver::test_get_connection PASSED          [ 54%]
tests/test_storage.py::TestPostgresSaver::test_add_vacancy_with_sample_data PASSED [ 54%]
tests/test_storage.py::TestPostgresSaver::test_ensure_database_exists PASSED  [ 55%]
tests/test_storage.py::TestPostgresSaver::test_format_vacancy_data PASSED     [ 56%]
tests/test_storage.py::TestStorageFactory::test_get_storage_postgres PASSED   [ 57%]
tests/test_storage.py::TestStorageFactory::test_get_storage_invalid_type PASSED [ 58%]
tests/test_storage.py::TestStorageFactory::test_get_storage_missing_config PASSED [ 58%]
tests/test_ui_helpers.py::TestUIHelpers::test_get_positive_integer_valid PASSED [ 59%]
tests/test_ui_helpers.py::TestUIHelpers::test_get_positive_integer_invalid_then_valid PASSED [ 60%]
tests/test_ui_helpers.py::TestUIHelpers::test_get_positive_integer_non_numeric PASSED [ 61%]
tests/test_ui_helpers.py::TestUIHelpers::test_filter_vacancies_by_keyword_in_title PASSED [ 61%]
tests/test_ui_helpers.py::TestUIHelpers::test_filter_vacancies_by_keyword_in_description PASSED [ 62%]
tests/test_ui_helpers.py::TestUIHelpers::test_filter_vacancies_by_keyword_case_insensitive PASSED [ 63%]
tests/test_ui_helpers.py::TestUIHelpers::test_filter_vacancies_by_keyword_no_matches PASSED [ 64%]
tests/test_ui_helpers.py::TestUIHelpers::test_parse_salary_range_both_values PASSED [ 64%]
tests/test_ui_helpers.py::TestUIHelpers::test_parse_salary_range_only_min PASSED [ 65%]
tests/test_ui_helpers.py::TestUIHelpers::test_parse_salary_range_only_max PASSED [ 66%]
tests/test_ui_helpers.py::TestUIHelpers::test_parse_salary_range_single_value PASSED [ 67%]
tests/test_ui_helpers.py::TestUIHelpers::test_parse_salary_range_invalid_format PASSED [ 67%]
tests/test_ui_helpers.py::TestUIHelpers::test_parse_salary_range_empty_string PASSED [ 68%]
tests/test_ui_helpers.py::TestUIHelpers::test_parse_salary_range_with_spaces PASSED [ 69%]
tests/test_vacancy_formatter.py::TestVacancyFormatter::test_format_vacancy_brief PASSED [ 70%]
tests/test_vacancy_formatter.py::TestVacancyFormatter::test_format_vacancy_brief_no_number PASSED [ 70%]
tests/test_vacancy_formatter.py::TestVacancyFormatter::test_format_vacancy_brief_no_salary PASSED [ 71%]
tests/test_vacancy_formatter.py::TestVacancyFormatter::test_format_vacancy_brief_partial_salary PASSED [ 72%]
tests/test_vacancy_formatter.py::TestVacancyFormatter::test_format_vacancy_info_with_dict PASSED [ 73%]
tests/test_vacancy_formatter.py::TestVacancyFormatter::test_format_vacancy_info_with_object PASSED [ 74%]
tests/test_vacancy_formatter.py::TestVacancyFormatter::test_display_vacancy_info PASSED [ 74%]
tests/test_vacancy_formatter.py::TestVacancyFormatter::test_format_salary_dict PASSED [ 75%]
tests/test_vacancy_formatter.py::TestVacancyFormatter::test_format_company_info PASSED [ 76%]
tests/test_vacancy_formatter.py::TestVacancyFormatter::test_extract_company_name PASSED [ 77%]
tests/test_vacancy_formatter.py::TestVacancyFormatter::test_extract_salary_info PASSED [ 77%]
tests/test_vacancy_formatter.py::TestVacancyFormatter::test_extract_description PASSED [ 78%]
tests/test_vacancy_formatter.py::TestVacancyFormatter::test_extract_responsibilities PASSED [ 79%]
tests/test_vacancy_formatter.py::TestVacancyFormatter::test_extract_requirements PASSED [ 80%]
tests/test_vacancy_formatter.py::TestVacancyFormatter::test_extract_conditions PASSED [ 80%]
tests/test_vacancy_formatter.py::TestVacancyFormatter::test_build_vacancy_lines PASSED [ 81%]
tests/test_vacancy_formatter.py::TestVacancyFormatter::test_build_vacancy_lines_with_api_url PASSED [ 82%]
tests/test_vacancy_formatter.py::TestVacancyFormatter::test_format_salary_with_object PASSED [ 83%]
tests/test_vacancy_formatter.py::TestVacancyFormatter::test_format_salary_with_dict PASSED [ 83%]
tests/test_vacancy_formatter.py::TestVacancyFormatter::test_format_salary_none PASSED [ 84%]
tests/test_vacancy_models.py::TestVacancy::test_vacancy_creation_with_dict_salary PASSED [ 85%]
tests/test_vacancy_models.py::TestVacancy::test_vacancy_creation_without_salary PASSED [ 86%]
tests/test_vacancy_models.py::TestVacancy::test_vacancy_string_representation PASSED [ 87%]
tests/test_vacancy_models.py::TestVacancy::test_vacancy_comparison PASSED     [ 87%]
tests/test_vacancy_models.py::TestVacancy::test_vacancy_equality PASSED       [ 88%]
tests/test_vacancy_models.py::TestSalary::test_salary_creation_from_dict PASSED [ 89%]
tests/test_vacancy_models.py::TestSalary::test_salary_string_representation PASSED [ 90%]
tests/test_vacancy_models.py::TestSalary::test_salary_only_from PASSED        [ 90%]
tests/test_vacancy_models.py::TestSalary::test_salary_only_to PASSED          [ 91%]
tests/test_vacancy_models.py::TestSalary::test_salary_comparison PASSED       [ 92%]
tests/test_vacancy_models.py::TestSalary::test_source_detection_from_dict PASSED [ 93%]
tests/test_vacancy_models.py::TestSalary::test_source_fallback_detection PASSED [ 93%]
tests/test_vacancy_operations.py::TestVacancyOperations::test_search_vacancies_advanced PASSED [ 94%]
tests/test_vacancy_operations.py::TestVacancyOperations::test_get_vacancies_with_salary PASSED [ 95%]
tests/test_vacancy_operations.py::TestVacancyOperations::test_sort_vacancies_by_salary PASSED [ 96%]
tests/test_vacancy_operations.py::TestVacancyOperations::test_filter_vacancies_by_multiple_keywords PASSED [ 96%]
tests/test_vacancy_operations.py::TestVacancyOperations::test_search_vacancies_advanced_and_operator PASSED [ 97%]
tests/test_vacancy_operations.py::TestVacancyOperations::test_search_vacancies_advanced_or_operator PASSED [ 98%]
tests/test_vacancy_operations.py::TestVacancyOperations::test_search_vacancies_advanced_simple_query PASSED [ 99%]
tests/test_vacancy_operations.py::TestVacancyOperations::test_vacancy_operations_basic_functionality PASSED [100%]

===================================== FAILURES ======================================
_________________ TestAPIIntegration.test_hh_api_search_integration _________________

self = <tests.test_integration.TestAPIIntegration object at 0x7fa17a30ef90>
mock_get = <MagicMock name='get' id='140331525845648'>
mock_hh_response = {'found': 1, 'items': [{'area': {'id': '1', 'name': 'Москва'}, 'employer': {'id': '1', 'name': 'Test Company'}, 'emplo...ная занятость'}, 'experience': {'id': 'between1And3', 'name': 'От 1 года до 3 лет'}, ...}], 'page': 0, 'pages': 1, ...}

    @patch('requests.get')
    def test_hh_api_search_integration(self, mock_get, mock_hh_response):
        """Интеграционный тест поиска через HH API"""
        # Настраиваем мок ответ
        mock_response = Mock()
        mock_response.status_code = 200
        mock_response.json.return_value = mock_hh_response
        mock_get.return_value = mock_response
    
        # Создаем API и выполняем поиск
        api = HeadHunterAPI()
    
        # Патчим валидацию для успешного прохождения тестов
        with patch.object(api, '_validate_vacancy', return_value=True):
            raw_vacancies = api.get_vacancies("python", area="1")
    
        # Проверяем результат (API возвращает сырые данные)
        assert len(raw_vacancies) == 1
        assert isinstance(raw_vacancies[0], dict)
        assert raw_vacancies[0]["name"] == "Python Developer"
        assert raw_vacancies[0]["id"] == "12345"
    
        # Тестируем преобразование в объекты Vacancy
>       from src.vacancies.parsers.hh_parser import HHVacancyParser
E       ImportError: cannot import name 'HHVacancyParser' from 'src.vacancies.parsers.hh_parser' (/home/runner/workspace/src/vacancies/parsers/hh_parser.py)

tests/test_integration.py:101: ImportError
------------------------------- Captured stderr call --------------------------------
Fetching pages: 100%|██████████| 1/1 [00:00<00:00, 2356.35page/s, vacancies=1]
_________________ TestAPIIntegration.test_sj_api_search_integration _________________

self = <tests.test_integration.TestAPIIntegration object at 0x7fa17a30f510>
mock_get = <MagicMock name='get' id='140331542557264'>

    @patch('requests.get')
    def test_sj_api_search_integration(self, mock_get):
        """Интеграционный тест поиска через SJ API"""
        mock_sj_response = {
            "objects": [
                {
                    "id": 67890,
                    "profession": "Java Developer",
                    "link": "https://www.superjob.ru/vakansii/java-developer-67890.html",
                    "payment_from": 120000,
                    "payment_to": 180000,
                    "currency": "rub",
                    "candidat": "Знание Java",
                    "work": "Разработка систем",
                    "firm_name": "SJ Test Company",
                    "town": {
                        "id": 4,
                        "title": "Москва"
                    },
                    "experience": {
                        "id": 2,
                        "title": "От 1 года до 3 лет"
                    },
                    "type_of_work": {
                        "id": 1,
                        "title": "Полная занятость"
                    },
                    "place_of_work": {
                        "id": 1,
                        "title": "Полный день"
                    },
                    "date_pub_timestamp": 1705312800
                }
            ],
            "total": 1
        }
    
        # Настраиваем мок ответ
        mock_response = Mock()
        mock_response.status_code = 200
        mock_response.json.return_value = mock_sj_response
        mock_get.return_value = mock_response
    
        # Создаем API с тестовым ключом
        api = SuperJobAPI()
        api.config.secret_key = "test_key"
    
        # Патчим валидацию для успешного прохождения тестов
        with patch.object(api, '_validate_vacancy', return_value=True):
            raw_vacancies = api.get_vacancies("java", town=4)
    
        # Проверяем результат (API возвращает сырые данные)
        assert len(raw_vacancies) == 1
        assert isinstance(raw_vacancies[0], dict)
        assert raw_vacancies[0]["profession"] == "Java Developer"
    
        # Тестируем преобразование в объекты Vacancy
>       from src.vacancies.parsers.sj_parser import SJVacancyParser
E       ImportError: cannot import name 'SJVacancyParser' from 'src.vacancies.parsers.sj_parser' (/home/runner/workspace/src/vacancies/parsers/sj_parser.py)

tests/test_integration.py:167: ImportError
------------------------------- Captured stderr call --------------------------------
Fetching pages: 100%|██████████| 1/1 [00:00<00:00, 3097.71page/s, vacancies=1]
_________________ TestCacheIntegration.test_cached_api_integration __________________

self = <tests.test_integration.TestCacheIntegration object at 0x7fa17a7d0a10>
mock_get = <MagicMock name='get' id='140331521209872'>
temp_cache_dir = '/tmp/tmpg08zhhlp'

    @patch('requests.get')
    def test_cached_api_integration(self, mock_get, temp_cache_dir):
        """Интеграционный тест кэширования API"""
        # Мок ответ от API
        mock_response = Mock()
        mock_response.status_code = 200
        mock_response.json.return_value = {
            "items": [],
            "found": 0
        }
        mock_get.return_value = mock_response
    
        # Создаем файловый кэш
        file_cache = FileCache(temp_cache_dir)
    
        # Тестируем кэш напрямую
        cache_key = "test_key"
        test_data = {"test": "data"}
    
        # Сохраняем в кэш с правильным форматом ключа
>       full_cache_key = file_cache.generate_params_hash({"key": cache_key})
                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: 'FileCache' object has no attribute 'generate_params_hash'

tests/test_integration.py:286: AttributeError
_____________ TestFullWorkflowIntegration.test_search_and_save_workflow _____________

self = <tests.test_integration.TestFullWorkflowIntegration object at 0x7fa17a7d1090>
mock_connect = <MagicMock name='connect' id='140331517183952'>
mock_get = <MagicMock name='get' id='140331517184144'>
mock_input = <MagicMock name='input' id='140331517188944'>

    @patch('builtins.input')
    @patch('requests.get')
    @patch('src.storage.postgres_saver.psycopg2.connect')
    def test_search_and_save_workflow(self, mock_connect, mock_get, mock_input):
        """Тест полного цикла: поиск -> сохранение -> отображение"""
        # Настраиваем мок ввода пользователя
        mock_input.side_effect = [
            '1',  # Выбор HH
            'python',  # Поисковый запрос
            '1',  # Регион
            'y',  # Сохранить результаты
            '0'   # Выход
        ]
    
        # Настраиваем мок API ответ
        mock_response = Mock()
        mock_response.status_code = 200
        mock_response.json.return_value = {
            "items": [
                {
                    "id": "12345",
                    "name": "Python Developer",
                    "url": "https://api.hh.ru/vacancies/12345",
                    "salary": None,
                    "snippet": {
                        "requirement": "Python",
                        "responsibility": "Разработка"
                    },
                    "employer": {"name": "Test Company"},
                    "area": {"name": "Москва"},
                    "experience": {"name": "От 1 года"},
                    "employment": {"name": "Полная занятость"},
                    "schedule": {"name": "Полный день"},
                    "published_at": "2024-01-15T10:00:00+0300"
                }
            ],
            "found": 1
        }
        mock_get.return_value = mock_response
    
        # Настраиваем мок БД
        mock_connection = Mock()
        mock_cursor = Mock()
        mock_connect.return_value = mock_connection
        mock_connection.cursor.return_value = mock_cursor
        mock_connection.encoding = 'UTF8'
        mock_cursor.fetchone.side_effect = [
            [True],  # DB exists
            None,    # Column checks
            None,
            []       # Company mapping
        ]
        mock_cursor.fetchall.return_value = []
    
        # Патчим методы создания БД и таблиц
>       with patch.object(PostgresSaver, '_ensure_database_exists'), \
                          ^^^^^^^^^^^^^
             patch.object(PostgresSaver, '_ensure_tables_exist'), \
             patch.object(PostgresSaver, '_ensure_companies_table_exists'), \
             patch('builtins.print') as mock_print:
E            UnboundLocalError: cannot access local variable 'PostgresSaver' where it is not associated with a value

tests/test_integration.py:354: UnboundLocalError
___________ TestFullWorkflowIntegration.test_data_consistency_integration ___________

self = <tests.test_integration.TestFullWorkflowIntegration object at 0x7fa17a7d22d0>
mock_get = <MagicMock name='get' id='140331520807184'>

    @patch('requests.get')
    def test_data_consistency_integration(self, mock_get):
        """Тест консистентности данных между компонентами"""
        # Мок ответ от HH API
        mock_response = Mock()
        mock_response.status_code = 200
        mock_response.json.return_value = {
            "items": [
                {
                    "id": "test_123",
                    "name": "Test Position",
                    "url": "https://api.hh.ru/vacancies/test_123",
                    "salary": {
                        "from": 50000,
                        "to": 100000,
                        "currency": "RUR"
                    },
                    "snippet": {
                        "requirement": "Test requirement",
                        "responsibility": "Test responsibility"
                    },
                    "employer": {"name": "Test Employer"},
                    "area": {"name": "Test City"},
                    "experience": {"name": "Test Experience"},
                    "employment": {"name": "Test Employment"},
                    "schedule": {"name": "Test Schedule"},
                    "published_at": "2024-01-15T10:00:00+0300"
                }
            ],
            "found": 1
        }
        mock_get.return_value = mock_response
    
        # Получаем данные через API
        api = HeadHunterAPI()
    
        # Патчим валидацию для успешного прохождения тестов
        with patch.object(api, '_validate_vacancy', return_value=True):
            raw_vacancies = api.get_vacancies("test")
    
        # Проверяем, что данные корректно получены (сырые данные)
        assert len(raw_vacancies) == 1
        raw_vacancy = raw_vacancies[0]
    
        assert raw_vacancy["id"] == "test_123"
        assert raw_vacancy["name"] == "Test Position"
        assert raw_vacancy["salary"]["from"] == 50000
        assert raw_vacancy["salary"]["to"] == 100000
        assert raw_vacancy["salary"]["currency"] == "RUR"
    
        # Тестируем преобразование в объекты Vacancy
>       from src.vacancies.parsers.hh_parser import HHVacancyParser
E       ImportError: cannot import name 'HHVacancyParser' from 'src.vacancies.parsers.hh_parser' (/home/runner/workspace/src/vacancies/parsers/hh_parser.py)

tests/test_integration.py:445: ImportError
------------------------------- Captured stderr call --------------------------------
Fetching pages: 100%|██████████| 1/1 [00:00<00:00, 3172.70page/s, vacancies=1]
============================== short test summary info ==============================
FAILED tests/test_integration.py::TestAPIIntegration::test_hh_api_search_integration - ImportError: cannot import name 'HHVacancyParser' from 'src.vacancies.parsers.hh...
FAILED tests/test_integration.py::TestAPIIntegration::test_sj_api_search_integration - ImportError: cannot import name 'SJVacancyParser' from 'src.vacancies.parsers.sj...
FAILED tests/test_integration.py::TestCacheIntegration::test_cached_api_integration - AttributeError: 'FileCache' object has no attribute 'generate_params_hash'
FAILED tests/test_integration.py::TestFullWorkflowIntegration::test_search_and_save_workflow - UnboundLocalError: cannot access local variable 'PostgresSaver' where it is not ...
FAILED tests/test_integration.py::TestFullWorkflowIntegration::test_data_consistency_integration - ImportError: cannot import name 'HHVacancyParser' from 'src.vacancies.parsers.hh...
===================== 5 failed, 124 passed, 2 skipped in 0.45s ======================
~/workspace$ 