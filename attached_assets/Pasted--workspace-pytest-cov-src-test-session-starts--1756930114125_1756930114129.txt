~/workspace$ pytest --cov=src
========================= test session starts ==========================
platform linux -- Python 3.11.13, pytest-8.4.1, pluggy-1.6.0
rootdir: /home/runner/workspace
configfile: pyproject.toml
plugins: cov-6.2.1, mock-3.14.1
collected 1036 items                                                   

tests/test_abstract.py ........                                  [  0%]
tests/test_abstract_db_manager.py ....                           [  1%]
tests/test_api_config.py ....                                    [  1%]
tests/test_api_modules.py .............................          [  4%]
tests/test_api_modules_comprehensive.py .........                [  5%]
tests/test_api_modules_consolidated.py ....                      [  5%]
tests/test_app_config.py .........                               [  6%]
tests/test_base_api.py ...............                           [  7%]
tests/test_base_formatter.py ..........                          [  8%]
tests/test_base_parser.py ......                                 [  9%]
tests/test_cache.py ......................                       [ 11%]
tests/test_cached_api.py ....                                    [ 11%]
tests/test_comprehensive_fixed.py ..........F................... [ 14%]
........                                                         [ 15%]
tests/test_config_consolidated.py .....                          [ 16%]
tests/test_config_modules_consolidated.py ....F......            [ 17%]
tests/test_console_interface.py ......                           [ 17%]
tests/test_core_functionality_consolidated.py .....              [ 18%]
tests/test_core_modules_comprehensive.py FF..F...                [ 19%]
tests/test_data_normalizers_comprehensive.py ................... [ 20%]
.........                                                        [ 21%]
tests/test_database_connection.py ........                       [ 22%]
tests/test_db_config.py .....                                    [ 22%]
tests/test_db_manager.py .................                       [ 24%]
tests/test_decorators.py .......                                 [ 25%]
tests/test_env_loader.py ................                        [ 26%]
tests/test_get_api.py .........................                  [ 29%]
tests/test_hh_api.py ......................F........F...         [ 32%]
tests/test_hh_api_config.py .....                                [ 33%]
tests/test_hh_parser.py ........                                 [ 33%]
tests/test_integration.py .............                          [ 35%]
tests/test_main.py FFF.F.                                        [ 35%]
tests/test_main_application_interface.py F..........             [ 36%]
tests/test_main_consolidated.py .........                        [ 37%]
tests/test_menu_manager.py ..........                            [ 38%]
tests/test_missing_components.py .........                       [ 39%]
tests/test_paginator.py ......                                   [ 40%]
tests/test_salary_fixed.py ...........                           [ 41%]
tests/test_salary_utils.py ......................                [ 43%]
tests/test_search_utils.py ............................          [ 45%]
tests/test_services_consolidated.py ....                         [ 46%]
tests/test_services_storage_consolidated.py .........F           [ 47%]
tests/test_sj_api.py ..............                              [ 48%]
tests/test_sj_api_config.py .....                                [ 49%]
tests/test_sj_parser.py ........                                 [ 49%]
tests/test_source_manager.py .................                   [ 51%]
tests/test_source_selector.py .................                  [ 53%]
tests/test_storage_factory.py ........                           [ 53%]
tests/test_storage_modules_consolidated.py .F..                  [ 54%]
tests/test_target_companies.py .....                             [ 54%]
tests/test_typed_data_processor.py F.............                [ 56%]
tests/test_ui_components_extended.py ..................          [ 57%]
tests/test_ui_config.py .......................                  [ 60%]
tests/test_ui_helpers_comprehensive.py ......................... [ 62%]
..............                                                   [ 63%]
tests/test_ui_helpers_extended.py .............................. [ 66%]
..........                                                       [ 67%]
tests/test_ui_modules_consolidated.py .....                      [ 68%]
tests/test_ui_navigation.py ......................               [ 70%]
tests/test_ui_navigation_complete.py ........................... [ 72%]
F....F.......F.......                                            [ 75%]
tests/test_ui_navigation_comprehensive.py E....E.F               [ 75%]
tests/test_ui_navigation_extended.py ......FFF.................. [ 78%]
........                                                         [ 79%]
tests/test_unified_api.py ................FFFFF.                 [ 81%]
tests/test_user_interface.py .FFFFFFFFFFF                        [ 82%]
tests/test_user_interface_consolidated.py F.F                    [ 82%]
tests/test_utils_consolidated.py .....                           [ 83%]
tests/test_utils_ui_consolidated.py ......                       [ 83%]
tests/test_vacancy_display_handler.py F..................        [ 85%]
tests/test_vacancy_formatter.py ........                         [ 86%]
tests/test_vacancy_models_complete.py F.F.                       [ 86%]
tests/test_vacancy_models_consolidated.py .FF.                   [ 87%]
tests/test_vacancy_operations.py ......                          [ 87%]
tests/test_vacancy_operations_coordinator.py ................... [ 89%]
........                                                         [ 90%]
tests/test_vacancy_operations_coordinator_complete.py F......... [ 91%]
............                                                     [ 92%]
tests/test_vacancy_processing_coordinator.py .............       [ 93%]
tests/test_vacancy_repository.py F........                       [ 94%]
tests/test_vacancy_search_handler_complete.py F................. [ 96%]
.....                                                            [ 96%]
tests/test_vacancy_stats.py ............                         [ 97%]
tests/test_vacancy_stats_fixed.py .........                      [ 98%]
tests/test_vacancy_validator.py ............                     [100%]

================================ ERRORS ================================
__________ ERROR at setup of TestUINavigation.test_formatter ___________
file /home/runner/workspace/tests/test_ui_navigation_comprehensive.py, line 24
      def test_formatter(self, item, number=None):
E       fixture 'item' not found
>       available fixtures: _xunit_setup_method_fixture_TestUINavigation, base_mock_api, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capteesys, class_mocker, cov, doctest_namespace, mock_connection, mock_db_config, mock_vacancy, mock_vacancy_data, mocker, module_mocker, monkeypatch, no_cover, package_mocker, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, safe_db_config, session_mocker, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/home/runner/workspace/tests/test_ui_navigation_comprehensive.py:24
__________ ERROR at setup of TestQuickPaginate.test_formatter __________
file /home/runner/workspace/tests/test_ui_navigation_comprehensive.py, line 66
      def test_formatter(self, item, number=None):
E       fixture 'item' not found
>       available fixtures: base_mock_api, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capteesys, class_mocker, cov, doctest_namespace, mock_connection, mock_db_config, mock_vacancy, mock_vacancy_data, mocker, module_mocker, monkeypatch, no_cover, package_mocker, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, safe_db_config, session_mocker, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/home/runner/workspace/tests/test_ui_navigation_comprehensive.py:66
=============================== FAILURES ===============================
___________ TestVacancyModelsFixed.test_vacancy_model_fixed ____________

self = <tests.test_comprehensive_fixed.TestVacancyModelsFixed object at 0x7f24c6a6e950>

    def test_vacancy_model_fixed(self):
        """Исправленное тестирование модели Vacancy"""
        try:
            from src.vacancies.models import Vacancy, Employer
    
            # Создаем работодателя с правильными аргументами
            employer = Employer("Test Company", "123")
    
            # Создаем вакансию с правильными аргументами
            vacancy = Vacancy("Python Developer", employer, "https://test.com")
    
            assert vacancy.title == "Python Developer"
>           assert vacancy.url == "https://test.com"
E           AssertionError: assert Employer(name='Test Company', id='123') == 'https://test.com'
E            +  where Employer(name='Test Company', id='123') = <src.vacancies.models.Vacancy object at 0x7f24c5409bf0>.url

/home/runner/workspace/tests/test_comprehensive_fixed.py:254: AssertionError
_____ TestConfigModulesConsolidated.test_target_companies_complete _____

self = <tests.test_config_modules_consolidated.TestConfigModulesConsolidated object at 0x7f24c6ac8210>
config_mocks = <tests.test_config_modules_consolidated.ConsolidatedConfigMocks object at 0x7f24c6522650>

    @patch('builtins.open', mock_open(read_data='[]'))
    def test_target_companies_complete(self, config_mocks):
        """Полное тестирование конфигурации целевых компаний"""
        try:
            from src.config.target_companies import TargetCompanies
    
            companies = TargetCompanies()
            # Проверяем реальные атрибуты
>           assert hasattr(companies, 'target_companies') or hasattr(companies, '_companies')
E           AssertionError: assert (False or False)
E            +  where False = hasattr(<src.config.target_companies.TargetCompanies object at 0x7f24c65223d0>, 'target_companies')
E            +  and   False = hasattr(<src.config.target_companies.TargetCompanies object at 0x7f24c65223d0>, '_companies')

tests/test_config_modules_consolidated.py:122: AssertionError
__________ TestUserInterfaceModule.test_main_function_success __________

args = (<tests.test_core_modules_comprehensive.TestUserInterfaceModule object at 0x7f24c6ae5550>,)
keywargs = {}

    @wraps(func)
    def patched(*args, **keywargs):
>       with self.decoration_helper(patched,
                                    args,
                                    keywargs) as (newargs, newkeywargs):

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1375: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
           ^^^^^^^^^^^^^^
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1357: in decoration_helper
    arg = exit_stack.enter_context(patching)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/contextlib.py:517: in enter_context
    result = _enter(cm)
             ^^^^^^^^^^
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1446: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f24c6a6d690>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'src.user_interface' from '/home/runner/workspace/tests/../src/user_interface.py'> does not have the attribute 'load_env_file'

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1419: AttributeError
____ TestUserInterfaceModule.test_main_function_db_connection_error ____

args = (<tests.test_core_modules_comprehensive.TestUserInterfaceModule object at 0x7f24c6ae60d0>,)
keywargs = {}

    @wraps(func)
    def patched(*args, **keywargs):
>       with self.decoration_helper(patched,
                                    args,
                                    keywargs) as (newargs, newkeywargs):

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1375: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
           ^^^^^^^^^^^^^^
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1357: in decoration_helper
    arg = exit_stack.enter_context(patching)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/contextlib.py:517: in enter_context
    result = _enter(cm)
             ^^^^^^^^^^
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1446: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f24c6ae7110>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'src.user_interface' from '/home/runner/workspace/tests/../src/user_interface.py'> does not have the attribute 'DBManager'

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1419: AttributeError
___________ TestVacancyModels.test_vacancy_validation_valid ____________

self = <tests.test_core_modules_comprehensive.TestVacancyModels object at 0x7f24c6ae15d0>

    def test_vacancy_validation_valid(self):
        """Тест валидации корректной вакансии"""
        employer = Employer("Test Company", "123")
        vacancy = Vacancy("Python Developer", employer, "https://test.com")
    
        # Проверяем базовые атрибуты
        assert vacancy.title == "Python Developer"
>       assert vacancy.url == "https://test.com"
E       AssertionError: assert Employer(name='Test Company', id='123') == 'https://test.com'
E        +  where Employer(name='Test Company', id='123') = <src.vacancies.models.Vacancy object at 0x7f24c5287d40>.url

tests/test_core_modules_comprehensive.py:83: AssertionError
______ TestHeadHunterAPI.test_get_vacancies_from_target_companies ______

self = <tests.test_hh_api.TestHeadHunterAPI object at 0x7f24c69f3f90>
mock_target_companies = <MagicMock name='TargetCompanies' id='139795904403600'>
mock_logger = <MagicMock name='logger' id='139795902148048'>
hh_api = <src.api_modules.hh_api.HeadHunterAPI object at 0x7f24c6497210>

    @patch('src.api_modules.hh_api.logger')
    @patch('src.api_modules.hh_api.TargetCompanies')
    def test_get_vacancies_from_target_companies(self, mock_target_companies, mock_logger, hh_api):
        """Тест получения вакансий от целевых компаний"""
        mock_target_companies.get_hh_ids.return_value = ["company1", "company2"]
    
        with patch.object(hh_api, 'get_vacancies_by_company', side_effect=[[{"id": "1"}], [{"id": "2"}]]):
>           with patch('src.api_modules.hh_api.VacancyStats') as mock_stats_class:

tests/test_hh_api.py:296: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1446: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f24c52a7e90>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'src.api_modules.hh_api' from '/home/runner/workspace/tests/../src/api_modules/hh_api.py'> does not have the attribute 'VacancyStats'

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1419: AttributeError
__________________ TestHeadHunterAPI.test_clear_cache __________________

self = <tests.test_hh_api.TestHeadHunterAPI object at 0x7f24c69fd490>
hh_api = <src.api_modules.hh_api.HeadHunterAPI object at 0x7f24c65377d0>

    def test_clear_cache(self, hh_api):
        """Тест очистки кэша"""
>       with patch.object(hh_api, 'super') as mock_super:

tests/test_hh_api.py:408: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1446: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f24c6535290>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <src.api_modules.hh_api.HeadHunterAPI object at 0x7f24c65377d0> does not have the attribute 'super'

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1419: AttributeError
_______________ TestMainModule.test_main_module_imports ________________

args = (<tests.test_main.TestMainModule object at 0x7f24c6a15d50>,)
keywargs = {}

    @wraps(func)
    def patched(*args, **keywargs):
>       with self.decoration_helper(patched,
                                    args,
                                    keywargs) as (newargs, newkeywargs):

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1375: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
           ^^^^^^^^^^^^^^
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1357: in decoration_helper
    arg = exit_stack.enter_context(patching)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/contextlib.py:517: in enter_context
    result = _enter(cm)
             ^^^^^^^^^^
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1446: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f24c69b49d0>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'main' from '/home/runner/workspace/tests/../main.py'> does not have the attribute 'load_env_file'

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1419: AttributeError
_____________ TestMainModule.test_main_module_env_loading ______________

args = (<tests.test_main.TestMainModule object at 0x7f24c6a15e90>,)
keywargs = {}

    @wraps(func)
    def patched(*args, **keywargs):
>       with self.decoration_helper(patched,
                                    args,
                                    keywargs) as (newargs, newkeywargs):

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1375: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
           ^^^^^^^^^^^^^^
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1357: in decoration_helper
    arg = exit_stack.enter_context(patching)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/contextlib.py:517: in enter_context
    result = _enter(cm)
             ^^^^^^^^^^
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1446: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f24c6a150d0>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'main' from '/home/runner/workspace/tests/../main.py'> does not have the attribute 'load_env_file'

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1419: AttributeError
________ TestMainModule.test_main_module_user_interface_import _________

self = <tests.test_main.TestMainModule object at 0x7f24c6a34950>

    def test_main_module_user_interface_import(self):
        """Тест импорта пользовательского интерфейса"""
        # Проверяем наличие импорта user_interface
>       assert hasattr(main, 'user_interface') or 'user_interface' in str(main)
E       assert (False or 'user_interface' in "<module 'main' from '/home/runner/workspace/tests/../main.py'>")
E        +  where False = hasattr(main, 'user_interface')
E        +  and   "<module 'main' from '/home/runner/workspace/tests/../main.py'>" = str(main)

tests/test_main.py:38: AssertionError
________ TestMainModule.test_main_module_conditional_execution _________

args = (<tests.test_main.TestMainModule object at 0x7f24c6a373d0>,)
keywargs = {}

    @wraps(func)
    def patched(*args, **keywargs):
>       with self.decoration_helper(patched,
                                    args,
                                    keywargs) as (newargs, newkeywargs):

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1375: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
           ^^^^^^^^^^^^^^
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1357: in decoration_helper
    arg = exit_stack.enter_context(patching)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/contextlib.py:517: in enter_context
    result = _enter(cm)
             ^^^^^^^^^^
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1446: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f24c6a17590>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'main' from '/home/runner/workspace/main.py'> does not have the attribute 'user_interface'

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1419: AttributeError
__ TestMainApplicationInterface.test_main_application_interface_init ___

self = <tests.test_main_application_interface.TestMainApplicationInterface object at 0x7f24c6a34810>

    def test_main_application_interface_init(self):
        """Тест инициализации главного интерфейса приложения"""
>       interface = MainApplicationInterface()
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^
E       TypeError: Can't instantiate abstract class MainApplicationInterface with abstract method run_application

tests/test_main_application_interface.py:49: TypeError
_______ TestAbstractStorageClasses.test_abstract_filter_service ________

self = <tests.test_services_storage_consolidated.TestAbstractStorageClasses object at 0x7f24c68e42d0>

    def test_abstract_filter_service(self):
        """Тестирование абстрактного сервиса фильтрации"""
        try:
            from src.storage.services.abstract_filter_service import AbstractFilterService
    
            # Создаем конкретную реализацию
            class ConcreteFilterService(AbstractFilterService):
                def apply_filter(self, data: List[Any], criteria: Dict) -> List[Any]:
                    return data
    
>           service = ConcreteFilterService()
                      ^^^^^^^^^^^^^^^^^^^^^^^
E           TypeError: Can't instantiate abstract class ConcreteFilterService with abstract methods filter_by_company_ids, get_target_company_stats

tests/test_services_storage_consolidated.py:413: TypeError
________ TestStorageModulesConsolidated.test_vacancy_repository ________

self = <tests.test_storage_modules_consolidated.TestStorageModulesConsolidated object at 0x7f24c6948ed0>
mock_connect = <MagicMock name='connect' id='139795904992080'>
storage_mocks = <tests.test_storage_modules_consolidated.ConsolidatedStorageMocks object at 0x7f24c53a1810>

    @patch('psycopg2.connect')
    def test_vacancy_repository(self, mock_connect, storage_mocks):
        """Тестирование репозитория вакансий"""
        mock_connect.return_value = storage_mocks.connection
    
        try:
            from src.storage.components.vacancy_repository import VacancyRepository
            from src.vacancies.models import Vacancy
    
>           repo = VacancyRepository()
                   ^^^^^^^^^^^^^^^^^^^
E           TypeError: VacancyRepository.__init__() missing 2 required positional arguments: 'db_connection' and 'validator'

tests/test_storage_modules_consolidated.py:80: TypeError
________ TestTypedDataProcessor.test_typed_data_processor_init _________

self = <tests.test_typed_data_processor.TestTypedDataProcessor object at 0x7f24c675e090>

    def test_typed_data_processor_init(self):
        """Тест инициализации процессора типизированных данных"""
>       processor = TypedDataProcessor()
                    ^^^^^^^^^^^^^^^^^^^^
E       TypeError: Can't instantiate abstract class TypedDataProcessor with abstract methods process_vacancies, validate_vacancy_data

tests/test_typed_data_processor.py:48: TypeError
_ TestUINavigationPaginateDisplay.test_paginate_display_invalid_input __

self = <tests.test_ui_navigation_complete.TestUINavigationPaginateDisplay object at 0x7f24c6668410>
mock_print = <MagicMock name='print' id='139795904877776'>
mock_input = <MagicMock name='input' id='139795903573008'>

    @patch('builtins.input', side_effect=['invalid', 'q'])
    @patch('builtins.print')
    def test_paginate_display_invalid_input(self, mock_print, mock_input):
        """Тестирование обработки некорректного ввода"""
        if not SRC_AVAILABLE:
            pytest.skip("Source code not available")
    
>       self.nav.paginate_display(self.test_items, simple_formatter)

tests/test_ui_navigation_complete.py:430: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/utils/ui_navigation.py:58: in paginate_display
    choice = input("\nВыберите действие: ").strip().lower()
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1124: in __call__
    return self._mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1128: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <MagicMock name='input' id='139795903573008'>
args = ('\nВыберите действие: ',), kwargs = {}
effect = <list_iterator object at 0x7f24c684dae0>

    def _execute_mock_call(self, /, *args, **kwargs):
        # separate from _increment_mock_call so that awaited functions are
        # executed separately from their call, also AsyncMock overrides this method
    
        effect = self.side_effect
        if effect is not None:
            if _is_exception(effect):
                raise effect
            elif not _callable(effect):
>               result = next(effect)
                         ^^^^^^^^^^^^
E               StopIteration

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1185: StopIteration
__ TestQuickPaginateFunction.test_quick_paginate_with_custom_actions ___

self = <tests.test_ui_navigation_complete.TestQuickPaginateFunction object at 0x7f24c666a390>
mock_print = <MagicMock name='print' id='139795922232592'>
mock_input = <MagicMock name='input' id='139795922251600'>

    @patch('builtins.input', side_effect=['c', 'q'])
    @patch('builtins.print')
    def test_quick_paginate_with_custom_actions(self, mock_print, mock_input):
        """Тестирование quick_paginate с пользовательскими действиями"""
        if not SRC_AVAILABLE:
            pytest.skip("Source code not available")
    
        test_items = create_test_items(4)
        custom_action = Mock()
        custom_actions = {"c": custom_action}
    
        quick_paginate(
            test_items,
            simple_formatter,
            custom_actions=custom_actions
        )
    
        assert mock_print.called
>       assert custom_action.called
E       AssertionError: assert False
E        +  where False = <Mock id='139795922232912'>.called

tests/test_ui_navigation_complete.py:521: AssertionError
___ TestUINavigationEdgeCases.test_navigation_boundary_page_numbers ____

self = <tests.test_ui_navigation_complete.TestUINavigationEdgeCases object at 0x7f24c6679a10>
mock_print = <MagicMock name='print' id='139795905084112'>
mock_input = <MagicMock name='input' id='139795904829136'>

    @patch('builtins.input', side_effect=['100', 'q'])
    @patch('builtins.print')
    def test_navigation_boundary_page_numbers(self, mock_print, mock_input):
        """Тестирование граничных номеров страниц"""
        if not SRC_AVAILABLE:
            pytest.skip("Source code not available")
    
        test_items = create_test_items(6)
>       self.nav.paginate_display(test_items, simple_formatter)

tests/test_ui_navigation_complete.py:637: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/utils/ui_navigation.py:58: in paginate_display
    choice = input("\nВыберите действие: ").strip().lower()
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1124: in __call__
    return self._mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1128: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <MagicMock name='input' id='139795904829136'>
args = ('\nВыберите действие: ',), kwargs = {}
effect = <list_iterator object at 0x7f24c4f64940>

    def _execute_mock_call(self, /, *args, **kwargs):
        # separate from _increment_mock_call so that awaited functions are
        # executed separately from their call, also AsyncMock overrides this method
    
        effect = self.side_effect
        if effect is not None:
            if _is_exception(effect):
                raise effect
            elif not _callable(effect):
>               result = next(effect)
                         ^^^^^^^^^^^^
E               StopIteration

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1185: StopIteration
______ TestQuickPaginate.test_quick_paginate_with_custom_actions _______

self = <tests.test_ui_navigation_comprehensive.TestQuickPaginate object at 0x7f24c66bb490>
mock_print = <MagicMock name='print' id='139795904819984'>
mock_input = <MagicMock name='input' id='139795903688336'>

    @patch('builtins.input', side_effect=["c", "q"])
    @patch('builtins.print')
    def test_quick_paginate_with_custom_actions(self, mock_print, mock_input):
        """Тестирование quick_paginate с пользовательскими действиями"""
        action_called = False
    
        def custom_action():
            nonlocal action_called
            action_called = True
    
        custom_actions = {"c": custom_action}
        items = ["item1", "item2", "item3"]
    
        quick_paginate(
            items,
            self.test_formatter,
            "Quick Test",
            custom_actions=custom_actions
        )
    
>       assert action_called is True
E       assert False is True

tests/test_ui_navigation_comprehensive.py:102: AssertionError
__ TestUINavigationExtended.test_paginate_display_invalid_page_number __

self = <tests.test_ui_navigation_extended.TestUINavigationExtended object at 0x7f24c66af790>
mock_print = <MagicMock name='print' id='139795904810512'>
mock_input = <MagicMock name='input' id='139795904976336'>

    @patch('builtins.input')
    @patch('builtins.print')
    def test_paginate_display_invalid_page_number(self, mock_print, mock_input):
        """Тестирование некорректного номера страницы"""
        mock_input.side_effect = ["10", "q"]  # Страница 10 не существует
    
        def formatter(item, number):
            return f"{number}: {item}"
    
>       self.navigator.paginate_display(self.test_items, formatter, "Invalid Page Test")

tests/test_ui_navigation_extended.py:113: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/utils/ui_navigation.py:58: in paginate_display
    choice = input("\nВыберите действие: ").strip().lower()
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1124: in __call__
    return self._mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1128: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <MagicMock name='input' id='139795904976336'>
args = ('\nВыберите действие: ',), kwargs = {}
effect = <list_iterator object at 0x7f24c6913340>

    def _execute_mock_call(self, /, *args, **kwargs):
        # separate from _increment_mock_call so that awaited functions are
        # executed separately from their call, also AsyncMock overrides this method
    
        effect = self.side_effect
        if effect is not None:
            if _is_exception(effect):
                raise effect
            elif not _callable(effect):
>               result = next(effect)
                         ^^^^^^^^^^^^
E               StopIteration

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1185: StopIteration
____ TestUINavigationExtended.test_paginate_display_custom_actions _____

self = <Mock id='139795904174992'>

    def assert_called_once(self):
        """assert that the mock was called only once.
        """
        if not self.call_count == 1:
            msg = ("Expected '%s' to have been called once. Called %s times.%s"
                   % (self._mock_name or 'mock',
                      self.call_count,
                      self._calls_repr()))
>           raise AssertionError(msg)
E           AssertionError: Expected 'mock' to have been called once. Called 0 times.

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:918: AssertionError

During handling of the above exception, another exception occurred:

self = <tests.test_ui_navigation_extended.TestUINavigationExtended object at 0x7f24c66afc10>
mock_print = <MagicMock name='print' id='139795904173776'>
mock_input = <MagicMock name='input' id='139795905084560'>

    @patch('builtins.input')
    @patch('builtins.print')
    def test_paginate_display_custom_actions(self, mock_print, mock_input):
        """Тестирование кастомных действий"""
        mock_action = Mock()
        mock_action.__doc__ = "Кастомное действие"
    
        custom_actions = {"c": mock_action}
        mock_input.side_effect = ["c", "q"]
    
        def formatter(item, number):
            return f"{number}: {item}"
    
        self.navigator.paginate_display(
            self.test_items[:5],
            formatter,
            "Custom Actions",
            custom_actions=custom_actions
        )
    
>       mock_action.assert_called_once()
E       AssertionError: Expected 'mock' to have been called once. Called 0 times.

tests/test_ui_navigation_extended.py:139: AssertionError
__ TestUINavigationExtended.test_paginate_display_custom_action_error __

self = <tests.test_ui_navigation_extended.TestUINavigationExtended object at 0x7f24c66aff50>
mock_print = <MagicMock name='print' id='139795903155536'>
mock_input = <MagicMock name='input' id='139795903166032'>

    @patch('builtins.input')
    @patch('builtins.print')
    def test_paginate_display_custom_action_error(self, mock_print, mock_input):
        """Тестирование ошибки в кастомном действии"""
        def error_action():
            raise ValueError("Test error")
    
        custom_actions = {"e": error_action}
        mock_input.side_effect = ["e", "q"]
    
        def formatter(item, number):
            return f"{number}: {item}"
    
        self.navigator.paginate_display(
            self.test_items[:5],
            formatter,
            "Error Test",
            custom_actions=custom_actions
        )
    
        calls = [call.args[0] for call in mock_print.call_args_list]
        output = " ".join(calls)
>       assert "Ошибка при выполнении действия" in output
E       AssertionError: assert 'Ошибка при выполнении действия' in '\n\nError Test ========== 1: Item 0 2: Item 1 3: Item 2 4: Item 3 5: Item 4 \n==================== Навигация: Страница 1 из 1 Показано элементов: 1-5 из 5 --------------------'

tests/test_ui_navigation_extended.py:163: AssertionError
____________ TestUnifiedAPI.test_filter_by_target_companies ____________

self = <tests.test_unified_api.TestUnifiedAPI object at 0x7f24c6679dd0>
unified_api = <src.api_modules.unified_api.UnifiedAPI object at 0x7f24c6535f90>

    def test_filter_by_target_companies(self, unified_api):
        """Тест фильтрации по целевым компаниям"""
        # Мокаем TargetCompanies
>       with patch('src.api_modules.unified_api.TargetCompanies') as mock_target_companies:

tests/test_unified_api.py:264: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1446: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f24c50bbbd0>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'src.api_modules.unified_api' from '/home/runner/workspace/tests/../src/api_modules/unified_api.py'> does not have the attribute 'TargetCompanies'

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1419: AttributeError
______ TestUnifiedAPI.test_filter_by_target_companies_empty_input ______

self = <tests.test_unified_api.TestUnifiedAPI object at 0x7f24c667b810>
unified_api = <src.api_modules.unified_api.UnifiedAPI object at 0x7f24c50af810>

    def test_filter_by_target_companies_empty_input(self, unified_api):
        """Тест фильтрации пустого списка вакансий"""
>       with patch('src.api_modules.unified_api.TargetCompanies') as mock_target_companies:

tests/test_unified_api.py:288: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1446: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f24c50aed50>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'src.api_modules.unified_api' from '/home/runner/workspace/tests/../src/api_modules/unified_api.py'> does not have the attribute 'TargetCompanies'

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1419: AttributeError
__ TestUnifiedAPI.test_filter_by_target_companies_no_target_companies __

self = <tests.test_unified_api.TestUnifiedAPI object at 0x7f24c667bf50>
unified_api = <src.api_modules.unified_api.UnifiedAPI object at 0x7f24c6534510>

    def test_filter_by_target_companies_no_target_companies(self, unified_api):
        """Тест фильтрации без целевых компаний"""
>       with patch('src.api_modules.unified_api.TargetCompanies') as mock_target_companies:

tests/test_unified_api.py:298: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1446: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f24c52bddd0>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'src.api_modules.unified_api' from '/home/runner/workspace/tests/../src/api_modules/unified_api.py'> does not have the attribute 'TargetCompanies'

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1419: AttributeError
___ TestUnifiedAPI.test_filter_by_target_companies_missing_employer ____

self = <tests.test_unified_api.TestUnifiedAPI object at 0x7f24c6678e90>
unified_api = <src.api_modules.unified_api.UnifiedAPI object at 0x7f24c51002d0>

    def test_filter_by_target_companies_missing_employer(self, unified_api):
        """Тест фильтрации вакансий без информации о работодателе"""
>       with patch('src.api_modules.unified_api.TargetCompanies') as mock_target_companies:

tests/test_unified_api.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1446: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f24c64bfcd0>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'src.api_modules.unified_api' from '/home/runner/workspace/tests/../src/api_modules/unified_api.py'> does not have the attribute 'TargetCompanies'

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1419: AttributeError
_____ TestUnifiedAPI.test_filter_by_target_companies_mixed_sources _____

self = <tests.test_unified_api.TestUnifiedAPI object at 0x7f24c66d4150>
unified_api = <src.api_modules.unified_api.UnifiedAPI object at 0x7f24c52f5450>

    def test_filter_by_target_companies_mixed_sources(self, unified_api):
        """Тест фильтрации вакансий из разных источников"""
>       with patch('src.api_modules.unified_api.TargetCompanies') as mock_target_companies:

tests/test_unified_api.py:330: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1446: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f24c6517dd0>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'src.api_modules.unified_api' from '/home/runner/workspace/tests/../src/api_modules/unified_api.py'> does not have the attribute 'TargetCompanies'

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1419: AttributeError
________________ TestUserInterface.test_logger_creation ________________

self = <MagicMock name='getLogger' id='139795901226768'>
args = ('tests.test_user_interface',), kwargs = {}
expected = call('tests.test_user_interface')
actual = call('src.user_interface')
_error_message = <function NonCallableMock.assert_called_with.<locals>._error_message at 0x7f24c5002d40>
cause = None

    def assert_called_with(self, /, *args, **kwargs):
        """assert that the last call was made with the specified arguments.
    
        Raises an AssertionError if the args and keyword args passed in are
        different to the last call to the mock."""
        if self.call_args is None:
            expected = self._format_mock_call_signature(args, kwargs)
            actual = 'not called.'
            error_message = ('expected call not found.\nExpected: %s\n  Actual: %s'
                    % (expected, actual))
            raise AssertionError(error_message)
    
        def _error_message():
            msg = self._format_mock_failure_message(args, kwargs)
            return msg
        expected = self._call_matcher(_Call((args, kwargs), two=True))
        actual = self._call_matcher(self.call_args)
        if actual != expected:
            cause = expected if isinstance(expected, Exception) else None
>           raise AssertionError(_error_message()) from cause
E           AssertionError: expected call not found.
E           Expected: getLogger('tests.test_user_interface')
E             Actual: getLogger('src.user_interface')

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:939: AssertionError

During handling of the above exception, another exception occurred:

self = <tests.test_user_interface.TestUserInterface object at 0x7f24c66e9c90>
mock_get_logger = <MagicMock name='getLogger' id='139795901226768'>

    @patch('src.user_interface.logging.getLogger')
    def test_logger_creation(self, mock_get_logger):
        """Тест создания логгера"""
        mock_logger = Mock()
        mock_get_logger.return_value = mock_logger
    
        import importlib
        import src.user_interface
        importlib.reload(src.user_interface)
    
>       mock_get_logger.assert_called_with(__name__)
E       AssertionError: expected call not found.
E       Expected: getLogger('tests.test_user_interface')
E         Actual: getLogger('src.user_interface')
E       
E       pytest introspection follows:
E       
E       Args:
E       assert ('src.user_interface',) == ('tests.test_user_interface',)
E         
E         At index 0 diff: 'src.user_interface' != 'tests.test_user_interface'
E         Use -v to get more diff

tests/test_user_interface.py:56: AssertionError
__________ TestUserInterface.test_main_function_success_flow ___________

args = (<tests.test_user_interface.TestUserInterface object at 0x7f24c66e9fd0>,)
keywargs = {}

    @wraps(func)
    def patched(*args, **keywargs):
>       with self.decoration_helper(patched,
                                    args,
                                    keywargs) as (newargs, newkeywargs):

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1375: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
           ^^^^^^^^^^^^^^
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1357: in decoration_helper
    arg = exit_stack.enter_context(patching)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/contextlib.py:517: in enter_context
    result = _enter(cm)
             ^^^^^^^^^^
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1446: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f24c66d55d0>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'src.user_interface' from '/home/runner/workspace/tests/../src/user_interface.py'> does not have the attribute 'DBManager'

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1419: AttributeError
______ TestUserInterface.test_main_function_db_connection_failure ______

args = (<tests.test_user_interface.TestUserInterface object at 0x7f24c66ea390>,)
keywargs = {}

    @wraps(func)
    def patched(*args, **keywargs):
>       with self.decoration_helper(patched,
                                    args,
                                    keywargs) as (newargs, newkeywargs):

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1375: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
           ^^^^^^^^^^^^^^
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1357: in decoration_helper
    arg = exit_stack.enter_context(patching)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/contextlib.py:517: in enter_context
    result = _enter(cm)
             ^^^^^^^^^^
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1446: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f24c66d5ad0>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'src.user_interface' from '/home/runner/workspace/tests/../src/user_interface.py'> does not have the attribute 'DBManager'

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1419: AttributeError
_________ TestUserInterface.test_main_function_db_init_failure _________

args = (<tests.test_user_interface.TestUserInterface object at 0x7f24c66ea890>,)
keywargs = {}

    @wraps(func)
    def patched(*args, **keywargs):
>       with self.decoration_helper(patched,
                                    args,
                                    keywargs) as (newargs, newkeywargs):

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1375: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
           ^^^^^^^^^^^^^^
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1357: in decoration_helper
    arg = exit_stack.enter_context(patching)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/contextlib.py:517: in enter_context
    result = _enter(cm)
             ^^^^^^^^^^
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1446: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f24c66d5c90>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'src.user_interface' from '/home/runner/workspace/tests/../src/user_interface.py'> does not have the attribute 'DBManager'

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1419: AttributeError
_____ TestUserInterface.test_main_function_db_verification_failure _____

args = (<tests.test_user_interface.TestUserInterface object at 0x7f24c66eae50>,)
keywargs = {}

    @wraps(func)
    def patched(*args, **keywargs):
>       with self.decoration_helper(patched,
                                    args,
                                    keywargs) as (newargs, newkeywargs):

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1375: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
           ^^^^^^^^^^^^^^
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1357: in decoration_helper
    arg = exit_stack.enter_context(patching)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/contextlib.py:517: in enter_context
    result = _enter(cm)
             ^^^^^^^^^^
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1446: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f24c66d5e10>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'src.user_interface' from '/home/runner/workspace/tests/../src/user_interface.py'> does not have the attribute 'DBManager'

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1419: AttributeError
_______ TestUserInterface.test_main_function_keyboard_interrupt ________

args = (<tests.test_user_interface.TestUserInterface object at 0x7f24c66eb3d0>,)
keywargs = {}

    @wraps(func)
    def patched(*args, **keywargs):
>       with self.decoration_helper(patched,
                                    args,
                                    keywargs) as (newargs, newkeywargs):

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1375: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
           ^^^^^^^^^^^^^^
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1357: in decoration_helper
    arg = exit_stack.enter_context(patching)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/contextlib.py:517: in enter_context
    result = _enter(cm)
             ^^^^^^^^^^
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1446: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f24c66d6010>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'src.user_interface' from '/home/runner/workspace/tests/../src/user_interface.py'> does not have the attribute 'DBManager'

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1419: AttributeError
_________ TestUserInterface.test_main_function_database_error __________

args = (<tests.test_user_interface.TestUserInterface object at 0x7f24c66eb950>,)
keywargs = {}

    @wraps(func)
    def patched(*args, **keywargs):
>       with self.decoration_helper(patched,
                                    args,
                                    keywargs) as (newargs, newkeywargs):

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1375: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
           ^^^^^^^^^^^^^^
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1357: in decoration_helper
    arg = exit_stack.enter_context(patching)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/contextlib.py:517: in enter_context
    result = _enter(cm)
             ^^^^^^^^^^
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1446: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f24c66e8d90>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'src.user_interface' from '/home/runner/workspace/tests/../src/user_interface.py'> does not have the attribute 'DBManager'

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1419: AttributeError
__________ TestUserInterface.test_main_function_general_error __________

args = (<tests.test_user_interface.TestUserInterface object at 0x7f24c66ebf50>,)
keywargs = {}

    @wraps(func)
    def patched(*args, **keywargs):
>       with self.decoration_helper(patched,
                                    args,
                                    keywargs) as (newargs, newkeywargs):

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1375: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
           ^^^^^^^^^^^^^^
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1357: in decoration_helper
    arg = exit_stack.enter_context(patching)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/contextlib.py:517: in enter_context
    result = _enter(cm)
             ^^^^^^^^^^
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1446: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f24c66e93d0>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'src.user_interface' from '/home/runner/workspace/tests/../src/user_interface.py'> does not have the attribute 'DBManager'

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1419: AttributeError
_________ TestUserInterface.test_main_function_return_on_error _________

self = <tests.test_user_interface.TestUserInterface object at 0x7f24c667c610>

    def test_main_function_return_on_error(self):
        """Тест возврата из функции при ошибке"""
>       with patch('src.user_interface.DBManager') as mock_db_manager_class:

tests/test_user_interface.py:245: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1446: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f24c4b84810>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'src.user_interface' from '/home/runner/workspace/tests/../src/user_interface.py'> does not have the attribute 'DBManager'

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1419: AttributeError
________ TestUserInterface.test_main_function_storage_creation _________

args = (<tests.test_user_interface.TestUserInterface object at 0x7f24c667cc50>,)
keywargs = {}

    @wraps(func)
    def patched(*args, **keywargs):
>       with self.decoration_helper(patched,
                                    args,
                                    keywargs) as (newargs, newkeywargs):

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1375: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
           ^^^^^^^^^^^^^^
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1357: in decoration_helper
    arg = exit_stack.enter_context(patching)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/contextlib.py:517: in enter_context
    result = _enter(cm)
             ^^^^^^^^^^
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1446: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f24c667b610>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'src.user_interface' from '/home/runner/workspace/tests/../src/user_interface.py'> does not have the attribute 'DBManager'

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1419: AttributeError
_____ TestUserInterface.test_main_function_user_interface_creation _____

args = (<tests.test_user_interface.TestUserInterface object at 0x7f24c667d290>,)
keywargs = {}

    @wraps(func)
    def patched(*args, **keywargs):
>       with self.decoration_helper(patched,
                                    args,
                                    keywargs) as (newargs, newkeywargs):

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1375: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
           ^^^^^^^^^^^^^^
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1357: in decoration_helper
    arg = exit_stack.enter_context(patching)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/contextlib.py:517: in enter_context
    result = _enter(cm)
             ^^^^^^^^^^
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1446: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f24c669c2d0>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'src.user_interface' from '/home/runner/workspace/tests/../src/user_interface.py'> does not have the attribute 'DBManager'

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1419: AttributeError
______ TestUserInterfaceConsolidated.test_main_interface_complete ______

args = (<tests.test_user_interface_consolidated.TestUserInterfaceConsolidated object at 0x7f24c667ec50>,)
keywargs = {}

    @wraps(func)
    def patched(*args, **keywargs):
>       with self.decoration_helper(patched,
                                    args,
                                    keywargs) as (newargs, newkeywargs):

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1375: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
           ^^^^^^^^^^^^^^
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1357: in decoration_helper
    arg = exit_stack.enter_context(patching)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/contextlib.py:517: in enter_context
    result = _enter(cm)
             ^^^^^^^^^^
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1446: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f24c667db10>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'src.user_interface' from '/home/runner/workspace/tests/../src/user_interface.py'> does not have the attribute 'DBManager'

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1419: AttributeError
_ TestUserInterfaceConsolidated.test_interface_components_integration __

self = <tests.test_user_interface_consolidated.TestUserInterfaceConsolidated object at 0x7f24c667f9d0>

    def test_interface_components_integration(self):
        """Тестирование интеграции компонентов интерфейса"""
        try:
            from src.interfaces.main_application_interface import MainApplicationInterface
    
>           interface = MainApplicationInterface()
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^
E           TypeError: Can't instantiate abstract class MainApplicationInterface with abstract method run_application

tests/test_user_interface_consolidated.py:92: TypeError
_____ TestVacancyDisplayHandler.test_vacancy_display_handler_init ______

self = <tests.test_vacancy_display_handler.TestVacancyDisplayHandler object at 0x7f24c6708790>

    def test_vacancy_display_handler_init(self):
        """Тест инициализации обработчика отображения вакансий"""
>       handler = VacancyDisplayHandler()
                  ^^^^^^^^^^^^^^^^^^^^^^^
E       TypeError: VacancyDisplayHandler.__init__() missing 1 required positional argument: 'storage'

tests/test_vacancy_display_handler.py:42: TypeError
__________ TestVacancyModelsComplete.test_base_vacancy_model ___________

self = <tests.test_vacancy_models_complete.TestVacancyModelsComplete object at 0x7f24c6562110>

    def test_base_vacancy_model(self):
        """Тест базовой модели вакансии"""
        employer = Employer("Test Company", "123")
        vacancy = Vacancy("Python Developer", employer, "https://test.com")
    
        assert vacancy.title == "Python Developer"
>       assert vacancy.url == "https://test.com"
E       AssertionError: assert Employer(name='Test Company', id='123') == 'https://test.com'
E        +  where Employer(name='Test Company', id='123') = <src.vacancies.models.Vacancy object at 0x7f24c4e98bb0>.url

tests/test_vacancy_models_complete.py:26: AssertionError
________ TestVacancyModelsComplete.test_employer_model_complete ________

self = <tests.test_vacancy_models_complete.TestVacancyModelsComplete object at 0x7f24c6561410>

    def test_employer_model_complete(self):
        """Тест модели работодателя"""
        employer = Employer("Test Company", "123")
    
        assert employer.name == "Test Company"
>       assert employer.employer_id == "123"
               ^^^^^^^^^^^^^^^^^^^^
E       AttributeError: 'Employer' object has no attribute 'employer_id'

tests/test_vacancy_models_complete.py:41: AttributeError
_______ TestVacancyModelsConsolidated.test_salary_model_complete _______

self = <tests.test_vacancy_models_consolidated.TestVacancyModelsConsolidated object at 0x7f24c6562dd0>
sample_salary_data = {'currency': 'RUR', 'salary_from': 100000, 'salary_to': 200000}

    def test_salary_model_complete(self, sample_salary_data):
        """Полное тестирование модели зарплаты"""
        try:
            from src.vacancies.models import Salary
    
>           salary = Salary(**sample_salary_data)
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E           TypeError: Salary.__init__() got an unexpected keyword argument 'salary_from'

tests/test_vacancy_models_consolidated.py:82: TypeError
______ TestVacancyModelsConsolidated.test_employer_model_complete ______

self = <tests.test_vacancy_models_consolidated.TestVacancyModelsConsolidated object at 0x7f24c6563c90>

    def test_employer_model_complete(self):
        """Полное тестирование модели работодателя"""
        try:
            from src.vacancies.models import Employer
    
            employer_data = {
                'employer_id': 'emp_123',
                'name': 'Тест Компания',
                'url': 'https://test.com/company/123'
            }
    
>           employer = Employer(**employer_data)
                       ^^^^^^^^^^^^^^^^^^^^^^^^^
E           TypeError: Employer.__init__() got an unexpected keyword argument 'url'

tests/test_vacancy_models_consolidated.py:113: TypeError
____ TestVacancyOperationsCoordinatorComplete.test_coordinator_init ____

self = <tests.test_vacancy_operations_coordinator_complete.TestVacancyOperationsCoordinatorComplete object at 0x7f24c6594e10>

    def test_coordinator_init(self):
        """Тест инициализации координатора операций с вакансиями"""
>       coordinator = VacancyOperationsCoordinator()
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       TypeError: VacancyOperationsCoordinator.__init__() missing 2 required positional arguments: 'unified_api' and 'storage'

tests/test_vacancy_operations_coordinator_complete.py:49: TypeError
______________ TestVacancyRepository.test_repository_init ______________

self = <tests.test_vacancy_repository.TestVacancyRepository object at 0x7f24c64c0f50>

    def test_repository_init(self):
        """Тест инициализации репозитория"""
        assert self.repository is not None
>       assert self.repository.connection == self.mock_connection
               ^^^^^^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: 'VacancyRepository' object has no attribute 'connection'

tests/test_vacancy_repository.py:35: AttributeError
______ TestVacancySearchHandlerComplete.test_search_handler_init _______

self = <tests.test_vacancy_search_handler_complete.TestVacancySearchHandlerComplete object at 0x7f24c6491310>

    def test_search_handler_init(self):
        """Тест инициализации обработчика поиска вакансий"""
>       handler = VacancySearchHandler()
                  ^^^^^^^^^^^^^^^^^^^^^^
E       TypeError: VacancySearchHandler.__init__() missing 2 required positional arguments: 'unified_api' and 'storage'

tests/test_vacancy_search_handler_complete.py:51: TypeError
============================ tests coverage ============================
___________ coverage: platform linux, python 3.11.13-final-0 ___________

Name                                                     Stmts   Miss  Cover
----------------------------------------------------------------------------
src/__init__.py                                              0      0   100%
src/api_modules/__init__.py                                  0      0   100%
src/api_modules/base_api.py                                 23      0   100%
src/api_modules/cached_api.py                              169     70    59%
src/api_modules/get_api.py                                  53      0   100%
src/api_modules/hh_api.py                                  142     14    90%
src/api_modules/sj_api.py                                  108     47    56%
src/api_modules/unified_api.py                             271    199    27%
src/config/__init__.py                                       0      0   100%
src/config/api_config.py                                    13      0   100%
src/config/app_config.py                                    17      0   100%
src/config/db_config.py                                     61     27    56%
src/config/hh_api_config.py                                 21      2    90%
src/config/sj_api_config.py                                 49     18    63%
src/config/target_companies.py                              61     27    56%
src/config/ui_config.py                                     27      8    70%
src/interfaces/main_application_interface.py               121     88    27%
src/storage/__init__.py                                      6      0   100%
src/storage/abstract.py                                     14      0   100%
src/storage/abstract_db_manager.py                          21      6    71%
src/storage/components/__init__.py                           0      0   100%
src/storage/components/database_connection.py               53     15    72%
src/storage/components/vacancy_repository.py               113     97    14%
src/storage/components/vacancy_validator.py                 65     39    40%
src/storage/db_manager.py                                  306    183    40%
src/storage/interfaces/typed_data_processor.py              46     25    46%
src/storage/postgres_saver.py                              826    702    15%
src/storage/services/__init__.py                             4      0   100%
src/storage/services/abstract_filter_service.py             30      7    77%
src/storage/services/abstract_storage_service.py            25      6    76%
src/storage/services/company_id_filter_service.py           94     62    34%
src/storage/services/deduplication_service.py               64     43    33%
src/storage/services/filtering_service.py                  105     66    37%
src/storage/services/sql_deduplication_service.py           64     49    23%
src/storage/services/sql_filter_service.py                  89     63    29%
src/storage/services/vacancy_processing_coordinator.py      44      0   100%
src/storage/services/vacancy_storage_service.py            334    243    27%
src/storage/simple_db_adapter.py                           142    142     0%
src/storage/storage_factory.py                              13      0   100%
src/ui_interfaces/__init__.py                                0      0   100%
src/ui_interfaces/console_interface.py                     400    311    22%
src/ui_interfaces/source_selector.py                        44     30    32%
src/ui_interfaces/vacancy_display_handler.py                72     58    19%
src/ui_interfaces/vacancy_operations_coordinator.py        200    105    48%
src/ui_interfaces/vacancy_search_handler.py                152    127    16%
src/user_interface.py                                       49     41    16%
src/utils/__init__.py                                        0      0   100%
src/utils/abstract_filter.py                                26     26     0%
src/utils/api_data_filter.py                               178    178     0%
src/utils/base_formatter.py                                 38     11    71%
src/utils/cache.py                                         135     59    56%
src/utils/data_normalizers.py                               75     13    83%
src/utils/db_manager_demo.py                               236    217     8%
src/utils/decorators.py                                     73     53    27%
src/utils/description_parser.py                             70     70     0%
src/utils/env_loader.py                                     59     18    69%
src/utils/file_handlers.py                                  39     25    36%
src/utils/menu_manager.py                                   71     21    70%
src/utils/paginator.py                                      28     21    25%
src/utils/salary.py                                        113     19    83%
src/utils/search_utils.py                                  156     28    82%
src/utils/source_manager.py                                 60     38    37%
src/utils/ui_helpers.py                                    161      4    98%
src/utils/ui_navigation.py                                  99      0   100%
src/utils/vacancy_formatter.py                             172     61    65%
src/utils/vacancy_operations.py                            165     99    40%
src/utils/vacancy_stats.py                                  86     53    38%
src/vacancies/__init__.py                                    0      0   100%
src/vacancies/abstract.py                                   10      0   100%
src/vacancies/abstract_models.py                            99     28    72%
src/vacancies/models.py                                    390    215    45%
src/vacancies/parsers/__init__.py                           55     21    62%
src/vacancies/parsers/base_parser.py                         9      2    78%
src/vacancies/parsers/hh_parser.py                          55     10    82%
src/vacancies/parsers/sj_parser.py                          57     47    18%
----------------------------------------------------------------------------
TOTAL                                                     7226   4257    41%
======================= short test summary info ========================
FAILED tests/test_comprehensive_fixed.py::TestVacancyModelsFixed::test_vacancy_model_fixed - AssertionError: assert Employer(name='Test Company', id='123') == '...
FAILED tests/test_config_modules_consolidated.py::TestConfigModulesConsolidated::test_target_companies_complete - AssertionError: assert (False or False)
FAILED tests/test_core_modules_comprehensive.py::TestUserInterfaceModule::test_main_function_success - AttributeError: <module 'src.user_interface' from '/home/runner/wor...
FAILED tests/test_core_modules_comprehensive.py::TestUserInterfaceModule::test_main_function_db_connection_error - AttributeError: <module 'src.user_interface' from '/home/runner/wor...
FAILED tests/test_core_modules_comprehensive.py::TestVacancyModels::test_vacancy_validation_valid - AssertionError: assert Employer(name='Test Company', id='123') == '...
FAILED tests/test_hh_api.py::TestHeadHunterAPI::test_get_vacancies_from_target_companies - AttributeError: <module 'src.api_modules.hh_api' from '/home/runner...
FAILED tests/test_hh_api.py::TestHeadHunterAPI::test_clear_cache - AttributeError: <src.api_modules.hh_api.HeadHunterAPI object at 0x7...
FAILED tests/test_main.py::TestMainModule::test_main_module_imports - AttributeError: <module 'main' from '/home/runner/workspace/tests/....
FAILED tests/test_main.py::TestMainModule::test_main_module_env_loading - AttributeError: <module 'main' from '/home/runner/workspace/tests/....
FAILED tests/test_main.py::TestMainModule::test_main_module_user_interface_import - assert (False or 'user_interface' in "<module 'main' from '/home/ru...
FAILED tests/test_main.py::TestMainModule::test_main_module_conditional_execution - AttributeError: <module 'main' from '/home/runner/workspace/main.py...
FAILED tests/test_main_application_interface.py::TestMainApplicationInterface::test_main_application_interface_init - TypeError: Can't instantiate abstract class MainApplicationInterfac...
FAILED tests/test_services_storage_consolidated.py::TestAbstractStorageClasses::test_abstract_filter_service - TypeError: Can't instantiate abstract class ConcreteFilterService w...
FAILED tests/test_storage_modules_consolidated.py::TestStorageModulesConsolidated::test_vacancy_repository - TypeError: VacancyRepository.__init__() missing 2 required position...
FAILED tests/test_typed_data_processor.py::TestTypedDataProcessor::test_typed_data_processor_init - TypeError: Can't instantiate abstract class TypedDataProcessor with...
FAILED tests/test_ui_navigation_complete.py::TestUINavigationPaginateDisplay::test_paginate_display_invalid_input - StopIteration
FAILED tests/test_ui_navigation_complete.py::TestQuickPaginateFunction::test_quick_paginate_with_custom_actions - AssertionError: assert False
FAILED tests/test_ui_navigation_complete.py::TestUINavigationEdgeCases::test_navigation_boundary_page_numbers - StopIteration
FAILED tests/test_ui_navigation_comprehensive.py::TestQuickPaginate::test_quick_paginate_with_custom_actions - assert False is True
FAILED tests/test_ui_navigation_extended.py::TestUINavigationExtended::test_paginate_display_invalid_page_number - StopIteration
FAILED tests/test_ui_navigation_extended.py::TestUINavigationExtended::test_paginate_display_custom_actions - AssertionError: Expected 'mock' to have been called once. Called 0 ...
FAILED tests/test_ui_navigation_extended.py::TestUINavigationExtended::test_paginate_display_custom_action_error - AssertionError: assert 'Ошибка при выполнении действия' in '\n\nErr...
FAILED tests/test_unified_api.py::TestUnifiedAPI::test_filter_by_target_companies - AttributeError: <module 'src.api_modules.unified_api' from '/home/r...
FAILED tests/test_unified_api.py::TestUnifiedAPI::test_filter_by_target_companies_empty_input - AttributeError: <module 'src.api_modules.unified_api' from '/home/r...
FAILED tests/test_unified_api.py::TestUnifiedAPI::test_filter_by_target_companies_no_target_companies - AttributeError: <module 'src.api_modules.unified_api' from '/home/r...
FAILED tests/test_unified_api.py::TestUnifiedAPI::test_filter_by_target_companies_missing_employer - AttributeError: <module 'src.api_modules.unified_api' from '/home/r...
FAILED tests/test_unified_api.py::TestUnifiedAPI::test_filter_by_target_companies_mixed_sources - AttributeError: <module 'src.api_modules.unified_api' from '/home/r...
FAILED tests/test_user_interface.py::TestUserInterface::test_logger_creation - AssertionError: expected call not found.
FAILED tests/test_user_interface.py::TestUserInterface::test_main_function_success_flow - AttributeError: <module 'src.user_interface' from '/home/runner/wor...
FAILED tests/test_user_interface.py::TestUserInterface::test_main_function_db_connection_failure - AttributeError: <module 'src.user_interface' from '/home/runner/wor...
FAILED tests/test_user_interface.py::TestUserInterface::test_main_function_db_init_failure - AttributeError: <module 'src.user_interface' from '/home/runner/wor...
FAILED tests/test_user_interface.py::TestUserInterface::test_main_function_db_verification_failure - AttributeError: <module 'src.user_interface' from '/home/runner/wor...
FAILED tests/test_user_interface.py::TestUserInterface::test_main_function_keyboard_interrupt - AttributeError: <module 'src.user_interface' from '/home/runner/wor...
FAILED tests/test_user_interface.py::TestUserInterface::test_main_function_database_error - AttributeError: <module 'src.user_interface' from '/home/runner/wor...
FAILED tests/test_user_interface.py::TestUserInterface::test_main_function_general_error - AttributeError: <module 'src.user_interface' from '/home/runner/wor...
FAILED tests/test_user_interface.py::TestUserInterface::test_main_function_return_on_error - AttributeError: <module 'src.user_interface' from '/home/runner/wor...
FAILED tests/test_user_interface.py::TestUserInterface::test_main_function_storage_creation - AttributeError: <module 'src.user_interface' from '/home/runner/wor...
FAILED tests/test_user_interface.py::TestUserInterface::test_main_function_user_interface_creation - AttributeError: <module 'src.user_interface' from '/home/runner/wor...
FAILED tests/test_user_interface_consolidated.py::TestUserInterfaceConsolidated::test_main_interface_complete - AttributeError: <module 'src.user_interface' from '/home/runner/wor...
FAILED tests/test_user_interface_consolidated.py::TestUserInterfaceConsolidated::test_interface_components_integration - TypeError: Can't instantiate abstract class MainApplicationInterfac...
FAILED tests/test_vacancy_display_handler.py::TestVacancyDisplayHandler::test_vacancy_display_handler_init - TypeError: VacancyDisplayHandler.__init__() missing 1 required posi...
FAILED tests/test_vacancy_models_complete.py::TestVacancyModelsComplete::test_base_vacancy_model - AssertionError: assert Employer(name='Test Company', id='123') == '...
FAILED tests/test_vacancy_models_complete.py::TestVacancyModelsComplete::test_employer_model_complete - AttributeError: 'Employer' object has no attribute 'employer_id'
FAILED tests/test_vacancy_models_consolidated.py::TestVacancyModelsConsolidated::test_salary_model_complete - TypeError: Salary.__init__() got an unexpected keyword argument 'sa...
FAILED tests/test_vacancy_models_consolidated.py::TestVacancyModelsConsolidated::test_employer_model_complete - TypeError: Employer.__init__() got an unexpected keyword argument '...
FAILED tests/test_vacancy_operations_coordinator_complete.py::TestVacancyOperationsCoordinatorComplete::test_coordinator_init - TypeError: VacancyOperationsCoordinator.__init__() missing 2 requir...
FAILED tests/test_vacancy_repository.py::TestVacancyRepository::test_repository_init - AttributeError: 'VacancyRepository' object has no attribute 'connec...
FAILED tests/test_vacancy_search_handler_complete.py::TestVacancySearchHandlerComplete::test_search_handler_init - TypeError: VacancySearchHandler.__init__() missing 2 required posit...
ERROR tests/test_ui_navigation_comprehensive.py::TestUINavigation::test_formatter
ERROR tests/test_ui_navigation_comprehensive.py::TestQuickPaginate::test_formatter
============== 48 failed, 986 passed, 2 errors in 17.04s ===============
~/workspace$ 