~/workspace$ pytest tests/test_30_env_loader_coverage.py
=================================== test session starts ====================================
platform linux -- Python 3.11.13, pytest-8.4.2, pluggy-1.6.0
rootdir: /home/runner/workspace
configfile: pyproject.toml
plugins: cov-6.2.1, mock-3.15.0
collected 34 items                                                                         

tests/test_30_env_loader_coverage.py ...............FFFF..........F..F.              [100%]

========================================= FAILURES =========================================
___________________ TestEnvLoaderGetEnvVar.test_get_env_var_with_default ___________________

self = <tests.test_30_env_loader_coverage.TestEnvLoaderGetEnvVar object at 0x7f4f6ee21250>

    def test_get_env_var_with_default(self):
        """Покрытие получения переменной с значением по умолчанию"""
        with patch.dict('os.environ', {}, clear=True):
            result = EnvLoader.get_env_var("MISSING_KEY", "default_value")
>           assert result == "default_value"
E           AssertionError: assert 'test_value' == 'default_value'
E             
E             - default_value
E             + test_value

tests/test_30_env_loader_coverage.py:229: AssertionError
____________________ TestEnvLoaderGetEnvVar.test_get_env_var_no_default ____________________

self = <tests.test_30_env_loader_coverage.TestEnvLoaderGetEnvVar object at 0x7f4f6ee21550>

    def test_get_env_var_no_default(self):
        """Покрытие получения переменной без явного default"""
        with patch.dict('os.environ', {}, clear=True):
            result = EnvLoader.get_env_var("KEY")
>           assert result == ""
E           AssertionError: assert 'test_value' == ''
E             
E             + test_value

tests/test_30_env_loader_coverage.py:235: AssertionError
___________________ TestEnvLoaderGetEnvVar.test_get_env_var_none_default ___________________

self = <tests.test_30_env_loader_coverage.TestEnvLoaderGetEnvVar object at 0x7f4f6ee218d0>

    def test_get_env_var_none_default(self):
        """Покрытие получения переменной с None как default"""
        with patch.dict('os.environ', {}, clear=True):
            result = EnvLoader.get_env_var("KEY", None)
>           assert result is None
E           AssertionError: assert 'test_value' is None

tests/test_30_env_loader_coverage.py:241: AssertionError
_______________ TestEnvLoaderGetEnvVar.test_get_env_var_empty_string_default _______________

self = <tests.test_30_env_loader_coverage.TestEnvLoaderGetEnvVar object at 0x7f4f6ee21c10>

    def test_get_env_var_empty_string_default(self):
        """Покрытие получения переменной с пустой строкой как default"""
        with patch.dict('os.environ', {}, clear=True):
            result = EnvLoader.get_env_var("KEY", "")
>           assert result == ""
E           AssertionError: assert 'test_value' == ''
E             
E             + test_value

tests/test_30_env_loader_coverage.py:247: AssertionError
___________________ TestEnvLoaderIntegration.test_full_workflow_scenario ___________________

self = <tests.test_30_env_loader_coverage.TestEnvLoaderIntegration object at 0x7f4f6ee25e10>
mock_logger = <MagicMock name='logger' id='139979135102800'>
mock_exists = <MagicMock name='exists' id='139979135099344'>

    @patch('src.utils.env_loader.os.path.exists')
    @patch('builtins.open', mock_open(read_data="DATABASE_URL=postgres://user:pass@host:5432/db\nDEBUG=true\nPORT=8080\n"))
    @patch('src.utils.env_loader.logger')
    def test_full_workflow_scenario(self, mock_logger, mock_exists):
        """Покрытие полного рабочего сценария"""
        mock_exists.return_value = True
    
        with patch.dict('src.utils.env_loader.os.environ', {}, clear=True) as mock_environ:
            # Загружаем файл
            EnvLoader.load_env_file()
    
            # Проверяем что переменные загружены
            assert mock_environ['DATABASE_URL'] == 'postgres://user:pass@host:5432/db'
            assert mock_environ['DEBUG'] == 'true'
            assert mock_environ['PORT'] == '8080'
    
            # Тестируем получение переменных через реальные os.environ
            db_url = EnvLoader.get_env_var('DATABASE_URL')
            debug = EnvLoader.get_env_var('DEBUG', 'false')
            port = EnvLoader.get_env_var_int('PORT', 3000)
            missing = EnvLoader.get_env_var('MISSING', 'default')
    
>           assert db_url == 'postgres://user:pass@host:5432/db'
E           AssertionError: assert 'test_value' == 'postgres://u...@host:5432/db'
E             
E             - postgres://user:pass@host:5432/db
E             + test_value

tests/test_30_env_loader_coverage.py:355: AssertionError
________________ TestEnvLoaderIntegration.test_static_methods_independence _________________

self = <tests.test_30_env_loader_coverage.TestEnvLoaderIntegration object at 0x7f4f6ee27250>

    def test_static_methods_independence(self):
        """Покрытие независимости статических методов от состояния класса"""
        # Статические методы должны работать независимо от _loaded флага
        EnvLoader._loaded = False
    
        with patch.dict('os.environ', {'TEST_KEY': 'test', 'INT_KEY': '42'}):
            result1 = EnvLoader.get_env_var('TEST_KEY')
>           assert result1 == 'test'
E           AssertionError: assert 'test_value' == 'test'
E             
E             - test
E             + test_value

tests/test_30_env_loader_coverage.py:398: AssertionError
================================= short test summary info ==================================
FAILED tests/test_30_env_loader_coverage.py::TestEnvLoaderGetEnvVar::test_get_env_var_with_default - AssertionError: assert 'test_value' == 'default_value'
FAILED tests/test_30_env_loader_coverage.py::TestEnvLoaderGetEnvVar::test_get_env_var_no_default - AssertionError: assert 'test_value' == ''
FAILED tests/test_30_env_loader_coverage.py::TestEnvLoaderGetEnvVar::test_get_env_var_none_default - AssertionError: assert 'test_value' is None
FAILED tests/test_30_env_loader_coverage.py::TestEnvLoaderGetEnvVar::test_get_env_var_empty_string_default - AssertionError: assert 'test_value' == ''
FAILED tests/test_30_env_loader_coverage.py::TestEnvLoaderIntegration::test_full_workflow_scenario - AssertionError: assert 'test_value' == 'postgres://u...@host:5432/db'
FAILED tests/test_30_env_loader_coverage.py::TestEnvLoaderIntegration::test_static_methods_independence - AssertionError: assert 'test_value' == 'test'
===================