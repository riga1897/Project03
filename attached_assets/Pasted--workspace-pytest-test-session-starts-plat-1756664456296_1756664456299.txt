~/workspace$ pytest
========================== test session starts ==========================
platform linux -- Python 3.11.13, pytest-8.4.1, pluggy-1.6.0
rootdir: /home/runner/workspace
configfile: pyproject.toml
plugins: mock-3.14.1, cov-6.2.1
collected 357 items                                                     

tests/test_abstract.py ........                                   [  2%]
tests/test_abstract_db_manager.py ....                            [  3%]
tests/test_api_config.py ....                                     [  4%]
tests/test_app_config.py .....                                    [  5%]
tests/test_base_api.py ......                                     [  7%]
tests/test_base_parser.py ......                                  [  9%]
tests/test_cache.py .......                                       [ 11%]
tests/test_cached_api.py FFFFF                                    [ 12%]
tests/test_db_manager.py ......F.........F...FF...                [ 19%]
tests/test_decorators.py .......                                  [ 21%]
tests/test_env_loader.py ............                             [ 24%]
tests/test_file_handlers.py ............                          [ 28%]
tests/test_get_api.py ......                                      [ 29%]
tests/test_hh_api.py .......                                      [ 31%]
tests/test_hh_api_config.py .....                                 [ 33%]
tests/test_hh_parser.py ........                                  [ 35%]
tests/test_menu_manager.py ..........                             [ 38%]
tests/test_paginator.py ......                                    [ 40%]
tests/test_postgres_saver.py .......                              [ 42%]
tests/test_salary_utils.py F.F...F.FF....FFF...F.FF.FFF.F..FF.FFF [ 52%]
FFFFFFF.F......                                                   [ 56%]
tests/test_search_utils.py ..................                     [ 61%]
tests/test_sj_api.py ........FF                                   [ 64%]
tests/test_sj_api_config.py .....                                 [ 66%]
tests/test_sj_parser.py ........                                  [ 68%]
tests/test_storage_factory.py ........                            [ 70%]
tests/test_target_companies.py .....                              [ 71%]
tests/test_ui_config.py .....                                     [ 73%]
tests/test_ui_helpers.py ...........                              [ 76%]
tests/test_unified_api.py .................                       [ 81%]
tests/test_user_interface.py ........                             [ 83%]
tests/test_vacancy_display_handler.py .........                   [ 85%]
tests/test_vacancy_formatter.py ...FFF.FFF.                       [ 89%]
tests/test_vacancy_models.py .F.FF.F.FFFFFFF                      [ 93%]
tests/test_vacancy_operations_coordinator.py ...........          [ 96%]
tests/test_vacancy_search_handler.py ......                       [ 98%]
tests/test_vacancy_stats.py .......                               [100%]

=============================== FAILURES ================================
_____________ TestCachedAPI.test_cached_api_initialization ______________

self = <workspace.tests.test_cached_api.TestCachedAPI object at 0x7fd36a9fcf50>
mock_file_cache = <MagicMock name='FileCache' id='140545986141712'>

    @patch("src.utils.cache.FileCache")
    def test_cached_api_initialization(self, mock_file_cache):
        """Тест инициализации CachedAPI"""
        mock_cache_instance = Mock()
        mock_file_cache.return_value = mock_cache_instance
    
>       api = ConcreteCachedAPI()
              ^^^^^^^^^^^^^^^^^^^
E       TypeError: Can't instantiate abstract class ConcreteCachedAPI with abstract method get_vacancies

tests/test_cached_api.py:42: TypeError
___________ TestCachedAPI.test_cached_api_with_cache_manager ____________

self = <workspace.tests.test_cached_api.TestCachedAPI object at 0x7fd36aa0b210>
mock_file_cache = <MagicMock name='FileCache' id='140545986757968'>

    @patch("src.utils.cache.FileCache")
    def test_cached_api_with_cache_manager(self, mock_file_cache):
        """Тест CachedAPI с кэш менеджером"""
        mock_cache_instance = Mock()
        mock_file_cache.return_value = mock_cache_instance
    
>       api = ConcreteCachedAPI()
              ^^^^^^^^^^^^^^^^^^^
E       TypeError: Can't instantiate abstract class ConcreteCachedAPI with abstract method get_vacancies

tests/test_cached_api.py:52: TypeError
____________ TestCachedAPI.test_cached_api_abstract_methods _____________

self = <workspace.tests.test_cached_api.TestCachedAPI object at 0x7fd36aa0b590>
mock_file_cache = <MagicMock name='FileCache' id='140545986149456'>

    @patch("src.utils.cache.FileCache")
    def test_cached_api_abstract_methods(self, mock_file_cache):
        """Тест реализации абстрактных методов CachedAPI"""
>       api = ConcreteCachedAPI()
              ^^^^^^^^^^^^^^^^^^^
E       TypeError: Can't instantiate abstract class ConcreteCachedAPI with abstract method get_vacancies

tests/test_cached_api.py:58: TypeError
_________________ TestCachedAPI.test_cache_integration __________________

self = <workspace.tests.test_cached_api.TestCachedAPI object at 0x7fd36aa0b950>
mock_file_cache = <MagicMock name='FileCache' id='140545986873680'>

    @patch("src.utils.cache.FileCache")
    def test_cache_integration(self, mock_file_cache):
        """Тест интеграции с кэшем"""
        mock_cache_instance = Mock()
        mock_cache_instance.get.return_value = None
        mock_cache_instance.set.return_value = None
        mock_file_cache.return_value = mock_cache_instance
    
>       api = ConcreteCachedAPI()
              ^^^^^^^^^^^^^^^^^^^
E       TypeError: Can't instantiate abstract class ConcreteCachedAPI with abstract method get_vacancies

tests/test_cached_api.py:73: TypeError
_________________ TestCachedAPI.test_clear_cache_method _________________

self = <workspace.tests.test_cached_api.TestCachedAPI object at 0x7fd36aa0be10>
mock_file_cache = <MagicMock name='FileCache' id='140546003414224'>

    @patch("src.utils.cache.FileCache")
    def test_clear_cache_method(self, mock_file_cache):
        """Тест метода очистки кэша"""
        mock_cache_instance = Mock()
        mock_cache_instance.clear.return_value = None
        mock_file_cache.return_value = mock_cache_instance
    
>       api = ConcreteCachedAPI()
              ^^^^^^^^^^^^^^^^^^^
E       TypeError: Can't instantiate abstract class ConcreteCachedAPI with abstract method get_vacancies

tests/test_cached_api.py:86: TypeError
_____________ TestDBManager.test_get_all_vacancies_success ______________

self = <workspace.tests.test_db_manager.TestDBManager object at 0x7fd36a503090>
mock_connect = <MagicMock name='connect' id='140545981758416'>

    @patch('src.storage.db_manager.psycopg2.connect')
    def test_get_all_vacancies_success(self, mock_connect):
        """Тест получения всех вакансий"""
        mock_connection = MockConnection()
        mock_vacancies_data = [
            {
                'title': 'Python Developer',
                'company_name': 'Test Company',
                'salary_info': '100000 - 150000 RUR',
                'url': 'https://test.com/vacancy/1',
                'vacancy_id': '1'
            }
        ]
    
        # Создаем мок для RealDictCursor
        mock_cursor = Mock()
>       mock_cursor.__enter__.return_value = mock_cursor
        ^^^^^^^^^^^^^^^^^^^^^

tests/test_db_manager.py:153: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <Mock id='140545986875664'>, name = '__enter__'

    def __getattr__(self, name):
        if name in {'_mock_methods', '_mock_unsafe'}:
            raise AttributeError(name)
        elif self._mock_methods is not None:
            if name not in self._mock_methods or name in _all_magics:
                raise AttributeError("Mock object has no attribute %r" % name)
        elif _is_magic(name):
>           raise AttributeError(name)
E           AttributeError: __enter__

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:655: AttributeError
_____________ TestDBManager.test_get_database_stats_success _____________

self = <workspace.tests.test_db_manager.TestDBManager object at 0x7fd36a50b190>
mock_connect = <MagicMock name='connect' id='140545981917520'>

    @patch('src.storage.db_manager.psycopg2.connect')
    def test_get_database_stats_success(self, mock_connect):
        """Тест получения статистики базы данных"""
        mock_connection = MockConnection()
    
        # Мок для RealDictCursor
        mock_cursor = Mock()
>       mock_cursor.__enter__.return_value = mock_cursor
        ^^^^^^^^^^^^^^^^^^^^^

tests/test_db_manager.py:278: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <Mock id='140545981770000'>, name = '__enter__'

    def __getattr__(self, name):
        if name in {'_mock_methods', '_mock_unsafe'}:
            raise AttributeError(name)
        elif self._mock_methods is not None:
            if name not in self._mock_methods or name in _all_magics:
                raise AttributeError("Mock object has no attribute %r" % name)
        elif _is_magic(name):
>           raise AttributeError(name)
E           AttributeError: __enter__

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:655: AttributeError
____________ TestDBManager.test_filter_companies_by_targets _____________

self = <workspace.tests.test_db_manager.TestDBManager object at 0x7fd36a518c10>
mock_connect = <MagicMock name='connect' id='140545978195024'>

    @patch('src.storage.db_manager.psycopg2.connect')
    def test_filter_companies_by_targets(self, mock_connect):
        """Тест фильтрации компаний по целевым"""
        mock_connection = MockConnection()
        mock_connection.cursor_instance.set_results([("123", "Яндекс")])
        mock_connect.return_value = mock_connection
    
        api_companies = [
            {"id": "123", "name": "Яндекс"},
            {"id": "456", "name": "Random Company"}
        ]
    
>       result = self.db_manager.filter_companies_by_targets(api_companies)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_db_manager.py:354: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
src/storage/db_manager.py:845: in filter_companies_by_targets
    execute_values(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

cur = <workspace.tests.test_db_manager.MockCursor object at 0x7fd3691af150>
sql = 'INSERT INTO temp_api_companies (company_id, company_name) VALUES %s'
argslist = [('123', 'Яндекс'), ('456', 'Random Company')]
template = None, page_size = 1000, fetch = False

    def execute_values(cur, sql, argslist, template=None, page_size=100, fetch=False):
        '''Execute a statement using :sql:`VALUES` with a sequence of parameters.
    
        :param cur: the cursor to use to execute the query.
    
        :param sql: the query to execute. It must contain a single ``%s``
            placeholder, which will be replaced by a `VALUES list`__.
            Example: ``"INSERT INTO mytable (id, f1, f2) VALUES %s"``.
    
        :param argslist: sequence of sequences or dictionaries with the arguments
            to send to the query. The type and content must be consistent with
            *template*.
    
        :param template: the snippet to merge to every item in *argslist* to
            compose the query.
    
            - If the *argslist* items are sequences it should contain positional
              placeholders (e.g. ``"(%s, %s, %s)"``, or ``"(%s, %s, 42)``" if there
              are constants value...).
    
            - If the *argslist* items are mappings it should contain named
              placeholders (e.g. ``"(%(id)s, %(f1)s, 42)"``).
    
            If not specified, assume the arguments are sequence and use a simple
            positional template (i.e.  ``(%s, %s, ...)``), with the number of
            placeholders sniffed by the first element in *argslist*.
    
        :param page_size: maximum number of *argslist* items to include in every
            statement. If there are more items the function will execute more than
            one statement.
    
        :param fetch: if `!True` return the query results into a list (like in a
            `~cursor.fetchall()`).  Useful for queries with :sql:`RETURNING`
            clause.
    
        .. __: https://www.postgresql.org/docs/current/static/queries-values.html
    
        After the execution of the function the `cursor.rowcount` property will
        **not** contain a total result.
    
        While :sql:`INSERT` is an obvious candidate for this function it is
        possible to use it with other statements, for example::
    
            >>> cur.execute(
            ... "create table test (id int primary key, v1 int, v2 int)")
    
            >>> execute_values(cur,
            ... "INSERT INTO test (id, v1, v2) VALUES %s",
            ... [(1, 2, 3), (4, 5, 6), (7, 8, 9)])
    
            >>> execute_values(cur,
            ... """UPDATE test SET v1 = data.v1 FROM (VALUES %s) AS data (id, v1)
            ... WHERE test.id = data.id""",
            ... [(1, 20), (4, 50)])
    
            >>> cur.execute("select * from test order by id")
            >>> cur.fetchall()
            [(1, 20, 3), (4, 50, 6), (7, 8, 9)])
    
        '''
        from psycopg2.sql import Composable
        if isinstance(sql, Composable):
            sql = sql.as_string(cur)
    
        # we can't just use sql % vals because vals is bytes: if sql is bytes
        # there will be some decoding error because of stupid codec used, and Py3
        # doesn't implement % on bytes.
        if not isinstance(sql, bytes):
>           sql = sql.encode(_ext.encodings[cur.connection.encoding])
                                            ^^^^^^^^^^^^^^
E           AttributeError: 'MockCursor' object has no attribute 'connection'

.pythonlibs/lib/python3.11/site-packages/psycopg2/extras.py:1287: AttributeError
_____________ TestDBManager.test_analyze_api_data_with_sql ______________

self = <workspace.tests.test_db_manager.TestDBManager object at 0x7fd36a519290>
mock_connect = <MagicMock name='connect' id='140545982112528'>

    @patch('src.storage.db_manager.psycopg2.connect')
    def test_analyze_api_data_with_sql(self, mock_connect):
        """Тест анализа данных API с помощью SQL"""
        mock_connection = MockConnection()
    
        # Мок для RealDictCursor
        mock_cursor = Mock()
>       mock_cursor.__enter__.return_value = mock_cursor
        ^^^^^^^^^^^^^^^^^^^^^

tests/test_db_manager.py:365: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <Mock id='140545986801744'>, name = '__enter__'

    def __getattr__(self, name):
        if name in {'_mock_methods', '_mock_unsafe'}:
            raise AttributeError(name)
        elif self._mock_methods is not None:
            if name not in self._mock_methods or name in _all_magics:
                raise AttributeError("Mock object has no attribute %r" % name)
        elif _is_magic(name):
>           raise AttributeError(name)
E           AttributeError: __enter__

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:655: AttributeError
______________ TestSalaryUtils.test_normalize_salary_dict _______________

self = <workspace.tests.test_salary_utils.TestSalaryUtils object at 0x7fd36990be50>

    def test_normalize_salary_dict(self):
        """Тест нормализации зарплаты из словаря"""
        salary_data = {"from": 100000, "to": 150000, "currency": "RUR"}
>       result = normalize_salary(salary_data)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_salary_utils.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

salary_str = {'currency': 'RUR', 'from': 100000, 'to': 150000}

    def normalize_salary(salary_str):
        """Нормализация строки зарплаты"""
        if not salary_str:
            return None
>       return salary_str.strip().replace(" ", "").lower()
               ^^^^^^^^^^^^^^^^
E       AttributeError: 'dict' object has no attribute 'strip'

tests/test_salary_utils.py:84: AttributeError
___________ TestSalaryUtils.test_normalize_salary_empty_dict ____________

self = <workspace.tests.test_salary_utils.TestSalaryUtils object at 0x7fd369dc9ed0>

    def test_normalize_salary_empty_dict(self):
        """Тест нормализации пустого словаря"""
        result = normalize_salary({})
>       assert isinstance(result, dict)
E       assert False
E        +  where False = isinstance(None, dict)

tests/test_salary_utils.py:107: AssertionError
_____________ TestSalaryUtils.test_format_salary_range_none _____________

self = <workspace.tests.test_salary_utils.TestSalaryUtils object at 0x7fd3691bc110>

    def test_format_salary_range_none(self):
        """Тест форматирования пустой зарплаты"""
        result = format_salary_range(None, None, "RUR")
>       assert result == "Не указана"
E       AssertionError: assert 'Зарплата не указана' == 'Не указана'
E         
E         - Не указана
E         + Зарплата не указана

tests/test_salary_utils.py:134: AssertionError
__________ TestSalaryUtils.test_parse_salary_string_from_only ___________

self = <workspace.tests.test_salary_utils.TestSalaryUtils object at 0x7fd3691bda50>

    def test_parse_salary_string_from_only(self):
        """Тест парсинга строки с минимальной зарплатой"""
        result = parse_salary_string("от 100000 RUR")
        assert isinstance(result, dict)
        assert result["from"] == 100000
>       assert result["to"] is None
E       assert 150000 is None

tests/test_salary_utils.py:149: AssertionError
___________ TestSalaryUtils.test_parse_salary_string_invalid ____________

self = <workspace.tests.test_salary_utils.TestSalaryUtils object at 0x7fd3691be310>

    def test_parse_salary_string_invalid(self):
        """Тест парсинга некорректной строки"""
        result = parse_salary_string("invalid salary")
>       assert result is None
E       AssertionError: assert {'currency': 'RUR', 'from': 100000, 'to': 150000} is None

tests/test_salary_utils.py:154: AssertionError
______________ TestSalaryUtils.test_compare_salaries_equal ______________

self = <workspace.tests.test_salary_utils.TestSalaryUtils object at 0x7fd369199050>

    def test_compare_salaries_equal(self):
        """Тест сравнения одинаковых зарплат"""
        salary1 = {"from": 100000, "to": 150000, "currency": "RUR"}
        salary2 = {"from": 100000, "to": 150000, "currency": "RUR"}
>       result = compare_salaries(salary1, salary2)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_salary_utils.py:180: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

salary1 = {'currency': 'RUR', 'from': 100000, 'to': 150000}
salary2 = {'currency': 'RUR', 'from': 100000, 'to': 150000}

    def compare_salaries(salary1, salary2):
        """Сравнение зарплат"""
>       return salary1 > salary2
               ^^^^^^^^^^^^^^^^^
E       TypeError: '>' not supported between instances of 'dict' and 'dict'

tests/test_salary_utils.py:52: TypeError
__________ TestSalaryUtils.test_compare_salaries_first_higher ___________

self = <workspace.tests.test_salary_utils.TestSalaryUtils object at 0x7fd369199390>

    def test_compare_salaries_first_higher(self):
        """Тест сравнения зарплат - первая выше"""
        salary1 = {"from": 150000, "to": 200000, "currency": "RUR"}
        salary2 = {"from": 100000, "to": 150000, "currency": "RUR"}
>       result = compare_salaries(salary1, salary2)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_salary_utils.py:187: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

salary1 = {'currency': 'RUR', 'from': 150000, 'to': 200000}
salary2 = {'currency': 'RUR', 'from': 100000, 'to': 150000}

    def compare_salaries(salary1, salary2):
        """Сравнение зарплат"""
>       return salary1 > salary2
               ^^^^^^^^^^^^^^^^^
E       TypeError: '>' not supported between instances of 'dict' and 'dict'

tests/test_salary_utils.py:52: TypeError
__________ TestSalaryUtils.test_compare_salaries_second_higher __________

self = <workspace.tests.test_salary_utils.TestSalaryUtils object at 0x7fd369199790>

    def test_compare_salaries_second_higher(self):
        """Тест сравнения зарплат - вторая выше"""
        salary1 = {"from": 100000, "to": 150000, "currency": "RUR"}
        salary2 = {"from": 150000, "to": 200000, "currency": "RUR"}
>       result = compare_salaries(salary1, salary2)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_salary_utils.py:194: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

salary1 = {'currency': 'RUR', 'from': 100000, 'to': 150000}
salary2 = {'currency': 'RUR', 'from': 150000, 'to': 200000}

    def compare_salaries(salary1, salary2):
        """Сравнение зарплат"""
>       return salary1 > salary2
               ^^^^^^^^^^^^^^^^^
E       TypeError: '>' not supported between instances of 'dict' and 'dict'

tests/test_salary_utils.py:52: TypeError
________ TestSalaryUtils.test_validate_salary_data_invalid_range ________

self = <workspace.tests.test_salary_utils.TestSalaryUtils object at 0x7fd36919ae10>

    def test_validate_salary_data_invalid_range(self):
        """Тест валидации некорректного диапазона зарплаты"""
        salary_data = {"from": 150000, "to": 100000, "currency": "RUR"}
        result = validate_salary_data(salary_data)
>       assert result is False
E       assert True is False

tests/test_salary_utils.py:217: AssertionError
_________ TestSalaryUtils.test_get_salary_statistics_empty_list _________

self = <workspace.tests.test_salary_utils.TestSalaryUtils object at 0x7fd36990b6d0>

    def test_get_salary_statistics_empty_list(self):
        """Тест получения статистики для пустого списка"""
        result = get_salary_statistics([])
        assert isinstance(result, dict)
>       assert result["count"] == 0
               ^^^^^^^^^^^^^^^
E       KeyError: 'count'

tests/test_salary_utils.py:228: KeyError
_________ TestSalaryUtils.test_get_salary_statistics_with_data __________

self = <workspace.tests.test_salary_utils.TestSalaryUtils object at 0x7fd36919a250>

    def test_get_salary_statistics_with_data(self):
        """Тест получения статистики с данными"""
        salaries = [
            {"from": 100000, "to": 150000, "currency": "RUR"},
            {"from": 120000, "to": 180000, "currency": "RUR"},
            {"from": 80000, "to": 120000, "currency": "RUR"}
        ]
        result = get_salary_statistics(salaries)
        assert isinstance(result, dict)
>       assert result["count"] == 3
               ^^^^^^^^^^^^^^^
E       KeyError: 'count'

tests/test_salary_utils.py:240: KeyError
_______ TestSalaryUtils.test_filter_by_salary_range_partial_match _______

self = <workspace.tests.test_salary_utils.TestSalaryUtils object at 0x7fd369198890>

    def test_filter_by_salary_range_partial_match(self):
        """Тест фильтрации - частичное соответствие"""
        vacancies = [
            Mock(salary=Mock(salary_from=100000, salary_to=150000)),
            Mock(salary=Mock(salary_from=200000, salary_to=250000))
        ]
        result = filter_by_salary_range(vacancies, min_salary=90000, max_salary=180000)
>       assert len(result) == 1
E       AssertionError: assert 2 == 1
E        +  where 2 = len([<Mock id='140545982479504'>, <Mock id='140545982475792'>])

tests/test_salary_utils.py:261: AssertionError
_________ TestSalaryUtils.test_filter_by_salary_range_no_match __________

self = <workspace.tests.test_salary_utils.TestSalaryUtils object at 0x7fd36919b090>

    def test_filter_by_salary_range_no_match(self):
        """Тест фильтрации - нет соответствий"""
        vacancies = [
            Mock(salary=Mock(salary_from=50000, salary_to=80000)),
            Mock(salary=Mock(salary_from=60000, salary_to=90000))
        ]
        result = filter_by_salary_range(vacancies, min_salary=100000, max_salary=200000)
>       assert len(result) == 0
E       AssertionError: assert 2 == 0
E        +  where 2 = len([<Mock id='140545986880848'>, <Mock id='140545986877712'>])

tests/test_salary_utils.py:270: AssertionError
______________ TestSalaryHelper.test_normalize_salary_dict ______________

self = <workspace.tests.test_salary_utils.TestSalaryHelper object at 0x7fd36918e850>

    def test_normalize_salary_dict(self):
        """Тест нормализации зарплаты из словаря"""
        salary_data = {"from": 100000, "to": 150000, "currency": "USD"}
>       result = normalize_salary(salary_data)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_salary_utils.py:279: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

salary_str = {'currency': 'USD', 'from': 100000, 'to': 150000}

    def normalize_salary(salary_str):
        """Нормализация строки зарплаты"""
        if not salary_str:
            return None
>       return salary_str.strip().replace(" ", "").lower()
               ^^^^^^^^^^^^^^^^
E       AttributeError: 'dict' object has no attribute 'strip'

tests/test_salary_utils.py:84: AttributeError
________ TestSalaryHelper.test_format_salary_display_full_range _________

self = <workspace.tests.test_salary_utils.TestSalaryHelper object at 0x7fd36918df90>

    def test_format_salary_display_full_range(self):
        """Тест форматирования полного диапазона"""
        result = format_salary_range(100000, 150000, "RUR")
>       assert "100000 - 150000 RUR" == result
E       AssertionError: assert '100000 - 150000 RUR' == '100000-150000 RUR'
E         
E         - 100000-150000 RUR
E         + 100000 - 150000 RUR
E         ?       + +

tests/test_salary_utils.py:292: AssertionError
___________ TestSalaryHelper.test_format_salary_display_none ____________

self = <workspace.tests.test_salary_utils.TestSalaryHelper object at 0x7fd36918fc90>

    def test_format_salary_display_none(self):
        """Тест форматирования без данных"""
        result = format_salary_range(None, None, "RUR")
>       assert "Не указана" == result
E       AssertionError: assert 'Не указана' == 'Зарплата не указана'
E         
E         - Зарплата не указана
E         + Не указана

tests/test_salary_utils.py:307: AssertionError
_______ TestSalaryHelper.test_calculate_average_salary_with_data ________

self = <workspace.tests.test_salary_utils.TestSalaryHelper object at 0x7fd36918f310>

    def test_calculate_average_salary_with_data(self):
        """Тест расчета средней зарплаты с данными"""
        mock_vacancy1 = Mock()
        mock_vacancy1.salary = Mock(salary_from=100000, salary_to=150000)
    
        mock_vacancy2 = Mock()
        mock_vacancy2.salary = Mock(salary_from=120000, salary_to=180000)
    
        vacancies = [mock_vacancy1, mock_vacancy2]
        result = calculate_salary_average(vacancies)
    
        # Средняя должна быть между 125000 и 150000
        assert result is not None
>       assert 120000 <= result <= 160000
               ^^^^^^^^^^^^^^^^^^^^^^^^^^
E       TypeError: '<=' not supported between instances of 'int' and 'list'

tests/test_salary_utils.py:322: TypeError
_____ TestSalaryHelper.test_calculate_average_salary_no_salary_data _____

self = <workspace.tests.test_salary_utils.TestSalaryHelper object at 0x7fd36918c8d0>

    def test_calculate_average_salary_no_salary_data(self):
        """Тест расчета средней зарплаты без данных о зарплате"""
        mock_vacancy = Mock()
        mock_vacancy.salary = None
    
        vacancies = [mock_vacancy]
        result = calculate_salary_average(vacancies)
    
>       assert result is None
E       AssertionError: assert [<Mock id='140546006406096'>] is None

tests/test_salary_utils.py:337: AssertionError
__________ TestSalaryFilter.test_salary_filter_initialization ___________

self = <workspace.tests.test_salary_utils.TestSalaryFilter object at 0x7fd36918cf50>

    def test_salary_filter_initialization(self):
        """Тест инициализации фильтра"""
>       filter_obj = SalaryFilter(min_salary=100000, max_salary=200000)
                     ^^^^^^^^^^^^
E       NameError: name 'SalaryFilter' is not defined

tests/test_salary_utils.py:345: NameError
__________ TestSalaryFilter.test_filter_vacancies_within_range __________

self = <workspace.tests.test_salary_utils.TestSalaryFilter object at 0x7fd369180750>

    def test_filter_vacancies_within_range(self):
        """Тест фильтрации вакансий в диапазоне"""
        mock_vacancy = Mock()
        mock_vacancy.salary = Mock(salary_from=120000, salary_to=180000)
    
        vacancies = [mock_vacancy]
>       filter_obj = SalaryFilter(min_salary=100000, max_salary=200000)
                     ^^^^^^^^^^^^
E       NameError: name 'SalaryFilter' is not defined

tests/test_salary_utils.py:355: NameError
_________ TestSalaryFilter.test_filter_vacancies_outside_range __________

self = <workspace.tests.test_salary_utils.TestSalaryFilter object at 0x7fd369180a50>

    def test_filter_vacancies_outside_range(self):
        """Тест фильтрации вакансий вне диапазона"""
        mock_vacancy = Mock()
        mock_vacancy.salary = Mock(salary_from=50000, salary_to=80000)
    
        vacancies = [mock_vacancy]
>       filter_obj = SalaryFilter(min_salary=100000, max_salary=200000)
                     ^^^^^^^^^^^^
E       NameError: name 'SalaryFilter' is not defined

tests/test_salary_utils.py:367: NameError
___________ TestSalaryFilter.test_filter_vacancies_no_salary ____________

self = <workspace.tests.test_salary_utils.TestSalaryFilter object at 0x7fd369181290>

    def test_filter_vacancies_no_salary(self):
        """Тест фильтрации вакансий без зарплаты"""
        mock_vacancy = Mock()
        mock_vacancy.salary = None
    
        vacancies = [mock_vacancy]
>       filter_obj = SalaryFilter(min_salary=100000, max_salary=200000)
                     ^^^^^^^^^^^^
E       NameError: name 'SalaryFilter' is not defined

tests/test_salary_utils.py:378: NameError
___________ TestSalaryFilter.test_filter_vacancies_empty_list ___________

self = <workspace.tests.test_salary_utils.TestSalaryFilter object at 0x7fd369181b50>

    def test_filter_vacancies_empty_list(self):
        """Тест фильтрации пустого списка"""
>       filter_obj = SalaryFilter(min_salary=100000, max_salary=200000)
                     ^^^^^^^^^^^^
E       NameError: name 'SalaryFilter' is not defined

tests/test_salary_utils.py:385: NameError
___________ TestSalaryFilter.test_extract_salary_value_range ____________

self = <workspace.tests.test_salary_utils.TestSalaryFilter object at 0x7fd369182250>

    def test_extract_salary_value_range(self):
        """Тест извлечения значения зарплаты из диапазона"""
>       filter_obj = SalaryFilter()
                     ^^^^^^^^^^^^
E       NameError: name 'SalaryFilter' is not defined

tests/test_salary_utils.py:392: NameError
_________ TestSalaryFilter.test_extract_salary_value_from_only __________

self = <workspace.tests.test_salary_utils.TestSalaryFilter object at 0x7fd369182450>

    def test_extract_salary_value_from_only(self):
        """Тест извлечения значения зарплаты только с минимумом"""
>       filter_obj = SalaryFilter()
                     ^^^^^^^^^^^^
E       NameError: name 'SalaryFilter' is not defined

tests/test_salary_utils.py:400: NameError
__________ TestSalaryFilter.test_extract_salary_value_to_only ___________

self = <workspace.tests.test_salary_utils.TestSalaryFilter object at 0x7fd369182310>

    def test_extract_salary_value_to_only(self):
        """Тест извлечения значения зарплаты только с максимумом"""
>       filter_obj = SalaryFilter()
                     ^^^^^^^^^^^^
E       NameError: name 'SalaryFilter' is not defined

tests/test_salary_utils.py:408: NameError
____________ TestSalaryFilter.test_extract_salary_value_none ____________

self = <workspace.tests.test_salary_utils.TestSalaryFilter object at 0x7fd369183590>

    def test_extract_salary_value_none(self):
        """Тест извлечения значения зарплаты без данных"""
>       filter_obj = SalaryFilter()
                     ^^^^^^^^^^^^
E       NameError: name 'SalaryFilter' is not defined

tests/test_salary_utils.py:416: NameError
______ TestSalaryUtilsEdgeCases.test_calculate_salary_average_zero ______

self = <workspace.tests.test_salary_utils.TestSalaryUtilsEdgeCases object at 0x7fd369198e50>

    def test_calculate_salary_average_zero(self):
        """Тест расчета средней зарплаты с нулевыми значениями"""
        result = calculate_salary_average(0, 100000)
>       assert result == 50000
E       assert 100000 == 50000

tests/test_salary_utils.py:434: AssertionError
________________ TestSuperJobAPI.test_api_error_handling ________________

self = <workspace.tests.test_sj_api.TestSuperJobAPI object at 0x7fd3691388d0>
mock_paginator = <MagicMock name='Paginator' id='140545981849168'>
mock_api_config = <MagicMock name='APIConfig' id='140545982004752'>
mock_cache = <MagicMock name='FileCache' id='140545978304848'>
mock_connector = <MagicMock name='APIConnector' id='140545978316368'>

    @patch('src.api_modules.sj_api.APIConnector')
    @patch('src.utils.cache.FileCache')
    @patch('src.api_modules.sj_api.APIConfig')
    @patch('src.api_modules.sj_api.Paginator')
    def test_api_error_handling(self, mock_paginator, mock_api_config, mock_cache, mock_connector):
        """Тест обработки ошибок API"""
        mock_config = Mock()
        mock_config.superjob_base_url = "https://api.superjob.ru"
        mock_config.superjob_api_key = "test_key"
        mock_api_config.return_value = mock_config
    
        # Мок ошибки соединения
        mock_connector_instance = Mock()
        mock_connector_instance.get.side_effect = Exception("API Error")
        mock_connector.return_value = mock_connector_instance
    
        api = SuperJobAPI()
    
        # Проверяем, что API создается без ошибок
        assert api is not None
    
        # Этот тест кажется неполным, так как он не вызывает метод, который должен вызвать ошибку
        # Например, api.get_vacancies("Python")
        # Для полноты, предположим, что мы хотим протестировать get_vacancies
>       with pytest.raises(Exception, match="API Error"):
E       Failed: DID NOT RAISE <class 'Exception'>

tests/test_sj_api.py:227: Failed
--------------------------- Captured log call ---------------------------
WARNING  root:cached_api.py:100 Ошибка кэша памяти: unhashable type: 'dict'. Переключаемся на файловый кэш
WARNING  src.api_modules.cached_api:cached_api.py:125 Данные неполные или повреждены, кэширование пропущено для sj
ERROR    src.api_modules.sj_api:sj_api.py:198 Failed to get vacancies: '>' not supported between instances of 'Mock' and 'int'
________________ TestSuperJobAPI.test_get_vacancies_page ________________

self = <workspace.tests.test_sj_api.TestSuperJobAPI object at 0x7fd36913a810>
mock_paginator = <MagicMock name='Paginator' id='140545964459728'>
mock_api_config = <MagicMock name='APIConfig' id='140545964464400'>
mock_cache = <MagicMock name='FileCache' id='140545964465360'>
mock_connector = <MagicMock name='APIConnector' id='140545964703888'>

    @patch('src.api_modules.sj_api.APIConnector')
    @patch('src.utils.cache.FileCache')
    @patch('src.api_modules.sj_api.APIConfig')
    @patch('src.api_modules.sj_api.Paginator')
    def test_get_vacancies_page(self, mock_paginator, mock_api_config, mock_cache, mock_connector):
        """Тест получения страницы вакансий"""
        mock_config = Mock()
        mock_config.superjob_base_url = "https://api.superjob.ru"
        mock_config.superjob_api_key = "test_key"
        mock_api_config.return_value = mock_config
    
        mock_connector_instance = Mock()
        mock_connector.return_value = mock_connector_instance
        mock_connector_instance.get.return_value = {"objects": [], "total": 0}
    
        mock_paginator_instance = Mock()
        mock_paginator_instance.items = []
        mock_paginator_instance.found = 0
        mock_paginator.return_value = mock_paginator_instance
    
        api = SuperJobAPI()
    
        # Мокируем метод get_vacancies_page
>       with patch.object(api, '_get_vacancies_page', return_value={"items": [], "found": 0}):

tests/test_sj_api.py:254: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1446: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <unittest.mock._patch object at 0x7fd3699e1950>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <src.api_modules.sj_api.SuperJobAPI object at 0x7fd36952bbd0> does not have the attribute '_get_vacancies_page'

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1419: AttributeError
________ TestVacancyFormatter.test_format_vacancy_info_no_salary ________

self = <workspace.tests.test_vacancy_formatter.TestVacancyFormatter object at 0x7fd3695aed90>

    def test_format_vacancy_info_no_salary(self):
        """Тест форматирования вакансии без зарплаты"""
        vacancy = Vacancy(
            vacancy_id="124",
            title="Java Developer",
            url="https://test.com/vacancy/124",
            source="hh.ru",
        )
    
        formatter = VacancyFormatter()
        result = formatter.format_vacancy_info(vacancy)
    
        assert "Java Developer" in result
>       assert "не указана" in result.lower() or "отсутствует" in result.lower()
E       AssertionError: assert ('не указана' in 'id: 124\nназвание: java developer\nисточник: hh.ru\nссылка: https://test.com/vacancy/124' or 'отсутствует' in 'id: 124\nназвание: java developer\nисточник: hh.ru\nссылка: https://test.com/vacancy/124')
E        +  where 'id: 124\nназвание: java developer\nисточник: hh.ru\nссылка: https://test.com/vacancy/124' = <built-in method lower of str object at 0x7fd3699fe430>()
E        +    where <built-in method lower of str object at 0x7fd3699fe430> = 'ID: 124\nНазвание: Java Developer\nИсточник: hh.ru\nСсылка: https://test.com/vacancy/124'.lower
E        +  and   'id: 124\nназвание: java developer\nисточник: hh.ru\nссылка: https://test.com/vacancy/124' = <built-in method lower of str object at 0x7fd3699fe430>()
E        +    where <built-in method lower of str object at 0x7fd3699fe430> = 'ID: 124\nНазвание: Java Developer\nИсточник: hh.ru\nСсылка: https://test.com/vacancy/124'.lower

tests/test_vacancy_formatter.py:170: AssertionError
__________ TestVacancyFormatter.test_format_vacancy_info_full ___________

self = <workspace.tests.test_vacancy_formatter.TestVacancyFormatter object at 0x7fd3695ae450>

    def test_format_vacancy_info_full(self):
        """Тест полного форматирования вакансии"""
        salary_dict = {
            "from": 100000,
            "to": 150000,
            "currency": "RUR"
        }
        employer_dict = {"name": "Test Company", "id": "123"}
    
        vacancy = Vacancy(
            vacancy_id="123",
            title="Python Developer",
            url="https://test.com/vacancy/123",
            source="hh.ru",
            salary=salary_dict,
            employer=employer_dict,
            area="Москва",
            experience="От 1 года до 3 лет",
            employment="Полная занятость",
        )
    
        formatter = VacancyFormatter()
        result = formatter.format_vacancy_info(vacancy)
    
        assert "Python Developer" in result
        assert "Test Company" in result
        # Проверяем отформатированные числа
        assert "100 000" in result or "150 000" in result
>       assert "Москва" in result
E       AssertionError: assert 'Москва' in 'ID: 123\nНазвание: Python Developer\nКомпания: Test Company\nЗарплата: от 100 000 до 150 000 руб. в месяц\nОпыт: От 1 года до 3 лет\nЗанятость: Полная занятость\nИсточник: hh.ru\nСсылка: https://test.com/vacancy/123'

tests/test_vacancy_formatter.py:200: AssertionError
_____________ TestVacancyFormatter.test_format_salary_range _____________

self = <workspace.tests.test_vacancy_formatter.TestVacancyFormatter object at 0x7fd3695ae810>

    def test_format_salary_range(self):
        """Тест форматирования диапазона зарплаты"""
        formatter = VacancyFormatter()
    
        # Полный диапазон
>       result = formatter.format_salary(100000, 150000, "RUR")
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       TypeError: VacancyFormatter.format_salary() takes 2 positional arguments but 4 were given

tests/test_vacancy_formatter.py:207: TypeError
____________ TestVacancyFormatter.test_format_employer_info _____________

self = <workspace.tests.test_vacancy_formatter.TestVacancyFormatter object at 0x7fd3695ac450>

    def test_format_employer_info(self):
        """Тест форматирования информации о работодателе"""
        formatter = VacancyFormatter()
    
        # Словарь с данными работодателя
        employer_dict = {"name": "Test Company", "id": "123"}
>       result = formatter.format_employer(employer_dict)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: 'VacancyFormatter' object has no attribute 'format_employer'

tests/test_vacancy_formatter.py:240: AttributeError
____________ TestVacancyFormatter.test_format_location_info _____________

self = <workspace.tests.test_vacancy_formatter.TestVacancyFormatter object at 0x7fd3695bb0d0>

    def test_format_location_info(self):
        """Тест форматирования информации о местоположении"""
        formatter = VacancyFormatter()
    
        # Словарь с данными местоположения
        area_dict = {"name": "Москва", "id": "1"}
>       result = formatter.format_location(area_dict)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: 'VacancyFormatter' object has no attribute 'format_location'

tests/test_vacancy_formatter.py:257: AttributeError
___________ TestVacancyFormatter.test_format_currency_symbol ____________

self = <workspace.tests.test_vacancy_formatter.TestVacancyFormatter object at 0x7fd3695dbdd0>

    def test_format_currency_symbol(self):
        """Тест форматирования символов валют"""
        formatter = VacancyFormatter()
    
>       assert "руб." in formatter.get_currency_symbol("RUR")
                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: 'VacancyFormatter' object has no attribute 'get_currency_symbol'

tests/test_vacancy_formatter.py:272: AttributeError
_________________ TestVacancy.test_vacancy_with_salary __________________

self = <workspace.tests.test_vacancy_models.TestVacancy object at 0x7fd3695ad8d0>

    def test_vacancy_with_salary(self):
        """Тест создания вакансии с зарплатой"""
>       salary = Salary(from_amount=100000, to_amount=150000, currency="RUR")
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       TypeError: Salary.__init__() got an unexpected keyword argument 'from_amount'

tests/test_vacancy_models.py:36: TypeError
__________________ TestVacancy.test_vacancy_comparison __________________

self = <workspace.tests.test_vacancy_models.TestVacancy object at 0x7fd3695a2d10>

    def test_vacancy_comparison(self):
        """Тест сравнения вакансий"""
        vacancy1 = Vacancy("123", "Python Developer", "https://test.com", "hh.ru")
        vacancy2 = Vacancy("123", "Python Developer", "https://test.com", "hh.ru")
        vacancy3 = Vacancy("124", "Java Developer", "https://test2.com", "hh.ru")
    
>       assert vacancy1 == vacancy2
E       assert <src.vacancies.models.Vacancy object at 0x7fd368447c70> == <src.vacancies.models.Vacancy object at 0x7fd368444d50>

tests/test_vacancy_models.py:69: AssertionError
_____________________ TestVacancy.test_vacancy_hash _____________________

self = <workspace.tests.test_vacancy_models.TestVacancy object at 0x7fd3695a1990>

    def test_vacancy_hash(self):
        """Тест хэширования вакансий"""
        vacancy1 = Vacancy("123", "Python Developer", "https://test.com", "hh.ru")
        vacancy2 = Vacancy("123", "Python Developer", "https://test.com", "hh.ru")
    
>       assert hash(vacancy1) == hash(vacancy2)
E       assert 1544201762269406205 == -8256739082870535888
E        +  where 1544201762269406205 = hash(<src.vacancies.models.Vacancy object at 0x7fd36845c6d0>)
E        +  and   -8256739082870535888 = hash(<src.vacancies.models.Vacancy object at 0x7fd36845c940>)

tests/test_vacancy_models.py:77: AssertionError
_____________________ TestVacancy.test_vacancy_repr _____________________

self = <workspace.tests.test_vacancy_models.TestVacancy object at 0x7fd3695a2990>

    def test_vacancy_repr(self):
        """Тест представления Vacancy для разработчика"""
        vacancy = Vacancy("123", "Python Developer", "https://test.com", "hh.ru")
        repr_str = repr(vacancy)
        assert "Vacancy" in repr_str
>       assert "123" in repr_str
E       AssertionError: assert '123' in '<src.vacancies.models.Vacancy object at 0x7fd3699b3c70>'

tests/test_vacancy_models.py:98: AssertionError
___________________ TestVacancy.test_vacancy_to_dict ____________________

self = <workspace.tests.test_vacancy_models.TestVacancy object at 0x7fd3695a3110>

    def test_vacancy_to_dict(self):
        """Тест преобразования вакансии в словарь"""
        # Создаем зарплату с правильными атрибутами
>       salary = Salary(from_amount=100000, to_amount=150000, currency="RUR")
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       TypeError: Salary.__init__() got an unexpected keyword argument 'from_amount'

tests/test_vacancy_models.py:120: TypeError
______________ TestVacancy.test_vacancy_salary_properties _______________

self = <workspace.tests.test_vacancy_models.TestVacancy object at 0x7fd3695a3910>

    def test_vacancy_salary_properties(self):
        """Тест свойств зарплаты вакансии"""
>       salary = Salary(from_amount=100000, to_amount=150000, currency="RUR")
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       TypeError: Salary.__init__() got an unexpected keyword argument 'from_amount'

tests/test_vacancy_models.py:172: TypeError
_____________ TestVacancy.test_vacancy_employer_properties ______________

self = <workspace.tests.test_vacancy_models.TestVacancy object at 0x7fd3695a02d0>

    def test_vacancy_employer_properties(self):
        """Тест свойств работодателя вакансии"""
        employer = {"name": "Test Company", "id": "1"}
        vacancy = Vacancy(
            vacancy_id="123",
            title="Python Developer",
            url="https://test.com",
            source="hh.ru",
            employer=employer,
        )
    
>       assert vacancy.get_employer_name() == "Test Company"
               ^^^^^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: 'Vacancy' object has no attribute 'get_employer_name'

tests/test_vacancy_models.py:198: AttributeError
__________________ TestVacancy.test_vacancy_validation __________________

self = <workspace.tests.test_vacancy_models.TestVacancy object at 0x7fd3695a0290>

    def test_vacancy_validation(self):
        """Тест валидации данных вакансии"""
        # Валидная вакансия
        valid_vacancy = Vacancy("123", "Python Developer", "https://test.com", "hh.ru")
>       assert valid_vacancy.is_valid() is True
               ^^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: 'Vacancy' object has no attribute 'is_valid'

tests/test_vacancy_models.py:207: AttributeError
_________________ TestVacancy.test_vacancy_update_data __________________

self = <workspace.tests.test_vacancy_models.TestVacancy object at 0x7fd3695a0f90>

    def test_vacancy_update_data(self):
        """Тест обновления данных вакансии"""
        vacancy = Vacancy("123", "Python Developer", "https://test.com", "hh.ru")
    
        new_data = {
            "description": "New description",
            "area": "Москва",
            "experience": "От 1 года до 3 лет",
        }
    
>       vacancy.update_from_dict(new_data)
        ^^^^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: 'Vacancy' object has no attribute 'update_from_dict'

tests/test_vacancy_models.py:227: AttributeError
______________ TestVacancy.test_vacancy_source_formatting _______________

self = <workspace.tests.test_vacancy_models.TestVacancy object at 0x7fd3695a0b90>

    def test_vacancy_source_formatting(self):
        """Тест форматирования источника вакансии"""
        hh_vacancy = Vacancy("123", "Python Developer", "https://test.com", "hh.ru")
>       assert hh_vacancy.get_formatted_source() == "HH.RU"
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: 'Vacancy' object has no attribute 'get_formatted_source'

tests/test_vacancy_models.py:236: AttributeError
_______________ TestVacancy.test_vacancy_date_properties ________________

self = <workspace.tests.test_vacancy_models.TestVacancy object at 0x7fd369593e50>

    def test_vacancy_date_properties(self):
        """Тест свойств даты вакансии"""
        published_at = datetime.now()
        vacancy = Vacancy(
            vacancy_id="123",
            title="Python Developer",
            url="https://test.com",
            source="hh.ru",
            published_at=published_at,
        )
    
>       assert vacancy.published_at == published_at
E       assert None == datetime.datetime(2025, 8, 31, 18, 20, 32, 185007)
E        +  where None = <src.vacancies.models.Vacancy object at 0x7fd36845fc70>.published_at

tests/test_vacancy_models.py:252: AssertionError
=========================== warnings summary ============================
tests/test_sj_api.py:12
  /home/runner/workspace/tests/test_sj_api.py:12: PytestCollectionWarning: cannot collect test class 'TestableSuperjobAPI' because it has a __init__ constructor (from: tests/test_sj_api.py)
    class TestableSuperjobAPI(SuperJobAPI):

tests/test_vacancy_display_handler.py:30
  /home/runner/workspace/tests/test_vacancy_display_handler.py:30: PytestCollectionWarning: cannot collect test class 'TestableVacancyDisplayHandler' because it has a __init__ constructor (from: tests/test_vacancy_display_handler.py)
    class TestableVacancyDisplayHandler(VacancyDisplayHandler):

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
======================== short test summary info ========================
FAILED tests/test_cached_api.py::TestCachedAPI::test_cached_api_initialization - TypeError: Can't instantiate abstract class ConcreteCachedAPI with a...
FAILED tests/test_cached_api.py::TestCachedAPI::test_cached_api_with_cache_manager - TypeError: Can't instantiate abstract class ConcreteCachedAPI with a...
FAILED tests/test_cached_api.py::TestCachedAPI::test_cached_api_abstract_methods - TypeError: Can't instantiate abstract class ConcreteCachedAPI with a...
FAILED tests/test_cached_api.py::TestCachedAPI::test_cache_integration - TypeError: Can't instantiate abstract class ConcreteCachedAPI with a...
FAILED tests/test_cached_api.py::TestCachedAPI::test_clear_cache_method - TypeError: Can't instantiate abstract class ConcreteCachedAPI with a...
FAILED tests/test_db_manager.py::TestDBManager::test_get_all_vacancies_success - AttributeError: __enter__
FAILED tests/test_db_manager.py::TestDBManager::test_get_database_stats_success - AttributeError: __enter__
FAILED tests/test_db_manager.py::TestDBManager::test_filter_companies_by_targets - AttributeError: 'MockCursor' object has no attribute 'connection'
FAILED tests/test_db_manager.py::TestDBManager::test_analyze_api_data_with_sql - AttributeError: __enter__
FAILED tests/test_salary_utils.py::TestSalaryUtils::test_normalize_salary_dict - AttributeError: 'dict' object has no attribute 'strip'
FAILED tests/test_salary_utils.py::TestSalaryUtils::test_normalize_salary_empty_dict - assert False
FAILED tests/test_salary_utils.py::TestSalaryUtils::test_format_salary_range_none - AssertionError: assert 'Зарплата не указана' == 'Не указана'
FAILED tests/test_salary_utils.py::TestSalaryUtils::test_parse_salary_string_from_only - assert 150000 is None
FAILED tests/test_salary_utils.py::TestSalaryUtils::test_parse_salary_string_invalid - AssertionError: assert {'currency': 'RUR', 'from': 100000, 'to': 150...
FAILED tests/test_salary_utils.py::TestSalaryUtils::test_compare_salaries_equal - TypeError: '>' not supported between instances of 'dict' and 'dict'
FAILED tests/test_salary_utils.py::TestSalaryUtils::test_compare_salaries_first_higher - TypeError: '>' not supported between instances of 'dict' and 'dict'
FAILED tests/test_salary_utils.py::TestSalaryUtils::test_compare_salaries_second_higher - TypeError: '>' not supported between instances of 'dict' and 'dict'
FAILED tests/test_salary_utils.py::TestSalaryUtils::test_validate_salary_data_invalid_range - assert True is False
FAILED tests/test_salary_utils.py::TestSalaryUtils::test_get_salary_statistics_empty_list - KeyError: 'count'
FAILED tests/test_salary_utils.py::TestSalaryUtils::test_get_salary_statistics_with_data - KeyError: 'count'
FAILED tests/test_salary_utils.py::TestSalaryUtils::test_filter_by_salary_range_partial_match - AssertionError: assert 2 == 1
FAILED tests/test_salary_utils.py::TestSalaryUtils::test_filter_by_salary_range_no_match - AssertionError: assert 2 == 0
FAILED tests/test_salary_utils.py::TestSalaryHelper::test_normalize_salary_dict - AttributeError: 'dict' object has no attribute 'strip'
FAILED tests/test_salary_utils.py::TestSalaryHelper::test_format_salary_display_full_range - AssertionError: assert '100000 - 150000 RUR' == '100000-150000 RUR'
FAILED tests/test_salary_utils.py::TestSalaryHelper::test_format_salary_display_none - AssertionError: assert 'Не указана' == 'Зарплата не указана'
FAILED tests/test_salary_utils.py::TestSalaryHelper::test_calculate_average_salary_with_data - TypeError: '<=' not supported between instances of 'int' and 'list'
FAILED tests/test_salary_utils.py::TestSalaryHelper::test_calculate_average_salary_no_salary_data - AssertionError: assert [<Mock id='140546006406096'>] is None
FAILED tests/test_salary_utils.py::TestSalaryFilter::test_salary_filter_initialization - NameError: name 'SalaryFilter' is not defined
FAILED tests/test_salary_utils.py::TestSalaryFilter::test_filter_vacancies_within_range - NameError: name 'SalaryFilter' is not defined
FAILED tests/test_salary_utils.py::TestSalaryFilter::test_filter_vacancies_outside_range - NameError: name 'SalaryFilter' is not defined
FAILED tests/test_salary_utils.py::TestSalaryFilter::test_filter_vacancies_no_salary - NameError: name 'SalaryFilter' is not defined
FAILED tests/test_salary_utils.py::TestSalaryFilter::test_filter_vacancies_empty_list - NameError: name 'SalaryFilter' is not defined
FAILED tests/test_salary_utils.py::TestSalaryFilter::test_extract_salary_value_range - NameError: name 'SalaryFilter' is not defined
FAILED tests/test_salary_utils.py::TestSalaryFilter::test_extract_salary_value_from_only - NameError: name 'SalaryFilter' is not defined
FAILED tests/test_salary_utils.py::TestSalaryFilter::test_extract_salary_value_to_only - NameError: name 'SalaryFilter' is not defined
FAILED tests/test_salary_utils.py::TestSalaryFilter::test_extract_salary_value_none - NameError: name 'SalaryFilter' is not defined
FAILED tests/test_salary_utils.py::TestSalaryUtilsEdgeCases::test_calculate_salary_average_zero - assert 100000 == 50000
FAILED tests/test_sj_api.py::TestSuperJobAPI::test_api_error_handling - Failed: DID NOT RAISE <class 'Exception'>
FAILED tests/test_sj_api.py::TestSuperJobAPI::test_get_vacancies_page - AttributeError: <src.api_modules.sj_api.SuperJobAPI object at 0x7fd3...
FAILED tests/test_vacancy_formatter.py::TestVacancyFormatter::test_format_vacancy_info_no_salary - AssertionError: assert ('не указана' in 'id: 124\nназвание: java dev...
FAILED tests/test_vacancy_formatter.py::TestVacancyFormatter::test_format_vacancy_info_full - AssertionError: assert 'Москва' in 'ID: 123\nНазвание: Python Develo...
FAILED tests/test_vacancy_formatter.py::TestVacancyFormatter::test_format_salary_range - TypeError: VacancyFormatter.format_salary() takes 2 positional argum...
FAILED tests/test_vacancy_formatter.py::TestVacancyFormatter::test_format_employer_info - AttributeError: 'VacancyFormatter' object has no attribute 'format_e...
FAILED tests/test_vacancy_formatter.py::TestVacancyFormatter::test_format_location_info - AttributeError: 'VacancyFormatter' object has no attribute 'format_l...
FAILED tests/test_vacancy_formatter.py::TestVacancyFormatter::test_format_currency_symbol - AttributeError: 'VacancyFormatter' object has no attribute 'get_curr...
FAILED tests/test_vacancy_models.py::TestVacancy::test_vacancy_with_salary - TypeError: Salary.__init__() got an unexpected keyword argument 'fro...
FAILED tests/test_vacancy_models.py::TestVacancy::test_vacancy_comparison - assert <src.vacancies.models.Vacancy object at 0x7fd368447c70> == <s...
FAILED tests/test_vacancy_models.py::TestVacancy::test_vacancy_hash - assert 1544201762269406205 == -8256739082870535888
FAILED tests/test_vacancy_models.py::TestVacancy::test_vacancy_repr - AssertionError: assert '123' in '<src.vacancies.models.Vacancy objec...
FAILED tests/test_vacancy_models.py::TestVacancy::test_vacancy_to_dict - TypeError: Salary.__init__() got an unexpected keyword argument 'fro...
FAILED tests/test_vacancy_models.py::TestVacancy::test_vacancy_salary_properties - TypeError: Salary.__init__() got an unexpected keyword argument 'fro...
FAILED tests/test_vacancy_models.py::TestVacancy::test_vacancy_employer_properties - AttributeError: 'Vacancy' object has no attribute 'get_employer_name'
FAILED tests/test_vacancy_models.py::TestVacancy::test_vacancy_validation - AttributeError: 'Vacancy' object has no attribute 'is_valid'
FAILED tests/test_vacancy_models.py::TestVacancy::test_vacancy_update_data - AttributeError: 'Vacancy' object has no attribute 'update_from_dict'
FAILED tests/test_vacancy_models.py::TestVacancy::test_vacancy_source_formatting - AttributeError: 'Vacancy' object has no attribute 'get_formatted_sou...
FAILED tests/test_vacancy_models.py::TestVacancy::test_vacancy_date_properties - assert None == datetime.datetime(2025, 8, 31, 18, 20, 32, 185007)
============== 56 failed, 301 passed, 2 warnings in 1.65s ===============
~/workspace$ 