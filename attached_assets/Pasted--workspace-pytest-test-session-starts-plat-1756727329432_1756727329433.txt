~/workspace$ pytest
========================== test session starts ==========================
platform linux -- Python 3.11.13, pytest-8.4.1, pluggy-1.6.0
rootdir: /home/runner/workspace
configfile: pyproject.toml
plugins: mock-3.14.1, cov-6.2.1
collected 413 items                                                     

tests/test_abstract.py ........                                   [  1%]
tests/test_abstract_db_manager.py ....                            [  2%]
tests/test_api_config.py ....                                     [  3%]
tests/test_api_data_filter.py .F......                            [  5%]
tests/test_app_config.py .....                                    [  7%]
tests/test_base_api.py ......                                     [  8%]
tests/test_base_parser.py ......                                  [  9%]
tests/test_cache.py .......                                       [ 11%]
tests/test_cached_api.py ...........                              [ 14%]
tests/test_console_interface.py ......                            [ 15%]
tests/test_db_manager.py .................                        [ 19%]
tests/test_decorators.py .......                                  [ 21%]
tests/test_env_loader.py ............                             [ 24%]
tests/test_file_handlers.py ............                          [ 27%]
tests/test_get_api.py ......                                      [ 28%]
tests/test_hh_api.py .......                                      [ 30%]
tests/test_hh_api_config.py .....                                 [ 31%]
tests/test_hh_parser.py ........                                  [ 33%]
tests/test_menu_manager.py ..........                             [ 36%]
tests/test_paginator.py ......                                    [ 37%]
tests/test_postgres_saver.py .......                              [ 39%]
tests/test_salary_utils.py ......................                 [ 44%]
tests/test_search_utils.py ............................           [ 51%]
tests/test_sj_api.py ..............                               [ 54%]
tests/test_sj_api_config.py .....                                 [ 55%]
tests/test_sj_parser.py ........                                  [ 57%]
tests/test_source_selector.py ..........                          [ 60%]
tests/test_storage_factory.py ........                            [ 62%]
tests/test_target_companies.py .....                              [ 63%]
tests/test_ui_config.py .....                                     [ 64%]
tests/test_ui_helpers.py ...........                              [ 67%]
tests/test_ui_navigation.py F...F                                 [ 68%]
tests/test_unified_api.py .................                       [ 72%]
tests/test_user_interface.py ........                             [ 74%]
tests/test_vacancy_display_handler.py ..............              [ 77%]
tests/test_vacancy_formatter.py ........                          [ 79%]
tests/test_vacancy_models.py .................................... [ 88%]
.............                                                     [ 91%]
tests/test_vacancy_operations.py ......                           [ 93%]
tests/test_vacancy_operations_coordinator.py .................    [ 97%]
tests/test_vacancy_search_handler.py .....                        [ 98%]
tests/test_vacancy_stats.py ......                                [100%]

=============================== FAILURES ================================
_____________ TestAPIDataFilter.test_filter_by_salary_range _____________

self = <workspace.tests.test_api_data_filter.TestAPIDataFilter object at 0x7faa6533b6d0>
sample_api_data = [{'alternate_url': 'https://hh.ru/vacancy/123', 'area': {'name': 'Москва'}, 'employer': {'id': '1740', 'name': 'Yandex...me': 'Екатеринбург'}, 'employer': {'id': '9999', 'name': 'Unknown Company'}, 'experience': {'name': 'без опыта'}, ...}]

    def test_filter_by_salary_range(self, sample_api_data):
        """Тест фильтрации по диапазону зарплаты"""
        try:
            from src.utils.api_data_filter import APIDataFilter
            filter_obj = APIDataFilter()
            if hasattr(filter_obj, 'filter_by_salary'):
                result = filter_obj.filter_by_salary(sample_api_data, min_salary=110000)
            else:
                # Тестовая реализация
                result = []
                for item in sample_api_data:
                    salary = item.get("salary")
                    if salary and (salary.get("from", 0) >= 110000 or salary.get("to", 0) >= 110000):
                        result.append(item)
        except (ImportError, AttributeError):
            # Тестовая реализация
            result = []
            for item in sample_api_data:
                salary = item.get("salary")
                if salary and (salary.get("from", 0) >= 110000 or salary.get("to", 0) >= 110000):
                    result.append(item)
    
        # Должна остаться только одна вакансия Java Developer с зарплатой >= 110000
>       assert len(result) == 1
E       AssertionError: assert 2 == 1
E        +  where 2 = len([{'alternate_url': 'https://hh.ru/vacancy/123', 'area': {'name': 'Москва'}, 'employer': {'id': '1740', 'name': 'Yandex...e': 'Санкт-Петербург'}, 'employer': {'id': '3529', 'name': 'Sber'}, 'experience': {'name': 'от 1 года до 3 лет'}, ...}])

tests/test_api_data_filter.py:129: AssertionError
______________ TestUINavigation.test_quick_paginate_basic _______________

self = <workspace.tests.test_ui_navigation.TestUINavigation object at 0x7faa643e8c10>
mock_print = <MagicMock name='print' id='140369790007184'>
mock_input = <MagicMock name='input' id='140369789975952'>
sample_items = [{'description': 'Description 1', 'id': 1, 'title': 'Item 1'}, {'description': 'Description 2', 'id': 2, 'title': 'Ite...tion': 'Description 5', 'id': 5, 'title': 'Item 5'}, {'description': 'Description 6', 'id': 6, 'title': 'Item 6'}, ...]

    @patch('builtins.input', side_effect=["", "q"])
    @patch('builtins.print')
    def test_quick_paginate_basic(self, mock_print, mock_input, sample_items):
        """Тест базовой пагинации"""
        try:
            from src.utils.ui_navigation import quick_paginate
    
            def simple_formatter(item, number=None):
                if number:
                    return f"{number}. {item['id']}: {item['title']}"
                return f"{item['id']}: {item['title']}"
    
>           quick_paginate(
                sample_items,
                formatter=simple_formatter,
                header="Test Items",
                items_per_page=3
            )

tests/test_ui_navigation.py:49: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
src/utils/ui_navigation.py:246: in quick_paginate
    navigator.paginate_display(items, formatter, header, show_numbers, custom_actions)
src/utils/ui_navigation.py:58: in paginate_display
    choice = input("\nВыберите действие: ").strip().lower()
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1124: in __call__
    return self._mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1128: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <MagicMock name='input' id='140369789975952'>
args = ('\nВыберите действие: ',), kwargs = {}
effect = <list_iterator object at 0x7faa64396470>

    def _execute_mock_call(self, /, *args, **kwargs):
        # separate from _increment_mock_call so that awaited functions are
        # executed separately from their call, also AsyncMock overrides this method
    
        effect = self.side_effect
        if effect is not None:
            if _is_exception(effect):
                raise effect
            elif not _callable(effect):
>               result = next(effect)
                         ^^^^^^^^^^^^
E               StopIteration

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1185: StopIteration
_______________ TestUINavigation.test_navigation_controls _______________

self = <workspace.tests.test_ui_navigation.TestUINavigation object at 0x7faa643e9b90>
mock_print = <MagicMock name='print' id='140369794260432'>
mock_input = <MagicMock name='input' id='140369794647440'>
sample_items = [{'description': 'Description 1', 'id': 1, 'title': 'Item 1'}, {'description': 'Description 2', 'id': 2, 'title': 'Ite...tion': 'Description 5', 'id': 5, 'title': 'Item 5'}, {'description': 'Description 6', 'id': 6, 'title': 'Item 6'}, ...]

    @patch('builtins.input', side_effect=["n", "", "q"])
    @patch('builtins.print')
    def test_navigation_controls(self, mock_print, mock_input, sample_items):
        """Тест элементов управления навигацией"""
        try:
            from src.utils.ui_navigation import quick_paginate
    
            def simple_formatter(item, number=None):
                if number:
                    return f"{number}. {item['title']}"
                return str(item["title"])
    
>           quick_paginate(
                sample_items,
                formatter=simple_formatter,
                header="Navigation Test",
                items_per_page=3
            )

tests/test_ui_navigation.py:177: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
src/utils/ui_navigation.py:246: in quick_paginate
    navigator.paginate_display(items, formatter, header, show_numbers, custom_actions)
src/utils/ui_navigation.py:58: in paginate_display
    choice = input("\nВыберите действие: ").strip().lower()
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1124: in __call__
    return self._mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1128: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <MagicMock name='input' id='140369794647440'>
args = ('\nВыберите действие: ',), kwargs = {}
effect = <list_iterator object at 0x7faa64f3d1e0>

    def _execute_mock_call(self, /, *args, **kwargs):
        # separate from _increment_mock_call so that awaited functions are
        # executed separately from their call, also AsyncMock overrides this method
    
        effect = self.side_effect
        if effect is not None:
            if _is_exception(effect):
                raise effect
            elif not _callable(effect):
>               result = next(effect)
                         ^^^^^^^^^^^^
E               StopIteration

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1185: StopIteration
======================== short test summary info ========================
FAILED tests/test_api_data_filter.py::TestAPIDataFilter::test_filter_by_salary_range - AssertionError: assert 2 == 1
FAILED tests/test_ui_navigation.py::TestUINavigation::test_quick_paginate_basic - StopIteration
FAILED tests/test_ui_navigation.py::TestUINavigation::test_navigation_controls - StopIteration
===================== 3 failed, 410 passed in 1.48s =====================
~/workspace$ 