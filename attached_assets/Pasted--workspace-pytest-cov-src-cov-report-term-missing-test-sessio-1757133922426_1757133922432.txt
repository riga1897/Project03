~/workspace$ pytest --cov=src --cov-report=term-missing
=============================== test session starts ================================
platform linux -- Python 3.11.13, pytest-8.4.2, pluggy-1.6.0
rootdir: /home/runner/workspace
configfile: pyproject.toml
plugins: cov-6.2.1, mock-3.15.0
collected 1329 items                                                               

tests/test_abstract.py ........                                              [  0%]
tests/test_abstract_db_manager.py ....                                       [  0%]
tests/test_abstract_filter_complete.py .........                             [  1%]
tests/test_api_complete.py ...................                               [  3%]
tests/test_api_config.py ....                                                [  3%]
tests/test_api_data_filter.py ......                                         [  3%]
tests/test_api_fixes.py .......                                              [  4%]
tests/test_api_modules.py .F.....FF..............F....                       [  6%]
tests/test_api_modules_consolidated.py ....                                  [  6%]
tests/test_app_config.py .........                                           [  7%]
tests/test_base_api.py ...............                                       [  8%]
tests/test_base_formatter.py ........F.                                      [  9%]
tests/test_base_formatter_complete.py ..............................         [ 11%]
tests/test_base_parser.py ......                                             [ 11%]
tests/test_cache.py ......................                                   [ 13%]
tests/test_cached_api.py ....                                                [ 13%]
tests/test_cached_api_complete.py ................                           [ 15%]
tests/test_components_fixed.py ...                                           [ 15%]
tests/test_comprehensive_fixed.py .....                                      [ 15%]
tests/test_config_consolidated.py .....                                      [ 16%]
tests/test_config_missing_coverage.py ssssssssss.............ss...           [ 18%]
tests/test_config_modules_consolidated.py ......                             [ 18%]
tests/test_console_interface.py ......                                       [ 19%]
tests/test_core_functionality_consolidated.py .....                          [ 19%]
tests/test_core_modules_comprehensive.py ........                            [ 20%]
tests/test_data_normalizers_comprehensive.py ............................    [ 22%]
tests/test_database_connection.py ........                                   [ 22%]
tests/test_db_config.py .....                                                [ 23%]
tests/test_db_manager.py .................                                   [ 24%]
tests/test_decorators.py .......                                             [ 24%]
tests/test_description_parser.py ..........                                  [ 25%]
tests/test_env_loader.py ................                                    [ 26%]
tests/test_filter_utils.py ......                                            [ 27%]
tests/test_get_api_complete.py ..FFFFFFFFFFFFFFFFFF                          [ 28%]
tests/test_hh_api_complete.py .................                              [ 30%]
tests/test_hh_api_config.py .....                                            [ 30%]
tests/test_hh_parser.py ........                                             [ 31%]
tests/test_integration.py .............                                      [ 32%]
tests/test_interfaces.py Fss                                                 [ 32%]
tests/test_main_application_interface.py F.F                                 [ 32%]
tests/test_main_application_interface_complete.py ..FFFFF...F...F.F..F.F.FFF [ 34%]
FF.FF.F.FFF.....F                                                            [ 35%]
tests/test_main_consolidated.py .........                                    [ 36%]
tests/test_menu_manager.py ..........                                        [ 37%]
tests/test_missing_components.py .........                                   [ 37%]
tests/test_missing_coverage_components.py ......F.....FFF..                  [ 39%]
tests/test_models_fixed.py ...                                               [ 39%]
tests/test_paginator.py ......                                               [ 39%]
tests/test_parsers_complete.py ............                                  [ 40%]
tests/test_repository_fixed.py ..                                            [ 40%]
tests/test_salary_fixed.py ...........                                       [ 41%]
tests/test_salary_utils.py ......................                            [ 43%]
tests/test_search_utils.py ............................                      [ 45%]
tests/test_search_utils_complete.py ........................................ [ 48%]
......                                                                       [ 48%]
tests/test_services_consolidated.py ....                                     [ 49%]
tests/test_services_storage_consolidated.py ..........                       [ 50%]
tests/test_simple_db_adapter.py .........                                    [ 50%]
tests/test_sj_api.py ..............                                          [ 51%]
tests/test_sj_api_complete.py .............F....                             [ 53%]
tests/test_sj_api_config.py .....                                            [ 53%]
tests/test_sj_parser.py ........                                             [ 54%]
tests/test_sj_parser_complete.py ssssssssssssss                              [ 55%]
tests/test_source_manager.py .................                               [ 56%]
tests/test_source_selector.py .................                              [ 57%]
tests/test_storage_abstractions.py ssssssss                                  [ 58%]
tests/test_storage_complete.py .............                                 [ 59%]
tests/test_storage_components_complete.py ......F....FF........F.....FF      [ 61%]
tests/test_storage_factory.py ........                                       [ 62%]
tests/test_storage_modules_consolidated.py ....                              [ 62%]
tests/test_target_companies.py .....                                         [ 62%]
tests/test_typed_data_processor.py ................                          [ 63%]
tests/test_ui_components_complete.py ......................................  [ 66%]
tests/test_ui_components_extended.py ..................                      [ 68%]
tests/test_ui_config.py .......................                              [ 69%]
tests/test_ui_helpers_comprehensive.py ..................................... [ 72%]
..                                                                           [ 72%]
tests/test_ui_helpers_extended.py ........................................   [ 75%]
tests/test_ui_modules_consolidated.py .....                                  [ 76%]
tests/test_ui_navigation.py ......................                           [ 77%]
tests/test_ui_navigation_complete.py ..s..                                   [ 78%]
tests/test_ui_navigation_comprehensive.py ......                             [ 78%]
tests/test_ui_navigation_extended.py .......F...........................     [ 81%]
tests/test_unified_api.py ................F...F.                             [ 82%]
tests/test_unified_api_complete.py ......F......................             [ 85%]
tests/test_unified_api_fixed.py ...                                          [ 85%]
tests/test_user_interface.py ...............                                 [ 86%]
tests/test_user_interface_consolidated.py F.F                                [ 86%]
tests/test_user_interface_fixed.py ...                                       [ 86%]
tests/test_utils_consolidated.py .....                                       [ 87%]
tests/test_utils_ui_consolidated.py ......                                   [ 87%]
tests/test_vacancy_abstractions.py .................                         [ 89%]
tests/test_vacancy_display_handler.py F..................                    [ 90%]
tests/test_vacancy_formatter.py ........                                     [ 91%]
tests/test_vacancy_models_complete.py ....                                   [ 91%]
tests/test_vacancy_models_consolidated.py ....                               [ 91%]
tests/test_vacancy_operations.py ......                                      [ 92%]
tests/test_vacancy_operations_coordinator.py ...........................     [ 94%]
tests/test_vacancy_operations_coordinator_complete.py F..................... [ 95%]
                                                                             [ 95%]
tests/test_vacancy_processing_coordinator.py .............                   [ 96%]
tests/test_vacancy_repository.py .........                                   [ 97%]
tests/test_vacancy_stats.py ............                                     [ 98%]
tests/test_vacancy_stats_fixed.py .........                                  [ 99%]
tests/test_vacancy_validator.py ............                                 [100%]

===================================== FAILURES =====================================
_______________________ TestAPIModules.test_base_api_methods _______________________

self = <tests.test_api_modules.TestAPIModules object at 0x7f0fb7e50e10>
base_api = <tests.test_api_modules.ConcreteJobAPI object at 0x7f0fb768c410>

    def test_base_api_methods(self, base_api):
        """Тест методов базового API"""
        # Тест поиска вакансий
        results = base_api.search_vacancies("Python")
        assert isinstance(results, list)
    
        # Тест получения деталей вакансии
>       details = base_api.get_vacancy_details("123")
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: 'ConcreteJobAPI' object has no attribute 'get_vacancy_details'

tests/test_api_modules.py:367: AttributeError
_______________ TestAPIModules.test_cached_api_caching_functionality _______________

self = <tests.test_api_modules.TestAPIModules object at 0x7f0fb7e53190>
cached_api = <tests.test_api_modules.ConcreteCachedAPI object at 0x7f0fb75d0d10>

    def test_cached_api_caching_functionality(self, cached_api):
        """Тест функциональности кэширования"""
        query = "Python"
    
        # Первый запрос - должен попасть в API и кэш
>       results1 = cached_api.search_vacancies(query)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_api_modules.py:439: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tests.test_api_modules.ConcreteCachedAPI object at 0x7f0fb75d0d10>
query = 'Python', kwargs = {}, cache_key = 'search_Python_{}'

    def search_vacancies(self, query, **kwargs):
        """Поиск вакансий с кэшированием"""
        cache_key = f"search_{query}_{{}}"
>       if cache_key not in self.cache:
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       TypeError: argument of type 'FileCache' is not iterable

tests/test_api_modules.py:77: TypeError
____________________ TestAPIModules.test_cached_api_clear_cache ____________________

self = <tests.test_api_modules.TestAPIModules object at 0x7f0fb7e537d0>
cached_api = <tests.test_api_modules.ConcreteCachedAPI object at 0x7f0fb7675d50>

    def test_cached_api_clear_cache(self, cached_api):
        """Тест очистки кэша"""
        # Делаем запрос для заполнения кэша
>       cached_api.search_vacancies("Python")

tests/test_api_modules.py:449: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tests.test_api_modules.ConcreteCachedAPI object at 0x7f0fb7675d50>
query = 'Python', kwargs = {}, cache_key = 'search_Python_{}'

    def search_vacancies(self, query, **kwargs):
        """Поиск вакансий с кэшированием"""
        cache_key = f"search_{query}_{{}}"
>       if cache_key not in self.cache:
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       TypeError: argument of type 'FileCache' is not iterable

tests/test_api_modules.py:77: TypeError
___________________ TestAPIModules.test_api_caching_performance ____________________

self = <tests.test_api_modules.TestAPIModules object at 0x7f0fb7e643d0>
cached_api = <tests.test_api_modules.ConcreteCachedAPI object at 0x7f0fb76980d0>

    def test_api_caching_performance(self, cached_api):
        """Тест производительности кэширования"""
        import time
    
        query = "Python"
    
        # Первый запрос (без кэша)
        start_time = time.time()
>       cached_api.search_vacancies(query)

tests/test_api_modules.py:587: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tests.test_api_modules.ConcreteCachedAPI object at 0x7f0fb76980d0>
query = 'Python', kwargs = {}, cache_key = 'search_Python_{}'

    def search_vacancies(self, query, **kwargs):
        """Поиск вакансий с кэшированием"""
        cache_key = f"search_{query}_{{}}"
>       if cache_key not in self.cache:
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       TypeError: argument of type 'FileCache' is not iterable

tests/test_api_modules.py:77: TypeError
__________________ TestBaseFormatter.test_abstract_methods_exist ___________________

self = <tests.test_base_formatter.TestBaseFormatter object at 0x7f0fb7e8b010>

    def test_abstract_methods_exist(self):
        """Тест что абстрактные методы определены"""
        if not BASE_FORMATTER_AVAILABLE:
            pytest.skip("BaseFormatter not available")
    
        abstract_methods = BaseFormatter.__abstractmethods__
>       assert 'format_vacancy' in abstract_methods
E       AssertionError: assert 'format_vacancy' in frozenset({'clean_html_tags', 'format_company_name', 'format_currency', 'format_date', 'format_employment_type', 'format_experience', ...})

tests/test_base_formatter.py:155: AssertionError
_____________________ TestGetAPIComplete.test_session_creation _____________________

self = <tests.test_get_api_complete.TestGetAPIComplete object at 0x7f0fb7abeb90>
mock_session = <MagicMock name='Session' id='139705462922896'>
get_api = <src.api_modules.get_api.APIConnector object at 0x7f0fb67dbe90>

    @patch('requests.Session')
    def test_session_creation(self, mock_session, get_api):
        """Тест создания сессии"""
>       assert get_api.session is not None
               ^^^^^^^^^^^^^^^
E       AttributeError: 'APIConnector' object has no attribute 'session'

tests/test_get_api_complete.py:63: AttributeError
___________________ TestGetAPIComplete.test_make_request_success ___________________

self = <tests.test_get_api_complete.TestGetAPIComplete object at 0x7f0fb7abf210>
mock_get = <MagicMock name='get' id='139705458348112'>
get_api = <src.api_modules.get_api.APIConnector object at 0x7f0fb63fcf10>

    @patch('requests.Session.get')
    def test_make_request_success(self, mock_get, get_api):
        """Тест успешного запроса"""
        mock_response = Mock()
        mock_response.status_code = 200
        mock_response.json.return_value = {"items": [{"id": "1"}]}
        mock_response.raise_for_status.return_value = None
        mock_get.return_value = mock_response
    
>       result = get_api._make_request("http://test.com", {"param": "value"})
                 ^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: 'APIConnector' object has no attribute '_make_request'

tests/test_get_api_complete.py:74: AttributeError
_________________ TestGetAPIComplete.test_make_request_http_error __________________

self = <tests.test_get_api_complete.TestGetAPIComplete object at 0x7f0fb7abf890>
mock_get = <MagicMock name='get' id='139705462969104'>
get_api = <src.api_modules.get_api.APIConnector object at 0x7f0fb63b6410>

    @patch('requests.Session.get')
    def test_make_request_http_error(self, mock_get, get_api):
        """Тест обработки HTTP ошибки"""
        mock_response = Mock()
        mock_response.raise_for_status.side_effect = requests.HTTPError("404 Not Found")
        mock_get.return_value = mock_response
    
>       result = get_api._make_request("http://test.com")
                 ^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: 'APIConnector' object has no attribute '_make_request'

tests/test_get_api_complete.py:85: AttributeError
______________ TestGetAPIComplete.test_make_request_connection_error _______________

self = <tests.test_get_api_complete.TestGetAPIComplete object at 0x7f0fb7abff10>
mock_get = <MagicMock name='get' id='139705462876560'>
get_api = <src.api_modules.get_api.APIConnector object at 0x7f0fb67cf750>

    @patch('requests.Session.get')
    def test_make_request_connection_error(self, mock_get, get_api):
        """Тест обработки ошибки соединения"""
        mock_get.side_effect = requests.ConnectionError("Connection failed")
    
>       result = get_api._make_request("http://test.com")
                 ^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: 'APIConnector' object has no attribute '_make_request'

tests/test_get_api_complete.py:93: AttributeError
___________________ TestGetAPIComplete.test_make_request_timeout ___________________

self = <tests.test_get_api_complete.TestGetAPIComplete object at 0x7f0fb7ac85d0>
mock_get = <MagicMock name='get' id='139705462830096'>
get_api = <src.api_modules.get_api.APIConnector object at 0x7f0fb67c0190>

    @patch('requests.Session.get')
    def test_make_request_timeout(self, mock_get, get_api):
        """Тест обработки таймаута"""
        mock_get.side_effect = requests.Timeout("Request timeout")
    
>       result = get_api._make_request("http://test.com")
                 ^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: 'APIConnector' object has no attribute '_make_request'

tests/test_get_api_complete.py:101: AttributeError
______________ TestGetAPIComplete.test_make_request_json_decode_error ______________

self = <tests.test_get_api_complete.TestGetAPIComplete object at 0x7f0fb7ac8c50>
mock_get = <MagicMock name='get' id='139705462909712'>
get_api = <src.api_modules.get_api.APIConnector object at 0x7f0fb67d6d50>

    @patch('requests.Session.get')
    def test_make_request_json_decode_error(self, mock_get, get_api):
        """Тест обработки ошибки декодирования JSON"""
        mock_response = Mock()
        mock_response.status_code = 200
        mock_response.json.side_effect = json.JSONDecodeError("Invalid JSON", "", 0)
        mock_response.raise_for_status.return_value = None
        mock_get.return_value = mock_response
    
>       result = get_api._make_request("http://test.com")
                 ^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: 'APIConnector' object has no attribute '_make_request'

tests/test_get_api_complete.py:113: AttributeError
______________ TestGetAPIComplete.test_make_request_generic_exception ______________

self = <tests.test_get_api_complete.TestGetAPIComplete object at 0x7f0fb7abdb10>
mock_get = <MagicMock name='get' id='139705483568912'>
get_api = <src.api_modules.get_api.APIConnector object at 0x7f0fb7be3b10>

    @patch('requests.Session.get')
    def test_make_request_generic_exception(self, mock_get, get_api):
        """Тест обработки общего исключения"""
        mock_get.side_effect = Exception("Unexpected error")
    
>       result = get_api._make_request("http://test.com")
                 ^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: 'APIConnector' object has no attribute '_make_request'

tests/test_get_api_complete.py:121: AttributeError
______________ TestGetAPIComplete.test_get_vacancies_not_implemented _______________

self = <tests.test_get_api_complete.TestGetAPIComplete object at 0x7f0fb7ac8a90>
get_api = <src.api_modules.get_api.APIConnector object at 0x7f0fb7c29750>

    def test_get_vacancies_not_implemented(self, get_api):
        """Тест что метод get_vacancies не реализован в базовом классе"""
        with pytest.raises(NotImplementedError):
>           get_api.get_vacancies("python")
            ^^^^^^^^^^^^^^^^^^^^^
E           AttributeError: 'APIConnector' object has no attribute 'get_vacancies'

tests/test_get_api_complete.py:127: AttributeError
_____________ TestGetAPIComplete.test_make_request_with_custom_timeout _____________

self = <tests.test_get_api_complete.TestGetAPIComplete object at 0x7f0fb7ac90d0>
mock_get = <MagicMock name='get' id='139705489582416'>
get_api = <src.api_modules.get_api.APIConnector object at 0x7f0fb77133d0>

    @patch('requests.Session.get')
    def test_make_request_with_custom_timeout(self, mock_get, get_api):
        """Тест запроса с кастомным таймаутом"""
        mock_response = Mock()
        mock_response.status_code = 200
        mock_response.json.return_value = {"data": "test"}
        mock_response.raise_for_status.return_value = None
        mock_get.return_value = mock_response
    
        # Патчим метод для тестирования кастомного таймаута
>       with patch.object(get_api, '_make_request') as mock_method:

tests/test_get_api_complete.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1446: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f0fb63c7550>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <src.api_modules.get_api.APIConnector object at 0x7f0fb77133d0> does not have the attribute '_make_request'

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1419: AttributeError
_______________ TestGetAPIComplete.test_make_request_empty_response ________________

self = <tests.test_get_api_complete.TestGetAPIComplete object at 0x7f0fb7ac9450>
mock_get = <MagicMock name='get' id='139705478545168'>
get_api = <src.api_modules.get_api.APIConnector object at 0x7f0fb79072d0>

    @patch('requests.Session.get')
    def test_make_request_empty_response(self, mock_get, get_api):
        """Тест обработки пустого ответа"""
        mock_response = Mock()
        mock_response.status_code = 200
        mock_response.json.return_value = None
        mock_response.raise_for_status.return_value = None
        mock_get.return_value = mock_response
    
>       result = get_api._make_request("http://test.com")
                 ^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: 'APIConnector' object has no attribute '_make_request'

tests/test_get_api_complete.py:155: AttributeError
____________ TestGetAPIComplete.test_make_request_status_code_handling _____________

self = <tests.test_get_api_complete.TestGetAPIComplete object at 0x7f0fb7ac97d0>
mock_get = <MagicMock name='get' id='139705481397200'>
get_api = <src.api_modules.get_api.APIConnector object at 0x7f0fb63ce010>

    @patch('requests.Session.get')
    def test_make_request_status_code_handling(self, mock_get, get_api):
        """Тест обработки различных статус кодов"""
        # Тест успешного статуса
        mock_response = Mock()
        mock_response.status_code = 201
        mock_response.json.return_value = {"created": True}
        mock_response.raise_for_status.return_value = None
        mock_get.return_value = mock_response
    
>       result = get_api._make_request("http://test.com")
                 ^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: 'APIConnector' object has no attribute '_make_request'

tests/test_get_api_complete.py:168: AttributeError
____________________ TestGetAPIComplete.test_session_attributes ____________________

self = <tests.test_get_api_complete.TestGetAPIComplete object at 0x7f0fb7ac9b50>
get_api = <src.api_modules.get_api.APIConnector object at 0x7f0fb636bbd0>

    def test_session_attributes(self, get_api):
        """Тест атрибутов сессии"""
>       session = get_api.session
                  ^^^^^^^^^^^^^^^
E       AttributeError: 'APIConnector' object has no attribute 'session'

tests/test_get_api_complete.py:173: AttributeError
_______________ TestGetAPIComplete.test_make_request_params_handling _______________

self = <tests.test_get_api_complete.TestGetAPIComplete object at 0x7f0fb7ac9ed0>
mock_get = <MagicMock name='get' id='139705458261328'>
get_api = <src.api_modules.get_api.APIConnector object at 0x7f0fb6367c50>

    @patch('requests.Session.get')
    def test_make_request_params_handling(self, mock_get, get_api):
        """Тест обработки параметров запроса"""
        mock_response = Mock()
        mock_response.status_code = 200
        mock_response.json.return_value = {"success": True}
        mock_response.raise_for_status.return_value = None
        mock_get.return_value = mock_response
    
        params = {"query": "python", "page": 1, "per_page": 50}
>       result = get_api._make_request("http://test.com", params)
                 ^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: 'APIConnector' object has no attribute '_make_request'

tests/test_get_api_complete.py:188: AttributeError
_________________ TestGetAPIComplete.test_make_request_none_params _________________

self = <tests.test_get_api_complete.TestGetAPIComplete object at 0x7f0fb7aca290>
mock_get = <MagicMock name='get' id='139705458444112'>
get_api = <src.api_modules.get_api.APIConnector object at 0x7f0fb7b93010>

    @patch('requests.Session.get')
    def test_make_request_none_params(self, mock_get, get_api):
        """Тест запроса без параметров"""
        mock_response = Mock()
        mock_response.status_code = 200
        mock_response.json.return_value = {"items": []}
        mock_response.raise_for_status.return_value = None
        mock_get.return_value = mock_response
    
>       result = get_api._make_request("http://test.com", None)
                 ^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: 'APIConnector' object has no attribute '_make_request'

tests/test_get_api_complete.py:202: AttributeError
_____________________ TestGetAPIComplete.test_class_attributes _____________________

self = <tests.test_get_api_complete.TestGetAPIComplete object at 0x7f0fb7aca890>

    def test_class_attributes(self):
        """Тест атрибутов класса"""
        if not GET_API_AVAILABLE:
            pytest.skip("GetAPI not available")
    
        # Проверяем что класс имеет необходимые атрибуты
        assert hasattr(GetAPI, '__init__')
>       assert hasattr(GetAPI, '_make_request')
E       AssertionError: assert False
E        +  where False = hasattr(GetAPI, '_make_request')

tests/test_get_api_complete.py:213: AssertionError
_______________ TestGetAPIComplete.test_abstract_method_inheritance ________________

self = <tests.test_get_api_complete.TestGetAPIComplete object at 0x7f0fb7acae90>

    def test_abstract_method_inheritance(self):
        """Тест наследования абстрактных методов"""
        if not GET_API_AVAILABLE:
            pytest.skip("GetAPI not available")
    
        # Проверяем что get_vacancies является абстрактным методом
        with pytest.raises(NotImplementedError):
            api = GetAPI()
>           api.get_vacancies("test")
            ^^^^^^^^^^^^^^^^^
E           AttributeError: 'APIConnector' object has no attribute 'get_vacancies'

tests/test_get_api_complete.py:224: AttributeError
________________ TestGetAPIComplete.test_make_request_error_logging ________________

self = <tests.test_get_api_complete.TestGetAPIComplete object at 0x7f0fb7acb450>
mock_get = <MagicMock name='get' id='139705461363920'>
get_api = <src.api_modules.get_api.APIConnector object at 0x7f0fb665fa50>

    @patch('requests.Session.get')
    def test_make_request_error_logging(self, mock_get, get_api):
        """Тест логирования ошибок"""
        mock_get.side_effect = requests.RequestException("Network error")
    
        with patch('logging.Logger.error') as mock_log:
>           result = get_api._make_request("http://test.com")
                     ^^^^^^^^^^^^^^^^^^^^^
E           AttributeError: 'APIConnector' object has no attribute '_make_request'

tests/test_get_api_complete.py:232: AttributeError
____________________ TestGetAPIComplete.test_method_signatures _____________________

self = <tests.test_get_api_complete.TestGetAPIComplete object at 0x7f0fb7acba90>
get_api = <src.api_modules.get_api.APIConnector object at 0x7f0fb6624110>

    def test_method_signatures(self, get_api):
        """Тест сигнатур методов"""
        # Проверяем что методы существуют и вызываемы
>       assert callable(get_api._make_request)
                        ^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: 'APIConnector' object has no attribute '_make_request'

tests/test_get_api_complete.py:239: AttributeError
_______________ TestMainApplicationInterface.test_interface_creation _______________

self = <tests.test_interfaces.TestMainApplicationInterface object at 0x7f0fb7b02050>
mock_dependencies = {'api': <Mock id='139705478423824'>, 'storage': <Mock id='139705478418192'>, 'ui': <Mock id='139705478419152'>}

    def test_interface_creation(self, mock_dependencies):
        """Тест создания интерфейса"""
        if not INTERFACES_AVAILABLE:
            pytest.skip("Interfaces not available")
    
        try:
>           interface = MainApplicationInterface(**mock_dependencies)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E           TypeError: Can't instantiate abstract class MainApplicationInterface with abstract method run_application

tests/test_interfaces.py:38: TypeError

During handling of the above exception, another exception occurred:

self = <tests.test_interfaces.TestMainApplicationInterface object at 0x7f0fb7b02050>
mock_dependencies = {'api': <Mock id='139705478423824'>, 'storage': <Mock id='139705478418192'>, 'ui': <Mock id='139705478419152'>}

    def test_interface_creation(self, mock_dependencies):
        """Тест создания интерфейса"""
        if not INTERFACES_AVAILABLE:
            pytest.skip("Interfaces not available")
    
        try:
            interface = MainApplicationInterface(**mock_dependencies)
            assert interface is not None
        except TypeError:
            # Если требуются другие аргументы
>           interface = MainApplicationInterface()
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^
E           TypeError: Can't instantiate abstract class MainApplicationInterface with abstract method run_application

tests/test_interfaces.py:42: TypeError
________ TestMainApplicationInterface.test_main_application_interface_init _________

self = <tests.test_main_application_interface.TestMainApplicationInterface object at 0x7f0fb7b033d0>

    def test_main_application_interface_init(self):
        """Тест инициализации главного интерфейса приложения"""
        if not INTERFACE_AVAILABLE:
            pytest.skip("MainApplicationInterface not available")
    
        # Создаем конкретную реализацию абстрактного класса
        class ConcreteMainApplication(MainApplicationInterface):
            def run_application(self):
                pass
    
>       interface = ConcreteMainApplication()
                    ^^^^^^^^^^^^^^^^^^^^^^^^^
E       TypeError: MainApplicationInterface.__init__() missing 3 required positional arguments: 'provider', 'processor', and 'storage'

tests/test_main_application_interface.py:33: TypeError
_ TestMainApplicationInterface.test_main_application_interface_concrete_implementation _

self = <tests.test_main_application_interface.TestMainApplicationInterface object at 0x7f0fb7b03fd0>

    def test_main_application_interface_concrete_implementation(self):
        """Тест конкретной реализации"""
        if not INTERFACE_AVAILABLE:
            pytest.skip("MainApplicationInterface not available")
    
        class TestApplication(MainApplicationInterface):
            def run_application(self):
                return "Application started"
    
>       app = TestApplication()
              ^^^^^^^^^^^^^^^^^
E       TypeError: MainApplicationInterface.__init__() missing 3 required positional arguments: 'provider', 'processor', and 'storage'

tests/test_main_application_interface.py:53: TypeError
________ TestMainApplicationInterfaceComplete.test_concrete_run_application ________

self = <tests.test_main_application_interface_complete.TestMainApplicationInterfaceComplete object at 0x7f0fb7b13b90>
app_interface = <tests.test_main_application_interface_complete.ConcreteMainApp object at 0x7f0fb67a3ed0>

    def test_concrete_run_application(self, app_interface):
        """Тест конкретной реализации run_application"""
>       with patch.object(app_interface, 'start_application') as mock_start:

tests/test_main_application_interface_complete.py:120: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1446: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f0fb67a0c90>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <tests.test_main_application_interface_complete.ConcreteMainApp object at 0x7f0fb67a3ed0> does not have the attribute 'start_application'

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1419: AttributeError
____________ TestMainApplicationInterfaceComplete.test_get_data_sources ____________

self = <tests.test_main_application_interface_complete.TestMainApplicationInterfaceComplete object at 0x7f0fb7b2c290>
app_interface = <tests.test_main_application_interface_complete.ConcreteMainApp object at 0x7f0fb662aa10>

    def test_get_data_sources(self, app_interface):
        """Тест получения источников данных"""
        mock_sources = ["hh", "sj"]
        app_interface.data_provider.get_available_sources.return_value = mock_sources
    
>       result = app_interface.get_data_sources()
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: 'ConcreteMainApp' object has no attribute 'get_data_sources'

tests/test_main_application_interface_complete.py:130: AttributeError
_________ TestMainApplicationInterfaceComplete.test_get_data_sources_error _________

self = <tests.test_main_application_interface_complete.TestMainApplicationInterfaceComplete object at 0x7f0fb7b2c910>
app_interface = <tests.test_main_application_interface_complete.ConcreteMainApp object at 0x7f0fb6633610>

    def test_get_data_sources_error(self, app_interface):
        """Тест обработки ошибок при получении источников"""
        app_interface.data_provider.get_available_sources.side_effect = Exception("Provider error")
    
>       result = app_interface.get_data_sources()
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: 'ConcreteMainApp' object has no attribute 'get_data_sources'

tests/test_main_application_interface_complete.py:137: AttributeError
____________ TestMainApplicationInterfaceComplete.test_validate_sources ____________

self = <tests.test_main_application_interface_complete.TestMainApplicationInterfaceComplete object at 0x7f0fb7b2cf90>
app_interface = <tests.test_main_application_interface_complete.ConcreteMainApp object at 0x7f0fb6813cd0>

    def test_validate_sources(self, app_interface):
        """Тест валидации источников"""
        sources = ["hh", "sj"]
        app_interface.data_provider.validate_sources.return_value = sources
    
>       result = app_interface.validate_sources(sources)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: 'ConcreteMainApp' object has no attribute 'validate_sources'

tests/test_main_application_interface_complete.py:145: AttributeError
_________ TestMainApplicationInterfaceComplete.test_validate_sources_error _________

self = <tests.test_main_application_interface_complete.TestMainApplicationInterfaceComplete object at 0x7f0fb7b2d610>
app_interface = <tests.test_main_application_interface_complete.ConcreteMainApp object at 0x7f0fb63ce010>

    def test_validate_sources_error(self, app_interface):
        """Тест обработки ошибок валидации источников"""
        app_interface.data_provider.validate_sources.side_effect = Exception("Validation error")
    
>       result = app_interface.validate_sources(["invalid"])
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: 'ConcreteMainApp' object has no attribute 'validate_sources'

tests/test_main_application_interface_complete.py:152: AttributeError
___________ TestMainApplicationInterfaceComplete.test_process_data_error ___________

self = <tests.test_main_application_interface_complete.TestMainApplicationInterfaceComplete object at 0x7f0fb7b2efd0>
app_interface = <tests.test_main_application_interface_complete.ConcreteMainApp object at 0x7f0fb6786990>

    def test_process_data_error(self, app_interface):
        """Тест обработки ошибок при обработке данных"""
        app_interface.processor.process.side_effect = Exception("Processing error")
    
>       result = app_interface.process_data([{"id": "1"}])
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_main_application_interface_complete.py:180: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_main_application_interface_complete.py:38: in process_data
    return self.processor.process(data)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1124: in __call__
    return self._mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1128: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Mock name='mock.process' id='139705462571728'>, args = ([{'id': '1'}],)
kwargs = {}, effect = Exception('Processing error')

    def _execute_mock_call(self, /, *args, **kwargs):
        # separate from _increment_mock_call so that awaited functions are
        # executed separately from their call, also AsyncMock overrides this method
    
        effect = self.side_effect
        if effect is not None:
            if _is_exception(effect):
>               raise effect
E               Exception: Processing error

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1183: Exception
____________ TestMainApplicationInterfaceComplete.test_store_data_error ____________

self = <tests.test_main_application_interface_complete.TestMainApplicationInterfaceComplete object at 0x7f0fb7b34a10>
app_interface = <tests.test_main_application_interface_complete.ConcreteMainApp object at 0x7f0fb676dcd0>

    def test_store_data_error(self, app_interface):
        """Тест обработки ошибок при сохранении данных"""
        app_interface.storage.save.side_effect = Exception("Storage error")
    
>       result = app_interface.store_data([{"id": "1"}])
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_main_application_interface_complete.py:206: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_main_application_interface_complete.py:44: in store_data
    return self.storage.save(data)
           ^^^^^^^^^^^^^^^^^^^^^^^
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1124: in __call__
    return self._mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1128: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Mock name='mock.save' id='139705462478672'>, args = ([{'id': '1'}],)
kwargs = {}, effect = Exception('Storage error')

    def _execute_mock_call(self, /, *args, **kwargs):
        # separate from _increment_mock_call so that awaited functions are
        # executed separately from their call, also AsyncMock overrides this method
    
        effect = self.side_effect
        if effect is not None:
            if _is_exception(effect):
>               raise effect
E               Exception: Storage error

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1183: Exception
_________ TestMainApplicationInterfaceComplete.test_search_data_no_sources _________

self = <Mock name='mock.search' id='139705459042256'>, args = ('python',)
kwargs = {'sources': ['hh', 'sj']}, expected = call('python', sources=['hh', 'sj'])
actual = call('python', sources=None)
_error_message = <function NonCallableMock.assert_called_with.<locals>._error_message at 0x7f0fb6852660>
cause = None

    def assert_called_with(self, /, *args, **kwargs):
        """assert that the last call was made with the specified arguments.
    
        Raises an AssertionError if the args and keyword args passed in are
        different to the last call to the mock."""
        if self.call_args is None:
            expected = self._format_mock_call_signature(args, kwargs)
            actual = 'not called.'
            error_message = ('expected call not found.\nExpected: %s\n  Actual: %s'
                    % (expected, actual))
            raise AssertionError(error_message)
    
        def _error_message():
            msg = self._format_mock_failure_message(args, kwargs)
            return msg
        expected = self._call_matcher(_Call((args, kwargs), two=True))
        actual = self._call_matcher(self.call_args)
        if actual != expected:
            cause = expected if isinstance(expected, Exception) else None
>           raise AssertionError(_error_message()) from cause
E           AssertionError: expected call not found.
E           Expected: search('python', sources=['hh', 'sj'])
E             Actual: search('python', sources=None)

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:939: AssertionError

During handling of the above exception, another exception occurred:

self = <Mock name='mock.search' id='139705459042256'>, args = ('python',)
kwargs = {'sources': ['hh', 'sj']}

    def assert_called_once_with(self, /, *args, **kwargs):
        """assert that the mock was called exactly once and that that call was
        with the specified arguments."""
        if not self.call_count == 1:
            msg = ("Expected '%s' to be called once. Called %s times.%s"
                   % (self._mock_name or 'mock',
                      self.call_count,
                      self._calls_repr()))
            raise AssertionError(msg)
>       return self.assert_called_with(*args, **kwargs)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       AssertionError: expected call not found.
E       Expected: search('python', sources=['hh', 'sj'])
E         Actual: search('python', sources=None)
E       
E       pytest introspection follows:
E       
E       Kwargs:
E       assert {'sources': None} == {'sources': ['hh', 'sj']}
E         
E         Differing items:
E         {'sources': None} != {'sources': ['hh', 'sj']}
E         Use -v to get more diff

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:951: AssertionError

During handling of the above exception, another exception occurred:

self = <tests.test_main_application_interface_complete.TestMainApplicationInterfaceComplete object at 0x7f0fb7b2fe50>
app_interface = <tests.test_main_application_interface_complete.ConcreteMainApp object at 0x7f0fb7be0110>

    def test_search_data_no_sources(self, app_interface):
        """Тест поиска данных без указания источников"""
        mock_results = [{"id": "1", "title": "Python Job"}]
        available_sources = ["hh", "sj"]
    
        app_interface.data_provider.get_available_sources.return_value = available_sources
        app_interface.data_provider.search.return_value = mock_results
    
        result = app_interface.search_data("python")
        assert result == mock_results
>       app_interface.data_provider.search.assert_called_once_with("python", sources=available_sources)
E       AssertionError: expected call not found.
E       Expected: search('python', sources=['hh', 'sj'])
E         Actual: search('python', sources=None)
E       
E       pytest introspection follows:
E       
E       Kwargs:
E       assert {'sources': None} == {'sources': ['hh', 'sj']}
E         
E         Differing items:
E         {'sources': None} != {'sources': ['hh', 'sj']}
E         Use -v to get more diff

tests/test_main_application_interface_complete.py:228: AssertionError
___________ TestMainApplicationInterfaceComplete.test_search_data_error ____________

self = <tests.test_main_application_interface_complete.TestMainApplicationInterfaceComplete object at 0x7f0fb7b359d0>
app_interface = <tests.test_main_application_interface_complete.ConcreteMainApp object at 0x7f0fb677fc10>

    def test_search_data_error(self, app_interface):
        """Тест обработки ошибок при поиске"""
        app_interface.data_provider.search.side_effect = Exception("Search error")
    
>       result = app_interface.search_data("python")
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_main_application_interface_complete.py:244: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_main_application_interface_complete.py:50: in search_data
    return self.data_provider.search(query, sources=sources)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1124: in __call__
    return self._mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1128: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Mock name='mock.search' id='139705462548624'>, args = ('python',)
kwargs = {'sources': None}, effect = Exception('Search error')

    def _execute_mock_call(self, /, *args, **kwargs):
        # separate from _increment_mock_call so that awaited functions are
        # executed separately from their call, also AsyncMock overrides this method
    
        effect = self.side_effect
        if effect is not None:
            if _is_exception(effect):
>               raise effect
E               Exception: Search error

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1183: Exception
________ TestMainApplicationInterfaceComplete.test_get_storage_stats_error _________

self = <tests.test_main_application_interface_complete.TestMainApplicationInterfaceComplete object at 0x7f0fb7b36150>
app_interface = <tests.test_main_application_interface_complete.ConcreteMainApp object at 0x7f0fb6776450>

    def test_get_storage_stats_error(self, app_interface):
        """Тест обработки ошибок при получении статистики"""
        app_interface.storage.get_stats.side_effect = Exception("Stats error")
    
>       result = app_interface.get_storage_stats()
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_main_application_interface_complete.py:260: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_main_application_interface_complete.py:54: in get_storage_stats
    return self.storage.get_stats()
           ^^^^^^^^^^^^^^^^^^^^^^^^
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1124: in __call__
    return self._mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1128: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Mock name='mock.get_stats' id='139705462520208'>, args = (), kwargs = {}
effect = Exception('Stats error')

    def _execute_mock_call(self, /, *args, **kwargs):
        # separate from _increment_mock_call so that awaited functions are
        # executed separately from their call, also AsyncMock overrides this method
    
        effect = self.side_effect
        if effect is not None:
            if _is_exception(effect):
>               raise effect
E               Exception: Stats error

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1183: Exception
________ TestMainApplicationInterfaceComplete.test_clear_storage_data_error ________

self = <tests.test_main_application_interface_complete.TestMainApplicationInterfaceComplete object at 0x7f0fb7b36a50>
app_interface = <tests.test_main_application_interface_complete.ConcreteMainApp object at 0x7f0fb662ca50>

    def test_clear_storage_data_error(self, app_interface):
        """Тест обработки ошибок при очистке хранилища"""
        app_interface.storage.clear.side_effect = Exception("Clear error")
    
>       result = app_interface.clear_storage_data()
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_main_application_interface_complete.py:275: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_main_application_interface_complete.py:58: in clear_storage_data
    return self.storage.clear()
           ^^^^^^^^^^^^^^^^^^^^
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1124: in __call__
    return self._mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1128: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Mock name='mock.clear' id='139705461171728'>, args = (), kwargs = {}
effect = Exception('Clear error')

    def _execute_mock_call(self, /, *args, **kwargs):
        # separate from _increment_mock_call so that awaited functions are
        # executed separately from their call, also AsyncMock overrides this method
    
        effect = self.side_effect
        if effect is not None:
            if _is_exception(effect):
>               raise effect
E               Exception: Clear error

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1183: Exception
____________ TestMainApplicationInterfaceComplete.test_get_cached_data _____________

self = <tests.test_main_application_interface_complete.TestMainApplicationInterfaceComplete object at 0x7f0fb7b370d0>
app_interface = <tests.test_main_application_interface_complete.ConcreteMainApp object at 0x7f0fb6397210>

    def test_get_cached_data(self, app_interface):
        """Тест получения кэшированных данных"""
        mock_cached_data = [{"id": "1", "title": "Cached Job"}]
        app_interface.data_provider.get_cached_data.return_value = mock_cached_data
    
>       result = app_interface.get_cached_data("python")
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: 'ConcreteMainApp' object has no attribute 'get_cached_data'

tests/test_main_application_interface_complete.py:283: AttributeError
_________ TestMainApplicationInterfaceComplete.test_get_cached_data_error __________

self = <tests.test_main_application_interface_complete.TestMainApplicationInterfaceComplete object at 0x7f0fb7b37750>
app_interface = <tests.test_main_application_interface_complete.ConcreteMainApp object at 0x7f0fb67cf650>

    def test_get_cached_data_error(self, app_interface):
        """Тест обработки ошибок при получении кэшированных данных"""
        app_interface.data_provider.get_cached_data.side_effect = Exception("Cache error")
    
>       result = app_interface.get_cached_data("python")
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: 'ConcreteMainApp' object has no attribute 'get_cached_data'

tests/test_main_application_interface_complete.py:291: AttributeError
____________ TestMainApplicationInterfaceComplete.test_clear_cache_data ____________

self = <tests.test_main_application_interface_complete.TestMainApplicationInterfaceComplete object at 0x7f0fb7b37dd0>
app_interface = <tests.test_main_application_interface_complete.ConcreteMainApp object at 0x7f0fb66149d0>

    def test_clear_cache_data(self, app_interface):
        """Тест очистки кэшированных данных"""
        sources = {"hh": True, "sj": False}
        app_interface.data_provider.clear_cache.return_value = True
    
>       result = app_interface.clear_cache_data(sources)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: 'ConcreteMainApp' object has no attribute 'clear_cache_data'

tests/test_main_application_interface_complete.py:299: AttributeError
_________ TestMainApplicationInterfaceComplete.test_clear_cache_data_error _________

self = <tests.test_main_application_interface_complete.TestMainApplicationInterfaceComplete object at 0x7f0fb7b3c490>
app_interface = <tests.test_main_application_interface_complete.ConcreteMainApp object at 0x7f0fb763bbd0>

    def test_clear_cache_data_error(self, app_interface):
        """Тест обработки ошибок при очистке кэша"""
        app_interface.data_provider.clear_cache.side_effect = Exception("Cache clear error")
    
>       result = app_interface.clear_cache_data({"hh": True})
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: 'ConcreteMainApp' object has no attribute 'clear_cache_data'

tests/test_main_application_interface_complete.py:307: AttributeError
___________ TestMainApplicationInterfaceComplete.test_export_data_empty ____________

self = <tests.test_main_application_interface_complete.TestMainApplicationInterfaceComplete object at 0x7f0fb7b3d190>
app_interface = <tests.test_main_application_interface_complete.ConcreteMainApp object at 0x7f0fb6402fd0>

    def test_export_data_empty(self, app_interface):
        """Тест экспорта пустых данных"""
        result = app_interface.export_data([], "json", "/tmp/export.json")
>       assert result is None
E       AssertionError: assert <Mock name='mock.export()' id='139705458897680'> is None

tests/test_main_application_interface_complete.py:322: AssertionError
___________ TestMainApplicationInterfaceComplete.test_export_data_error ____________

self = <tests.test_main_application_interface_complete.TestMainApplicationInterfaceComplete object at 0x7f0fb7b3d810>
app_interface = <tests.test_main_application_interface_complete.ConcreteMainApp object at 0x7f0fb6602c10>

    def test_export_data_error(self, app_interface):
        """Тест обработки ошибок при экспорте"""
        app_interface.storage.export.side_effect = Exception("Export error")
    
>       result = app_interface.export_data([{"id": "1"}], "json", "/tmp/export.json")
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_main_application_interface_complete.py:328: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_main_application_interface_complete.py:62: in export_data
    return self.storage.export(data, format_type, path)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1124: in __call__
    return self._mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1128: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Mock name='mock.export' id='139705460994512'>
args = ([{'id': '1'}], 'json', '/tmp/export.json'), kwargs = {}
effect = Exception('Export error')

    def _execute_mock_call(self, /, *args, **kwargs):
        # separate from _increment_mock_call so that awaited functions are
        # executed separately from their call, also AsyncMock overrides this method
    
        effect = self.side_effect
        if effect is not None:
            if _is_exception(effect):
>               raise effect
E               Exception: Export error

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1183: Exception
___________ TestMainApplicationInterfaceComplete.test_import_data_error ____________

self = <tests.test_main_application_interface_complete.TestMainApplicationInterfaceComplete object at 0x7f0fb7b3e510>
app_interface = <tests.test_main_application_interface_complete.ConcreteMainApp object at 0x7f0fb67fe810>

    def test_import_data_error(self, app_interface):
        """Тест обработки ошибок при импорте"""
        app_interface.storage.import_data.side_effect = Exception("Import error")
    
>       result = app_interface.import_data("/path/to/import.json", "json")
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_main_application_interface_complete.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_main_application_interface_complete.py:66: in import_data
    return self.storage.import_data(path, format_type)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1124: in __call__
    return self._mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1128: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Mock name='mock.import_data' id='139705463070352'>
args = ('/path/to/import.json', 'json'), kwargs = {}
effect = Exception('Import error')

    def _execute_mock_call(self, /, *args, **kwargs):
        # separate from _increment_mock_call so that awaited functions are
        # executed separately from their call, also AsyncMock overrides this method
    
        effect = self.side_effect
        if effect is not None:
            if _is_exception(effect):
>               raise effect
E               Exception: Import error

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1183: Exception
__________ TestMainApplicationInterfaceComplete.test_setup_logging_error ___________

self = <tests.test_main_application_interface_complete.TestMainApplicationInterfaceComplete object at 0x7f0fb7b3f390>
app_interface = <tests.test_main_application_interface_complete.ConcreteMainApp object at 0x7f0fb6774490>

    def test_setup_logging_error(self, app_interface):
        """Тест обработки ошибок настройки логирования"""
        with patch('logging.basicConfig', side_effect=Exception("Logging error")):
            # Не должно падать
>           app_interface.setup_logging("DEBUG")

tests/test_main_application_interface_complete.py:357: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_main_application_interface_complete.py:71: in setup_logging
    logging.basicConfig(level=level)
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1124: in __call__
    return self._mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1128: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <MagicMock name='basicConfig' id='139705462514768'>, args = ()
kwargs = {'level': 'DEBUG'}, effect = Exception('Logging error')

    def _execute_mock_call(self, /, *args, **kwargs):
        # separate from _increment_mock_call so that awaited functions are
        # executed separately from their call, also AsyncMock overrides this method
    
        effect = self.side_effect
        if effect is not None:
            if _is_exception(effect):
>               raise effect
E               Exception: Logging error

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1183: Exception
_________ TestMainApplicationInterfaceComplete.test_validate_configuration _________

self = <tests.test_main_application_interface_complete.TestMainApplicationInterfaceComplete object at 0x7f0fb7b3fad0>
app_interface = <tests.test_main_application_interface_complete.ConcreteMainApp object at 0x7f0fb638d050>

    def test_validate_configuration(self, app_interface):
        """Тест валидации конфигурации"""
        mock_config = {"api_key": "test", "db_url": "postgres://test"}
    
        with patch.object(app_interface, '_check_api_keys', return_value=True), \
             patch.object(app_interface, '_check_database_connection', return_value=True):
>           result = app_interface.validate_configuration(mock_config)
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E           AttributeError: 'ConcreteMainApp' object has no attribute 'validate_configuration'

tests/test_main_application_interface_complete.py:365: AttributeError
_____ TestMainApplicationInterfaceComplete.test_validate_configuration_invalid _____

self = <tests.test_main_application_interface_complete.TestMainApplicationInterfaceComplete object at 0x7f0fb7b3f7d0>
app_interface = <tests.test_main_application_interface_complete.ConcreteMainApp object at 0x7f0fb6609990>

    def test_validate_configuration_invalid(self, app_interface):
        """Тест валидации некорректной конфигурации"""
        mock_config = {"invalid": "config"}
    
        with patch.object(app_interface, '_check_api_keys', return_value=False):
>           result = app_interface.validate_configuration(mock_config)
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E           AttributeError: 'ConcreteMainApp' object has no attribute 'validate_configuration'

tests/test_main_application_interface_complete.py:373: AttributeError
___________ TestMainApplicationInterfaceIntegration.test_error_recovery ____________

self = <tests.test_main_application_interface_complete.TestMainApplicationInterfaceIntegration object at 0x7f0fb7b44ad0>

    def test_error_recovery(self):
        """Тест восстановления после ошибок"""
        mock_provider = Mock()
        mock_processor = Mock()
        mock_storage = Mock()
    
        # Настройка ошибок
        mock_provider.search.side_effect = Exception("Search error")
    
        app = ConcreteMainApp(mock_provider, mock_processor, mock_storage)
    
        # Приложение должно справляться с ошибками
>       search_results = app.search_data("python")
                         ^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_main_application_interface_complete.py:443: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_main_application_interface_complete.py:50: in search_data
    return self.data_provider.search(query, sources=sources)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1124: in __call__
    return self._mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1128: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Mock name='mock.search' id='139705463093328'>, args = ('python',)
kwargs = {'sources': None}, effect = Exception('Search error')

    def _execute_mock_call(self, /, *args, **kwargs):
        # separate from _increment_mock_call so that awaited functions are
        # executed separately from their call, also AsyncMock overrides this method
    
        effect = self.side_effect
        if effect is not None:
            if _is_exception(effect):
>               raise effect
E               Exception: Search error

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1183: Exception
________ TestVacancyRepositoryFixed.test_repository_init_with_dependencies _________

self = <tests.test_missing_coverage_components.TestVacancyRepositoryFixed object at 0x7f0fb7b90f90>
mock_db_connection = <Mock id='139705461357968'>
mock_validator = <Mock id='139705461343824'>

    def test_repository_init_with_dependencies(self, mock_db_connection, mock_validator):
        """Тест инициализации с зависимостями"""
        if not VACANCY_REPOSITORY_AVAILABLE:
            pytest.skip("VacancyRepository not available")
    
        repo = VacancyRepository(mock_db_connection, mock_validator)
        assert repo is not None
>       assert repo.db_connection == mock_db_connection
               ^^^^^^^^^^^^^^^^^^
E       AttributeError: 'VacancyRepository' object has no attribute 'db_connection'

tests/test_missing_coverage_components.py:190: AttributeError
________ TestLowCoverageComponents.test_cached_api_concrete_implementation _________

self = <tests.test_missing_coverage_components.TestLowCoverageComponents object at 0x7f0fb7b93c10>

    def test_cached_api_concrete_implementation(self):
        """Тест конкретной реализации кэшированного API"""
        try:
            from src.api_modules.cached_api import CachedAPI
    
            class ConcreteCachedAPI(CachedAPI):
                def _get_empty_response(self):
                    return []
    
                def _validate_vacancy(self, vacancy):
                    return bool(vacancy.get('id'))
    
                def get_vacancies(self, query, **kwargs):
                    return [{"id": "1", "title": "Test"}]
    
                def get_vacancies_page(self, query, page=0, per_page=20, **kwargs):
                    return {"items": [], "found": 0}
    
            base_api = Mock()
            with patch('src.utils.cache.FileCache'):
>               api = ConcreteCachedAPI(base_api)
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_missing_coverage_components.py:298: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/api_modules/cached_api.py:41: in __init__
    self.cache_dir = Path(cache_dir)
                     ^^^^^^^^^^^^^^^
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/pathlib.py:871: in __new__
    self = cls._from_parts(args)
           ^^^^^^^^^^^^^^^^^^^^^
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/pathlib.py:509: in _from_parts
    drv, root, parts = self._parse_args(args)
                       ^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'pathlib.PosixPath'>, args = (<Mock id='139705462731024'>,)

    @classmethod
    def _parse_args(cls, args):
        # This is useful when you don't want to create an instance, just
        # canonicalize some constructor arguments.
        parts = []
        for a in args:
            if isinstance(a, PurePath):
                parts += a._parts
            else:
>               a = os.fspath(a)
                    ^^^^^^^^^^^^
E               TypeError: expected str, bytes or os.PathLike object, not Mock

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/pathlib.py:493: TypeError
______ TestLowCoverageComponents.test_base_formatter_concrete_implementation _______

self = <tests.test_missing_coverage_components.TestLowCoverageComponents object at 0x7f0fb7b9c2d0>

    def test_base_formatter_concrete_implementation(self):
        """Тест конкретной реализации базового форматтера"""
        try:
            from src.utils.base_formatter import BaseFormatter
    
            class ConcreteFormatter(BaseFormatter):
                def clean_html_tags(self, text):
                    return str(text)
    
                def format_company_name(self, company):
                    return str(company)
    
                def format_currency(self, currency):
                    return str(currency)
    
                def format_date(self, date):
                    return str(date)
    
                def format_employment_type(self, employment):
                    return str(employment)
    
                def format_experience(self, experience):
                    return str(experience)
    
                def format_number(self, number):
                    return str(number)
    
                def format_salary(self, salary):
                    return str(salary)
    
                def format_schedule(self, schedule):
                    return str(schedule)
    
                def format_text(self, text):
                    return str(text)
    
                def format_vacancy_info(self, vacancy):
                    return str(vacancy)
    
            formatter = ConcreteFormatter()
            assert formatter is not None
>           result = formatter.format("test")
                     ^^^^^^^^^^^^^^^^
E           AttributeError: 'ConcreteFormatter' object has no attribute 'format'

tests/test_missing_coverage_components.py:345: AttributeError
_______________ TestLowCoverageComponents.test_api_methods_coverage ________________

self = <tests.test_missing_coverage_components.TestLowCoverageComponents object at 0x7f0fb7b9c950>
mock_get = <MagicMock name='get' id='139705458584976'>

    @patch('requests.get')
    def test_api_methods_coverage(self, mock_get):
        """Тест покрытия методов API"""
        try:
            from src.api_modules.hh_api import HeadHunterAPI
            from src.api_modules.sj_api import SuperJobAPI
    
            # Тестируем HeadHunter API
            mock_response = Mock()
            mock_response.status_code = 200
            mock_response.json.return_value = {"items": [], "found": 0}
            mock_get.return_value = mock_response
    
            hh_api = HeadHunterAPI()
            if hasattr(hh_api, 'get_vacancies_page'):
                result = hh_api.get_vacancies_page("Python")
>               assert isinstance(result, dict)
E               assert False
E                +  where False = isinstance([], dict)

tests/test_missing_coverage_components.py:367: AssertionError
________________ TestSuperJobAPIComplete.test_deduplicate_vacancies ________________

self = <tests.test_sj_api_complete.TestSuperJobAPIComplete object at 0x7f0fb774e310>
sj_api = <src.api_modules.sj_api.SuperJobAPI object at 0x7f0fb63bb310>

    def test_deduplicate_vacancies(self, sj_api):
        """Тест дедупликации вакансий"""
        mock_vacancies = [
            {"id": "1", "profession": "Test 1"},
            {"id": "2", "profession": "Test 2"}
        ]
    
>       with patch('src.api_modules.cached_api.CachedAPI._deduplicate_vacancies', return_value=mock_vacancies):

tests/test_sj_api_complete.py:187: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1446: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f0fb638cc50>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <class 'src.api_modules.cached_api.CachedAPI'> does not have the attribute '_deduplicate_vacancies'

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1419: AttributeError
___________________ TestPostgresSaver.test_save_vacancies_batch ____________________

self = <tests.test_storage_components_complete.TestPostgresSaver object at 0x7f0fb79ff850>
postgres_saver = <src.storage.postgres_saver.PostgresSaver object at 0x7f0fb6ae8890>

    def test_save_vacancies_batch(self, postgres_saver):
        """Тест пакетного сохранения вакансий"""
        if not STORAGE_COMPONENTS_AVAILABLE:
            pytest.skip("Storage components not available")
    
        vacancies = [
            {"id": "1", "title": "Dev 1"},
            {"id": "2", "title": "Dev 2"}
        ]
    
>       with patch.object(postgres_saver, 'save_vacancy', return_value=True) as mock_save:

tests/test_storage_components_complete.py:162: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1446: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f0fb6ae82d0>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <src.storage.postgres_saver.PostgresSaver object at 0x7f0fb6ae8890> does not have the attribute 'save_vacancy'

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1419: AttributeError
_____________________ TestSimpleDBAdapter.test_insert_vacancy ______________________

self = <tests.test_storage_components_complete.TestSimpleDBAdapter object at 0x7f0fb789dfd0>
db_adapter = <src.storage.simple_db_adapter.SimpleDBAdapter object at 0x7f0fb6b51fd0>

    def test_insert_vacancy(self, db_adapter):
        """Тест вставки вакансии"""
        if not STORAGE_COMPONENTS_AVAILABLE:
            pytest.skip("Storage components not available")
    
        vacancy = {"id": "123", "title": "Test"}
    
>       with patch.object(db_adapter, 'connection') as mock_conn:

tests/test_storage_components_complete.py:239: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1446: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f0fb6b51f50>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <src.storage.simple_db_adapter.SimpleDBAdapter object at 0x7f0fb6b51fd0> does not have the attribute 'connection'

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1419: AttributeError
______________________ TestSimpleDBAdapter.test_get_vacancies ______________________

self = <tests.test_storage_components_complete.TestSimpleDBAdapter object at 0x7f0fb789dd90>
db_adapter = <src.storage.simple_db_adapter.SimpleDBAdapter object at 0x7f0fb63e57d0>

    def test_get_vacancies(self, db_adapter):
        """Тест получения вакансий"""
        if not STORAGE_COMPONENTS_AVAILABLE:
            pytest.skip("Storage components not available")
    
>       with patch.object(db_adapter, 'connection') as mock_conn:

tests/test_storage_components_complete.py:252: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1446: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f0fb63e5d50>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <src.storage.simple_db_adapter.SimpleDBAdapter object at 0x7f0fb63e57d0> does not have the attribute 'connection'

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1419: AttributeError
____________________ TestVacancyRepository.test_delete_vacancy _____________________

self = <tests.test_storage_components_complete.TestVacancyRepository object at 0x7f0fb79a5590>
vacancy_repository = <src.storage.components.vacancy_repository.VacancyRepository object at 0x7f0fb67a1d50>

    def test_delete_vacancy(self, vacancy_repository):
        """Тест удаления вакансии"""
        if not STORAGE_SUBCOMPONENTS_AVAILABLE:
            pytest.skip("Storage subcomponents not available")
    
        # Создаем мок объект вакансии с необходимыми атрибутами
        vacancy = Mock()
        vacancy.vacancy_id = "123"
        vacancy.title = "Test"
    
        if hasattr(vacancy_repository, 'delete_vacancy'):
>           result = vacancy_repository.delete_vacancy(vacancy)
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_storage_components_complete.py:411: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <src.storage.components.vacancy_repository.VacancyRepository object at 0x7f0fb67a1d50>
vacancy = <Mock id='139705479171792'>

    def delete_vacancy(self, vacancy: AbstractVacancy) -> None:
        """
        Удаляет вакансию из хранилища
    
        Args:
            vacancy: Объект вакансии для удаления
        """
        try:
            with self._db_connection.get_connection() as conn:
                with conn.cursor() as cursor:
                    cursor.execute("DELETE FROM vacancies WHERE vacancy_id = %s", (vacancy.vacancy_id,))
                    conn.commit()
    
>                   if cursor.rowcount > 0:
                       ^^^^^^^^^^^^^^^^^^^
E                   TypeError: '>' not supported between instances of 'MagicMock' and 'int'

src/storage/components/vacancy_repository.py:171: TypeError
-------------------------------- Captured log call ---------------------------------
ERROR    src.storage.components.vacancy_repository:vacancy_repository.py:177 Ошибка удаления вакансии 123: '>' not supported between instances of 'MagicMock' and 'int'
______ TestStorageIntegration.test_db_manager_with_postgres_saver_integration ______

self = <tests.test_storage_components_complete.TestStorageIntegration object at 0x7f0fb79a5750>
mock_connect = <MagicMock name='connect' id='139705462075536'>

    @patch('psycopg2.connect')
    def test_db_manager_with_postgres_saver_integration(self, mock_connect):
        """Тест интеграции DBManager с PostgresSaver"""
        if not STORAGE_COMPONENTS_AVAILABLE:
            pytest.skip("Storage components not available")
    
        mock_connection = Mock()
        mock_cursor = Mock()
>       mock_connection.cursor.return_value.__enter__.return_value = mock_cursor
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_storage_components_complete.py:505: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Mock name='mock.cursor()' id='139705462075856'>, name = '__enter__'

    def __getattr__(self, name):
        if name in {'_mock_methods', '_mock_unsafe'}:
            raise AttributeError(name)
        elif self._mock_methods is not None:
            if name not in self._mock_methods or name in _all_magics:
                raise AttributeError("Mock object has no attribute %r" % name)
        elif _is_magic(name):
>           raise AttributeError(name)
E           AttributeError: __enter__

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:655: AttributeError
________ TestStorageIntegration.test_repository_with_validator_integration _________

self = <tests.test_storage_components_complete.TestStorageIntegration object at 0x7f0fb79a7e90>

    def test_repository_with_validator_integration(self):
        """Тест интеграции Repository с Validator"""
        if not STORAGE_SUBCOMPONENTS_AVAILABLE:
            pytest.skip("Storage subcomponents not available")
    
        # Создаем моки с правильными context managers
        mock_connection = Mock()
        mock_cursor = Mock()
>       mock_connection.cursor.return_value.__enter__.return_value = mock_cursor
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_storage_components_complete.py:523: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Mock name='mock.cursor()' id='139705460665040'>, name = '__enter__'

    def __getattr__(self, name):
        if name in {'_mock_methods', '_mock_unsafe'}:
            raise AttributeError(name)
        elif self._mock_methods is not None:
            if name not in self._mock_methods or name in _all_magics:
                raise AttributeError("Mock object has no attribute %r" % name)
        elif _is_magic(name):
>           raise AttributeError(name)
E           AttributeError: __enter__

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:655: AttributeError
__________ TestUINavigationExtended.test_paginate_display_custom_actions ___________

self = <tests.test_ui_navigation_extended.TestUINavigationExtended object at 0x7f0fb7942310>
mock_print = <MagicMock name='print' id='139705466976720'>
mock_input = <MagicMock name='input' id='139705468149776'>

    @patch('builtins.input')
    @patch('builtins.print')
    def test_paginate_display_custom_actions(self, mock_print, mock_input):
        """Тестирование кастомных действий"""
        mock_action = Mock()
        mock_action.__doc__ = "Кастомное действие"
    
        custom_actions = {"c": mock_action}
        mock_input.side_effect = ["c", "q"]
    
        def formatter(item, number):
            return f"{number}: {item}"
    
        self.navigator.paginate_display(
            self.test_items[:5],
            formatter,
            "Custom Actions",
            custom_actions=custom_actions
        )
    
        # Проверяем что действие было вызвано (может быть вызвано с аргументами или без)
>       assert mock_action.called, "Custom action should have been called"
E       AssertionError: Custom action should have been called
E       assert False
E        +  where False = <Mock id='139705466976400'>.called

tests/test_ui_navigation_extended.py:137: AssertionError
__________________ TestUnifiedAPI.test_filter_by_target_companies __________________

self = <tests.test_unified_api.TestUnifiedAPI object at 0x7f0fb790cd90>
unified_api = <src.api_modules.unified_api.UnifiedAPI object at 0x7f0fb6ba1710>

    def test_filter_by_target_companies(self, unified_api):
        """Тест фильтрации по целевым компаниям"""
        # Мокаем TargetCompanies
        with patch('src.config.target_companies.TargetCompanies') as mock_target_companies:
            mock_target_companies.get_hh_ids.return_value = ["company1", "company2"]
            mock_target_companies.get_sj_ids.return_value = ["company3"]
    
            # Тестовые вакансии
            test_vacancies = [
                {"id": "1", "employer": {"id": "company1"}, "source": "hh"},
                {"id": "2", "employer": {"id": "company2"}, "source": "hh"},
                {"id": "3", "employer": {"id": "company3"}, "source": "sj"},
                {"id": "4", "employer": {"id": "unknown"}, "source": "hh"},
            ]
    
            result = unified_api._filter_by_target_companies(test_vacancies)
    
            # Должны остаться только вакансии от целевых компаний
>           assert len(result) == 3
E           assert 0 == 3
E            +  where 0 = len([])

tests/test_unified_api.py:282: AssertionError
___________ TestUnifiedAPI.test_filter_by_target_companies_mixed_sources ___________

self = <tests.test_unified_api.TestUnifiedAPI object at 0x7f0fb7a21850>
unified_api = <src.api_modules.unified_api.UnifiedAPI object at 0x7f0fb6c72190>

    def test_filter_by_target_companies_mixed_sources(self, unified_api):
        """Тест фильтрации вакансий из разных источников"""
        with patch('src.config.target_companies.TargetCompanies') as mock_target_companies:
            mock_target_companies.get_hh_ids.return_value = ["hh_company1", "hh_company2"]
            mock_target_companies.get_sj_ids.return_value = ["sj_company1"]
    
            # Вакансии из разных источников
            test_vacancies = [
                {"id": "1", "employer": {"id": "hh_company1"}, "source": "hh"},
                {"id": "2", "employer": {"id": "hh_company2"}, "source": "hh"},
                {"id": "3", "employer": {"id": "sj_company1"}, "source": "sj"},
                {"id": "4", "employer": {"id": "other_company"}, "source": "hh"},
            ]
    
            result = unified_api._filter_by_target_companies(test_vacancies)
    
            # Должны остаться вакансии от целевых компаний обоих источников
>           assert len(result) == 3
E           assert 0 == 3
E            +  where 0 = len([])

tests/test_unified_api.py:348: AssertionError
______________ TestUnifiedAPIComplete.test_filter_by_target_companies ______________

self = <tests.test_unified_api_complete.TestUnifiedAPIComplete object at 0x7f0fb7a20550>
unified_api = <src.api_modules.unified_api.UnifiedAPI object at 0x7f0fb6678850>

    def test_filter_by_target_companies(self, unified_api):
        """Тест фильтрации по целевым компаниям"""
        mock_vacancies = [
            {
                "id": "1",
                "employer": {"id": "123"},
                "source": "hh"
            },
            {
                "id": "2",
                "employer": {"id": "999"},  # не в целевых
                "source": "hh"
            },
            {
                "id": "3",
                "id_client": "456",  # SJ формат
                "source": "sj"
            }
        ]
    
        mock_companies = [
            Mock(hh_id=123, sj_id=None),
            Mock(hh_id=None, sj_id=456)
        ]
    
>       with patch('src.api_modules.unified_api.TargetCompanies.get_all_companies', return_value=mock_companies):

tests/test_unified_api_complete.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1430: in __enter__
    self.target = self.getter()
                  ^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'src.api_modules.unified_api.TargetCompanies'

    def resolve_name(name):
        """
        Resolve a name to an object.
    
        It is expected that `name` will be a string in one of the following
        formats, where W is shorthand for a valid Python identifier and dot stands
        for a literal period in these pseudo-regexes:
    
        W(.W)*
        W(.W)*:(W(.W)*)?
    
        The first form is intended for backward compatibility only. It assumes that
        some part of the dotted name is a package, and the rest is an object
        somewhere within that package, possibly nested inside other objects.
        Because the place where the package stops and the object hierarchy starts
        can't be inferred by inspection, repeated attempts to import must be done
        with this form.
    
        In the second form, the caller makes the division point clear through the
        provision of a single colon: the dotted name to the left of the colon is a
        package to be imported, and the dotted name to the right is the object
        hierarchy within that package. Only one import is needed in this form. If
        it ends with the colon, then a module object is returned.
    
        The function will return an object (which might be a module), or raise one
        of the following exceptions:
    
        ValueError - if `name` isn't in a recognised format
        ImportError - if an import failed when it shouldn't have
        AttributeError - if a failure occurred when traversing the object hierarchy
                         within the imported package to get to the desired object.
        """
        global _NAME_PATTERN
        if _NAME_PATTERN is None:
            # Lazy import to speedup Python startup time
            import re
            dotted_words = r'(?!\d)(\w+)(\.(?!\d)(\w+))*'
            _NAME_PATTERN = re.compile(f'^(?P<pkg>{dotted_words})'
                                       f'(?P<cln>:(?P<obj>{dotted_words})?)?$',
                                       re.UNICODE)
    
        m = _NAME_PATTERN.match(name)
        if not m:
            raise ValueError(f'invalid format: {name!r}')
        gd = m.groupdict()
        if gd.get('cln'):
            # there is a colon - a one-step import is all that's needed
            mod = importlib.import_module(gd['pkg'])
            parts = gd.get('obj')
            parts = parts.split('.') if parts else []
        else:
            # no colon - have to iterate to find the package boundary
            parts = name.split('.')
            modname = parts.pop(0)
            # first part *must* be a module/package.
            mod = importlib.import_module(modname)
            while parts:
                p = parts[0]
                s = f'{modname}.{p}'
                try:
                    mod = importlib.import_module(s)
                    parts.pop(0)
                    modname = s
                except ImportError:
                    break
        # if we reach this point, mod is the module, already imported, and
        # parts is the list of parts in the object hierarchy to be traversed, or
        # an empty list if just the module is wanted.
        result = mod
        for p in parts:
>           result = getattr(result, p)
                     ^^^^^^^^^^^^^^^^^^
E           AttributeError: module 'src.api_modules.unified_api' has no attribute 'TargetCompanies'

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/pkgutil.py:715: AttributeError
____________ TestUserInterfaceConsolidated.test_main_interface_complete ____________

args = (<tests.test_user_interface_consolidated.TestUserInterfaceConsolidated object at 0x7f0fb77dd590>,)
keywargs = {}

    @wraps(func)
    def patched(*args, **keywargs):
>       with self.decoration_helper(patched,
                                    args,
                                    keywargs) as (newargs, newkeywargs):

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1375: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
           ^^^^^^^^^^^^^^
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1357: in decoration_helper
    arg = exit_stack.enter_context(patching)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/contextlib.py:517: in enter_context
    result = _enter(cm)
             ^^^^^^^^^^
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1446: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f0fb77def10>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'src.user_interface' from '/home/runner/workspace/tests/../src/user_interface.py'> does not have the attribute 'DBManager'

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1419: AttributeError
_______ TestUserInterfaceConsolidated.test_interface_components_integration ________

self = <tests.test_user_interface_consolidated.TestUserInterfaceConsolidated object at 0x7f0fb77df4d0>

    def test_interface_components_integration(self):
        """Тестирование интеграции компонентов интерфейса"""
        try:
            from src.interfaces.main_application_interface import MainApplicationInterface
    
            # Создаем конкретную реализацию абстрактного класса
            class ConcreteMainApplication(MainApplicationInterface):
                def run_application(self):
                    pass
    
>           interface = ConcreteMainApplication()
                        ^^^^^^^^^^^^^^^^^^^^^^^^^
E           TypeError: MainApplicationInterface.__init__() missing 3 required positional arguments: 'provider', 'processor', and 'storage'

tests/test_user_interface_consolidated.py:96: TypeError
___________ TestVacancyDisplayHandler.test_vacancy_display_handler_init ____________

self = <tests.test_vacancy_display_handler.TestVacancyDisplayHandler object at 0x7f0fb797ef90>

    def test_vacancy_display_handler_init(self):
        """Тест инициализации обработчика отображения вакансий"""
>       handler = VacancyDisplayHandler()
                  ^^^^^^^^^^^^^^^^^^^^^^^
E       TypeError: VacancyDisplayHandler.__init__() missing 1 required positional argument: 'storage'

tests/test_vacancy_display_handler.py:43: TypeError
__________ TestVacancyOperationsCoordinatorComplete.test_coordinator_init __________

self = <tests.test_vacancy_operations_coordinator_complete.TestVacancyOperationsCoordinatorComplete object at 0x7f0fb7905010>

    def test_coordinator_init(self):
        """Тест инициализации координатора операций с вакансиями"""
>       coordinator = VacancyOperationsCoordinator()
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       TypeError: VacancyOperationsCoordinator.__init__() missing 2 required positional arguments: 'unified_api' and 'storage'

tests/test_vacancy_operations_coordinator_complete.py:50: TypeError
================================== tests coverage ==================================
_________________ coverage: platform linux, python 3.11.13-final-0 _________________

Name                                                     Stmts   Miss  Cover   Missing
--------------------------------------------------------------------------------------
src/__init__.py                                              0      0   100%
src/api_modules/__init__.py                                  0      0   100%
src/api_modules/base_api.py                                 23      0   100%
src/api_modules/cached_api.py                              168     46    73%   114-115, 144-147, 157, 166-168, 183, 186-187, 203, 215-238, 247, 267-269, 289, 298-299, 308-310, 335-336, 340-342
src/api_modules/get_api.py                                  53     19    64%   46-54, 64, 73-74, 102-103, 116-118, 124, 126-132, 134, 136
src/api_modules/hh_api.py                                  142     25    82%   77-85, 169, 178-180, 219-221, 233, 256, 276, 289, 293-295, 329-331
src/api_modules/sj_api.py                                  128     28    78%   99-106, 206-210, 222, 263-264, 277-279, 291-292, 296-308
src/api_modules/unified_api.py                             270     77    71%   124, 133, 154-155, 175-176, 212-213, 221-240, 245, 291-293, 304-306, 316-322, 390-391, 401-418, 422-432, 436-458
src/config/__init__.py                                       0      0   100%
src/config/api_config.py                                    13      0   100%
src/config/app_config.py                                    17      0   100%
src/config/db_config.py                                     61     27    56%   24, 44-48, 85-88, 96-99, 104, 107, 115, 133-136, 156-172
src/config/hh_api_config.py                                 21      2    90%   31, 37
src/config/sj_api_config.py                                 49     18    63%   39, 59, 62, 68-75, 79-87
src/config/target_companies.py                              61     25    59%   119, 124-130, 135-138, 143-146, 151, 156-162, 167, 185, 190
src/config/ui_config.py                                     27      8    70%   36-42, 54-58, 79
src/interfaces/__init__.py                                   0      0   100%
src/interfaces/main_application_interface.py               121     88    27%   76, 89-98, 109-136, 140-152, 156-161, 166-180, 184-214, 224-225, 230, 234-236
src/storage/__init__.py                                      6      0   100%
src/storage/abstract.py                                     14      0   100%
src/storage/abstract_db_manager.py                          21      6    71%   16, 26, 36, 46, 59, 69
src/storage/components/__init__.py                           0      0   100%
src/storage/components/database_connection.py               53     11    79%   14-16, 19-20, 77-78, 88-89, 97-98
src/storage/components/vacancy_repository.py               113     65    42%   50-51, 96-98, 119-134, 146-150, 154-156, 172-174, 190-209, 221-291
src/storage/components/vacancy_validator.py                 65     22    66%   62, 65, 73-74, 78-79, 92, 99, 110, 115, 120, 138-152
src/storage/db_manager.py                                  348    224    36%   17-24, 63, 83-139, 223-228, 246-247, 262-272, 282-338, 348-361, 376-405, 419-451, 519-522, 525-528, 533-535, 574-576, 590-651, 665, 671-728, 741-813, 818-820, 832, 844-845, 857-859, 871-877, 892-1022
src/storage/interfaces/typed_data_processor.py              46     25    46%   32, 45, 64, 78, 94, 100, 106-117, 124, 130-133, 139-148
src/storage/postgres_saver.py                              790    557    29%   10-13, 72-74, 109-111, 124-125, 133-140, 145-146, 148-151, 176-183, 188-194, 199-200, 202-205, 263-265, 280-281, 295-305, 310-317, 322-323, 325-328, 338, 342-343, 346, 374-380, 389-390, 399-400, 404-409, 417-419, 427-428, 442-445, 452, 455-458, 473, 480, 487, 594-598, 603-606, 627-634, 655, 662-664, 678, 690-692, 704-708, 721-779, 783-895, 918-958, 961, 968-970, 974-992, 996-1020, 1024-1048, 1055, 1067-1098, 1102-1113, 1125-1180, 1184-1196, 1208-1251, 1264-1303, 1323-1574, 1587-1601, 1611, 1614, 1617-1635
src/storage/services/__init__.py                             4      0   100%
src/storage/services/abstract_filter_service.py             30      7    77%   34, 44, 64, 88, 101, 114, 127
src/storage/services/abstract_storage_service.py            25      6    76%   34, 47, 60, 73, 83, 93
src/storage/services/company_id_filter_service.py           94     62    34%   49, 62, 68-76, 85-135, 141-202, 206-214, 223
src/storage/services/deduplication_service.py               64     43    33%   15-16, 20-21, 43, 56-129, 133-142, 146-154, 183, 192
src/storage/services/filtering_service.py                  105     66    37%   15-16, 20-21, 25-26, 48, 76-88, 95-132, 143-155, 159-170, 189-199, 228, 237
src/storage/services/sql_deduplication_service.py           64     49    23%   44-64, 68-111, 116-148, 152-160, 173-182
src/storage/services/sql_filter_service.py                  89     63    29%   47, 59-78, 82-146, 152-191, 195-202, 207-209, 218-247
src/storage/services/vacancy_processing_coordinator.py      44      0   100%
src/storage/services/vacancy_storage_service.py            334    245    27%   15-16, 20-21, 25-26, 31-32, 37-38, 42-43, 47-48, 52-53, 57-58, 93-94, 119-146, 150-170, 176-194, 211-215, 220-222, 226-238, 244-320, 334, 338-339, 360-362, 366-395, 402-404, 417-469, 499, 511-535, 539-590, 594-601, 606, 610, 614, 618
src/storage/simple_db_adapter.py                           142    116    18%   21, 25, 29, 33, 37-43, 50-51, 54, 57, 61-101, 105-117, 121, 125-165, 169-202, 206-210, 219
src/storage/storage_factory.py                              13      0   100%
src/ui_interfaces/__init__.py                                0      0   100%
src/ui_interfaces/console_interface.py                     394    306    22%   23-25, 69, 82, 84, 86, 88, 90, 92, 94, 97, 100, 102-110, 116-127, 157, 161, 165, 169, 173-224, 228-301, 305, 309, 319-355, 359, 370-371, 382-385, 395-544, 548-579, 584-604
src/ui_interfaces/source_selector.py                        44     30    32%   25-51, 64, 74-79
src/ui_interfaces/vacancy_display_handler.py                72     58    19%   32-70, 74-107, 111-141
src/ui_interfaces/vacancy_operations_coordinator.py        194    105    46%   68-79, 100, 102, 104, 108, 116-122, 126-165, 169-192, 196-198, 211, 248-273, 302-322
src/ui_interfaces/vacancy_search_handler.py                152    127    16%   38-76, 90-114, 124, 135-170, 180-197, 209-232, 248-262, 272-308
src/user_interface.py                                       55     47    15%   26-94, 98
src/utils/__init__.py                                        0      0   100%
src/utils/abstract_filter.py                                26     14    46%   30, 47, 61, 75, 88-102
src/utils/api_data_filter.py                               154     88    43%   9-10, 25, 55-56, 71-83, 97, 105-106, 122, 130-131, 148-160, 173-185, 191-196, 206, 212, 215, 217, 223-241, 245, 256, 269, 275-284, 288-307
src/utils/base_formatter.py                                 38     11    71%   14, 19, 24, 29, 34, 39, 44, 49, 54, 59, 64
src/utils/cache.py                                         135     44    67%   45-46, 61-62, 78, 93-94, 98-100, 115-117, 124-126, 130-139, 165, 169-170, 174-176, 205-210, 221-224, 227, 236-238, 244
src/utils/data_normalizers.py                               75     13    83%   77-80, 107, 113-121, 154-162
src/utils/db_manager_demo.py                               236    218     8%   32, 38-64, 73-81, 85-103, 107-155, 159-211, 215-224, 228-272, 276-315, 319-370, 377-382, 386
src/utils/decorators.py                                     73     53    27%   24-52, 56-57, 61, 77-91, 97-106, 112-121
src/utils/description_parser.py                             70     55    21%   41-64, 77-103, 116-135, 141-177
src/utils/env_loader.py                                     59     34    42%   32-33, 41-76, 104-111
src/utils/file_handlers.py                                  38     25    34%   36-48, 57-76
src/utils/menu_manager.py                                   49      8    84%   38, 52-56, 77, 93
src/utils/paginator.py                                      28      9    68%   43-44, 51-52, 57-61
src/utils/salary.py                                        113     18    84%   35-36, 55-61, 71-72, 78, 94, 152, 157, 164, 181, 207
src/utils/search_utils.py                                  156      6    96%   204, 215, 219, 223, 227, 282
src/utils/source_manager.py                                 60     38    37%   65, 77-80, 92-95, 108-119, 131-134, 146, 158-161, 173-176, 188-191, 198-200
src/utils/ui_helpers.py                                    161      4    98%   135, 225-226, 325
src/utils/ui_navigation.py                                  99      0   100%
src/utils/vacancy_formatter.py                             167     59    65%   122, 129, 148, 154, 159-164, 170-171, 176, 182, 188-201, 206, 213, 218, 225, 229-231, 235-241, 246, 259-262, 273-304
src/utils/vacancy_operations.py                            165     99    40%   43, 64, 75-87, 111, 122-134, 159, 170-182, 220-244, 248-261, 264-265, 268-269, 290-310, 320-339, 346-370
src/utils/vacancy_stats.py                                  86     53    38%   57-60, 83-91, 95-100, 110-158, 163-165
src/vacancies/__init__.py                                    0      0   100%
src/vacancies/abstract.py                                   10      0   100%
src/vacancies/abstract_models.py                            99     28    72%   18, 23, 28, 33, 38, 44, 53, 58, 63, 69, 75, 84, 89, 94, 100, 106, 115, 120, 125, 130, 135, 140, 146, 155, 160, 165, 171, 177
src/vacancies/models.py                                    390    212    46%   40, 44, 48, 64, 77, 81, 89, 91, 93, 98-102, 106, 122, 126, 131-133, 141, 144, 149, 153, 169, 173, 178-180, 188, 191, 196, 200, 299, 317, 329-332, 344, 348, 352, 358, 370, 374, 378, 384, 404-438, 443-451, 456-651, 670, 686, 701-706, 720, 725-727, 731-733, 737-739, 743-745, 749
src/vacancies/parsers/__init__.py                           55     11    80%   16, 21, 26, 31, 36, 88, 97, 106, 111, 116, 121
src/vacancies/parsers/base_parser.py                         9      2    78%   19, 32
src/vacancies/parsers/hh_parser.py                          55     10    82%   21, 32-33, 55-57, 96-98, 119
src/vacancies/parsers/sj_parser.py                          57     47    18%   24-43, 57-65, 98-147
--------------------------------------------------------------------------------------
TOTAL                                                     7192   3762    48%
============================= short test summary info ==============================
FAILED tests/test_api_modules.py::TestAPIModules::test_base_api_methods - AttributeError: 'ConcreteJobAPI' object has no attribute 'get_vacancy_details'
FAILED tests/test_api_modules.py::TestAPIModules::test_cached_api_caching_functionality - TypeError: argument of type 'FileCache' is not iterable
FAILED tests/test_api_modules.py::TestAPIModules::test_cached_api_clear_cache - TypeError: argument of type 'FileCache' is not iterable
FAILED tests/test_api_modules.py::TestAPIModules::test_api_caching_performance - TypeError: argument of type 'FileCache' is not iterable
FAILED tests/test_base_formatter.py::TestBaseFormatter::test_abstract_methods_exist - AssertionError: assert 'format_vacancy' in frozenset({'clean_html_tags', 'forma...
FAILED tests/test_get_api_complete.py::TestGetAPIComplete::test_session_creation - AttributeError: 'APIConnector' object has no attribute 'session'
FAILED tests/test_get_api_complete.py::TestGetAPIComplete::test_make_request_success - AttributeError: 'APIConnector' object has no attribute '_make_request'
FAILED tests/test_get_api_complete.py::TestGetAPIComplete::test_make_request_http_error - AttributeError: 'APIConnector' object has no attribute '_make_request'
FAILED tests/test_get_api_complete.py::TestGetAPIComplete::test_make_request_connection_error - AttributeError: 'APIConnector' object has no attribute '_make_request'
FAILED tests/test_get_api_complete.py::TestGetAPIComplete::test_make_request_timeout - AttributeError: 'APIConnector' object has no attribute '_make_request'
FAILED tests/test_get_api_complete.py::TestGetAPIComplete::test_make_request_json_decode_error - AttributeError: 'APIConnector' object has no attribute '_make_request'
FAILED tests/test_get_api_complete.py::TestGetAPIComplete::test_make_request_generic_exception - AttributeError: 'APIConnector' object has no attribute '_make_request'
FAILED tests/test_get_api_complete.py::TestGetAPIComplete::test_get_vacancies_not_implemented - AttributeError: 'APIConnector' object has no attribute 'get_vacancies'
FAILED tests/test_get_api_complete.py::TestGetAPIComplete::test_make_request_with_custom_timeout - AttributeError: <src.api_modules.get_api.APIConnector object at 0x7f0fb77133d0>...
FAILED tests/test_get_api_complete.py::TestGetAPIComplete::test_make_request_empty_response - AttributeError: 'APIConnector' object has no attribute '_make_request'
FAILED tests/test_get_api_complete.py::TestGetAPIComplete::test_make_request_status_code_handling - AttributeError: 'APIConnector' object has no attribute '_make_request'
FAILED tests/test_get_api_complete.py::TestGetAPIComplete::test_session_attributes - AttributeError: 'APIConnector' object has no attribute 'session'
FAILED tests/test_get_api_complete.py::TestGetAPIComplete::test_make_request_params_handling - AttributeError: 'APIConnector' object has no attribute '_make_request'
FAILED tests/test_get_api_complete.py::TestGetAPIComplete::test_make_request_none_params - AttributeError: 'APIConnector' object has no attribute '_make_request'
FAILED tests/test_get_api_complete.py::TestGetAPIComplete::test_class_attributes - AssertionError: assert False
FAILED tests/test_get_api_complete.py::TestGetAPIComplete::test_abstract_method_inheritance - AttributeError: 'APIConnector' object has no attribute 'get_vacancies'
FAILED tests/test_get_api_complete.py::TestGetAPIComplete::test_make_request_error_logging - AttributeError: 'APIConnector' object has no attribute '_make_request'
FAILED tests/test_get_api_complete.py::TestGetAPIComplete::test_method_signatures - AttributeError: 'APIConnector' object has no attribute '_make_request'
FAILED tests/test_interfaces.py::TestMainApplicationInterface::test_interface_creation - TypeError: Can't instantiate abstract class MainApplicationInterface with abstr...
FAILED tests/test_main_application_interface.py::TestMainApplicationInterface::test_main_application_interface_init - TypeError: MainApplicationInterface.__init__() missing 3 required positional ar...
FAILED tests/test_main_application_interface.py::TestMainApplicationInterface::test_main_application_interface_concrete_implementation - TypeError: MainApplicationInterface.__init__() missing 3 required positional ar...
FAILED tests/test_main_application_interface_complete.py::TestMainApplicationInterfaceComplete::test_concrete_run_application - AttributeError: <tests.test_main_application_interface_complete.ConcreteMainApp...
FAILED tests/test_main_application_interface_complete.py::TestMainApplicationInterfaceComplete::test_get_data_sources - AttributeError: 'ConcreteMainApp' object has no attribute 'get_data_sources'
FAILED tests/test_main_application_interface_complete.py::TestMainApplicationInterfaceComplete::test_get_data_sources_error - AttributeError: 'ConcreteMainApp' object has no attribute 'get_data_sources'
FAILED tests/test_main_application_interface_complete.py::TestMainApplicationInterfaceComplete::test_validate_sources - AttributeError: 'ConcreteMainApp' object has no attribute 'validate_sources'
FAILED tests/test_main_application_interface_complete.py::TestMainApplicationInterfaceComplete::test_validate_sources_error - AttributeError: 'ConcreteMainApp' object has no attribute 'validate_sources'
FAILED tests/test_main_application_interface_complete.py::TestMainApplicationInterfaceComplete::test_process_data_error - Exception: Processing error
FAILED tests/test_main_application_interface_complete.py::TestMainApplicationInterfaceComplete::test_store_data_error - Exception: Storage error
FAILED tests/test_main_application_interface_complete.py::TestMainApplicationInterfaceComplete::test_search_data_no_sources - AssertionError: expected call not found.
FAILED tests/test_main_application_interface_complete.py::TestMainApplicationInterfaceComplete::test_search_data_error - Exception: Search error
FAILED tests/test_main_application_interface_complete.py::TestMainApplicationInterfaceComplete::test_get_storage_stats_error - Exception: Stats error
FAILED tests/test_main_application_interface_complete.py::TestMainApplicationInterfaceComplete::test_clear_storage_data_error - Exception: Clear error
FAILED tests/test_main_application_interface_complete.py::TestMainApplicationInterfaceComplete::test_get_cached_data - AttributeError: 'ConcreteMainApp' object has no attribute 'get_cached_data'
FAILED tests/test_main_application_interface_complete.py::TestMainApplicationInterfaceComplete::test_get_cached_data_error - AttributeError: 'ConcreteMainApp' object has no attribute 'get_cached_data'
FAILED tests/test_main_application_interface_complete.py::TestMainApplicationInterfaceComplete::test_clear_cache_data - AttributeError: 'ConcreteMainApp' object has no attribute 'clear_cache_data'
FAILED tests/test_main_application_interface_complete.py::TestMainApplicationInterfaceComplete::test_clear_cache_data_error - AttributeError: 'ConcreteMainApp' object has no attribute 'clear_cache_data'
FAILED tests/test_main_application_interface_complete.py::TestMainApplicationInterfaceComplete::test_export_data_empty - AssertionError: assert <Mock name='mock.export()' id='139705458897680'> is None
FAILED tests/test_main_application_interface_complete.py::TestMainApplicationInterfaceComplete::test_export_data_error - Exception: Export error
FAILED tests/test_main_application_interface_complete.py::TestMainApplicationInterfaceComplete::test_import_data_error - Exception: Import error
FAILED tests/test_main_application_interface_complete.py::TestMainApplicationInterfaceComplete::test_setup_logging_error - Exception: Logging error
FAILED tests/test_main_application_interface_complete.py::TestMainApplicationInterfaceComplete::test_validate_configuration - AttributeError: 'ConcreteMainApp' object has no attribute 'validate_configuration'
FAILED tests/test_main_application_interface_complete.py::TestMainApplicationInterfaceComplete::test_validate_configuration_invalid - AttributeError: 'ConcreteMainApp' object has no attribute 'validate_configuration'
FAILED tests/test_main_application_interface_complete.py::TestMainApplicationInterfaceIntegration::test_error_recovery - Exception: Search error
FAILED tests/test_missing_coverage_components.py::TestVacancyRepositoryFixed::test_repository_init_with_dependencies - AttributeError: 'VacancyRepository' object has no attribute 'db_connection'
FAILED tests/test_missing_coverage_components.py::TestLowCoverageComponents::test_cached_api_concrete_implementation - TypeError: expected str, bytes or os.PathLike object, not Mock
FAILED tests/test_missing_coverage_components.py::TestLowCoverageComponents::test_base_formatter_concrete_implementation - AttributeError: 'ConcreteFormatter' object has no attribute 'format'
FAILED tests/test_missing_coverage_components.py::TestLowCoverageComponents::test_api_methods_coverage - assert False
FAILED tests/test_sj_api_complete.py::TestSuperJobAPIComplete::test_deduplicate_vacancies - AttributeError: <class 'src.api_modules.cached_api.CachedAPI'> does not have th...
FAILED tests/test_storage_components_complete.py::TestPostgresSaver::test_save_vacancies_batch - AttributeError: <src.storage.postgres_saver.PostgresSaver object at 0x7f0fb6ae8...
FAILED tests/test_storage_components_complete.py::TestSimpleDBAdapter::test_insert_vacancy - AttributeError: <src.storage.simple_db_adapter.SimpleDBAdapter object at 0x7f0f...
FAILED tests/test_storage_components_complete.py::TestSimpleDBAdapter::test_get_vacancies - AttributeError: <src.storage.simple_db_adapter.SimpleDBAdapter object at 0x7f0f...
FAILED tests/test_storage_components_complete.py::TestVacancyRepository::test_delete_vacancy - TypeError: '>' not supported between instances of 'MagicMock' and 'int'
FAILED tests/test_storage_components_complete.py::TestStorageIntegration::test_db_manager_with_postgres_saver_integration - AttributeError: __enter__
FAILED tests/test_storage_components_complete.py::TestStorageIntegration::test_repository_with_validator_integration - AttributeError: __enter__
FAILED tests/test_ui_navigation_extended.py::TestUINavigationExtended::test_paginate_display_custom_actions - AssertionError: Custom action should have been called
FAILED tests/test_unified_api.py::TestUnifiedAPI::test_filter_by_target_companies - assert 0 == 3
FAILED tests/test_unified_api.py::TestUnifiedAPI::test_filter_by_target_companies_mixed_sources - assert 0 == 3
FAILED tests/test_unified_api_complete.py::TestUnifiedAPIComplete::test_filter_by_target_companies - AttributeError: module 'src.api_modules.unified_api' has no attribute 'TargetCo...
FAILED tests/test_user_interface_consolidated.py::TestUserInterfaceConsolidated::test_main_interface_complete - AttributeError: <module 'src.user_interface' from '/home/runner/workspace/tests...
FAILED tests/test_user_interface_consolidated.py::TestUserInterfaceConsolidated::test_interface_components_integration - TypeError: MainApplicationInterface.__init__() missing 3 required positional ar...
FAILED tests/test_vacancy_display_handler.py::TestVacancyDisplayHandler::test_vacancy_display_handler_init - TypeError: VacancyDisplayHandler.__init__() missing 1 required positional argum...
FAILED tests/test_vacancy_operations_coordinator_complete.py::TestVacancyOperationsCoordinatorComplete::test_coordinator_init - TypeError: VacancyOperationsCoordinator.__init__() missing 2 required positiona...
=================== 67 failed, 1225 passed, 37 skipped in 13.67s ===================
~/workspace$ 