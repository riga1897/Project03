~/workspace$ pytest tests/test_integration.py -v
============================ test session starts ============================
platform linux -- Python 3.11.13, pytest-8.4.1, pluggy-1.6.0 -- /nix/store/2lcqw1d28vklbk8ikiwad28iq2smwndv-python-wrapped-0.1.0/bin/python3
cachedir: .pytest_cache
rootdir: /home/runner/workspace/tests
configfile: pytest.ini
plugins: mock-3.14.1, cov-6.2.1
collected 11 items                                                          

tests/test_integration.py::TestStorageIntegration::test_postgres_saver_integration FAILED [  9%]
tests/test_integration.py::TestAPIIntegration::test_hh_api_integration PASSED [ 18%]
tests/test_integration.py::TestAPIIntegration::test_superjob_api_integration PASSED [ 27%]
tests/test_integration.py::TestFullWorkflowIntegration::test_search_and_save_workflow FAILED [ 36%]
tests/test_integration.py::TestCacheIntegration::test_cache_integration PASSED [ 45%]
tests/test_integration.py::TestErrorHandlingIntegration::test_api_error_handling PASSED [ 54%]
tests/test_integration.py::TestErrorHandlingIntegration::test_database_error_handling PASSED [ 63%]
tests/test_integration.py::TestFormatterIntegration::test_vacancy_formatter_integration PASSED [ 72%]
tests/test_integration.py::TestFormatterIntegration::test_brief_formatter_integration PASSED [ 81%]
tests/test_integration.py::TestVacancyOperationsIntegration::test_vacancy_operations_filters PASSED [ 90%]
tests/test_integration.py::TestVacancyOperationsIntegration::test_vacancy_operations_search PASSED [100%]

================================= FAILURES ==================================
__________ TestStorageIntegration.test_postgres_saver_integration ___________

self = <tests.test_integration.TestStorageIntegration object at 0x7fb69bb87b10>
mock_connect = <MagicMock name='connect' id='140422237250896'>
mock_execute_values = <MagicMock name='execute_values' id='140422237301008'>
sample_vacancy = <src.vacancies.models.Vacancy object at 0x7fb69b12e820>

    @patch("psycopg2.extras.execute_values")
    @patch("psycopg2.connect")
    def test_postgres_saver_integration(self, mock_connect, mock_execute_values, sample_vacancy):
        """Тест интеграции с PostgreSQL"""
        # Настраиваем мок подключения
        mock_conn = Mock()
        mock_cursor = Mock()
        mock_cursor.rowcount = 1
        mock_cursor.fetchall.return_value = []
        # Настраиваем кодировку для psycopg2
        mock_conn.encoding = "UTF8"
        mock_cursor.connection = mock_conn
    
        # Исправляем мок для field_info - возвращаем правильную структуру
        # Добавляем больше ответов для всех возможных запросов
        mock_responses = [
            (0,),  # для check database exists
        ]
        # Добавляем ответы для каждого поля в required_fields (около 20 полей)
        for _ in range(25):
            mock_responses.extend([
                ("column_name", "integer"),
                ("column_name", "text"),
                ("column_name", "varchar"),
                ("column_name", "timestamp"),
            ])
    
        mock_cursor.fetchone.side_effect = mock_responses
        mock_conn.cursor.return_value = mock_cursor
        mock_connect.return_value = mock_conn
    
        # Настраиваем мок для execute_values
        mock_execute_values.return_value = None
    
        # Создаем хранилище и тестируем операции
        storage = PostgresSaver()
    
        # Тест добавления
        result = storage.add_vacancy(sample_vacancy)
>       assert result is True
E       assert [] is True

tests/test_integration.py:80: AssertionError
_________ TestFullWorkflowIntegration.test_search_and_save_workflow _________

self = <tests.test_integration.TestFullWorkflowIntegration object at 0x7fb699900390>
mock_connect_api = <MagicMock name='_CachedAPI__connect_to_api' id='140422233071824'>
mock_connect_db = <MagicMock name='connect' id='140422233077648'>
mock_execute_values = <MagicMock name='execute_values' id='140422233083344'>
sample_vacancy = <src.vacancies.models.Vacancy object at 0x7fb699dd28f0>

    @patch("psycopg2.extras.execute_values")
    @patch("psycopg2.connect")
    @patch("src.api_modules.hh_api.HeadHunterAPI._CachedAPI__connect_to_api")
    def test_search_and_save_workflow(self, mock_connect_api, mock_connect_db, mock_execute_values, sample_vacancy):
        """Тест полного процесса поиска и сохранения"""
        # Настраиваем мок для API
        mock_connect_api.return_value = {
            "items": [
                {
                    "id": "789",
                    "name": "Integration Test Job",
                    "alternate_url": "https://hh.ru/vacancy/789",
                    "employer": {"name": "Integration Company"},
                    "published_at": "2024-01-01T00:00:00+03:00",
                    "source": "hh.ru",
                }
            ],
            "found": 1,
            "pages": 1,
        }
    
        # Настраиваем мок для базы данных
        mock_conn = Mock()
        mock_cursor = Mock()
        mock_cursor.rowcount = 1
        mock_cursor.fetchall.return_value = []
        # Настраиваем кодировку для psycopg2
        mock_conn.encoding = "UTF8"
        mock_cursor.connection = mock_conn
    
        # Настраиваем правильные ответы для всех запросов
        mock_responses = [
            (0,),  # для check database exists
        ]
        # Добавляем ответы для каждого поля в required_fields (около 20 полей)
        for _ in range(25):
            mock_responses.extend([
                ("column_name", "integer"),
                ("column_name", "text"),
                ("column_name", "varchar"),
                ("column_name", "timestamp"),
            ])
    
        mock_cursor.fetchone.side_effect = mock_responses
        mock_conn.cursor.return_value = mock_cursor
        mock_connect_db.return_value = mock_conn
    
        # Настраиваем мок для execute_values
        mock_execute_values.return_value = None
    
        # Выполняем поиск
        api = HeadHunterAPI()
        vacancies_data = api.get_vacancies(search_query="python")
    
        # Конвертируем в объекты Vacancy
        vacancies = [Vacancy.from_dict(item) for item in vacancies_data]
    
        # Сохраняем результаты
        storage = PostgresSaver()
        for vacancy in vacancies:
            result = storage.add_vacancy(vacancy)
>           assert result is True
E           assert [] is True

tests/test_integration.py:228: AssertionError
--------------------------- Captured stderr call ----------------------------
Fetching pages: 100%|██████████| 1/1 [00:00<00:00, 6710.89page/s, vacancies=1]
========================== short test summary info ==========================
FAILED tests/test_integration.py::TestStorageIntegration::test_postgres_saver_integration - assert [] is True
FAILED tests/test_integration.py::TestFullWorkflowIntegration::test_search_and_save_workflow - assert [] is True
======================== 2 failed, 9 passed in 0.22s ========================
~/workspace$ 