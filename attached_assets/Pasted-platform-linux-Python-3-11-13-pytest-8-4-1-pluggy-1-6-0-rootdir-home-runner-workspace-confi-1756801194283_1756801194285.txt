platform linux -- Python 3.11.13, pytest-8.4.1, pluggy-1.6.0
rootdir: /home/runner/workspace
configfile: pyproject.toml
plugins: mock-3.14.1, cov-6.2.1
collected 675 items / 1 error                                                                  

============================================ ERRORS ============================================
__________________________ ERROR collecting tests/test_env_loader.py ___________________________
tests/test_env_loader.py:189: in <module>
    class MockEnvLoader:
tests/test_env_loader.py:280: in MockEnvLoader
    def validate_required_vars(self, required_vars: List[str]) -> List[str]:
                                                    ^^^^
E   NameError: name 'List' is not defined
=================================== short test summary info ====================================
ERROR tests/test_env_loader.py - NameError: name 'List' is not defined
!!!!!!!!!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!!!!!!!!!
======================================= 1 error in 0.84s =======================================
~/workspace$ pytest
===================================== test session starts ======================================
platform linux -- Python 3.11.13, pytest-8.4.1, pluggy-1.6.0
rootdir: /home/runner/workspace
configfile: pyproject.toml
plugins: mock-3.14.1, cov-6.2.1
collected 686 items                                                                            

tests/test_abstract.py ........                                                          [  1%]
tests/test_abstract_db_manager.py ....                                                   [  1%]
tests/test_api_config.py ....                                                            [  2%]
tests/test_api_data_filter.py ........                                                   [  3%]
tests/test_api_modules.py .............................                                  [  7%]
tests/test_app_config.py .....                                                           [  8%]
tests/test_base_api.py ......                                                            [  9%]
tests/test_base_formatter.py ..........                                                  [ 10%]
tests/test_base_parser.py ......                                                         [ 11%]
tests/test_cache.py .......                                                              [ 12%]
tests/test_cache_manager.py ....................                                         [ 15%]
tests/test_cached_api.py ...........                                                     [ 17%]
tests/test_comprehensive_coverage.py ........................                            [ 20%]
tests/test_console_interface.py ......                                                   [ 21%]
tests/test_db_config.py .....                                                            [ 22%]
tests/test_db_manager.py .................                                               [ 24%]
tests/test_db_manager_demo.py .FFFFFFFF                                                  [ 26%]
tests/test_decorators.py .F........                                                      [ 27%]
tests/test_env_loader.py FFFF..FFFFF                                                     [ 29%]
tests/test_extended_coverage.py ...................E..EE                                 [ 32%]
tests/test_file_handlers.py ............                                                 [ 34%]
tests/test_full_src_coverage.py .............                                            [ 36%]
tests/test_get_api.py ......                                                             [ 37%]
tests/test_hh_api.py .......                                                             [ 38%]
tests/test_hh_api_config.py .....                                                        [ 38%]
tests/test_hh_parser.py ........                                                         [ 40%]
tests/test_integration.py .............                                                  [ 41%]
tests/test_menu_manager.py ..........                                                    [ 43%]
tests/test_menu_system.py ....................                                           [ 46%]
tests/test_paginator.py ......                                                           [ 47%]
tests/test_postgres_saver.py .......                                                     [ 48%]
tests/test_salary_utils.py ......................                                        [ 51%]
tests/test_search_utils.py ............................                                  [ 55%]
tests/test_sj_api.py ..............                                                      [ 57%]
tests/test_sj_api_config.py .....                                                        [ 58%]
tests/test_sj_parser.py ........                                                         [ 59%]
tests/test_source_manager.py .................                                           [ 61%]
tests/test_source_selector.py ..................                                         [ 64%]
tests/test_storage_factory.py ........                                                   [ 65%]
tests/test_target_companies.py .....                                                     [ 66%]
tests/test_ui_config.py .......................                                          [ 69%]
tests/test_ui_helpers.py ...........                                                     [ 71%]
tests/test_ui_navigation.py ......................                                       [ 74%]
tests/test_unified_api.py .................                                              [ 77%]
tests/test_user_interface.py ......................                                      [ 80%]
tests/test_vacancy_display_handler.py ..............                                     [ 82%]
tests/test_vacancy_formatter.py ........                                                 [ 83%]
tests/test_vacancy_models.py .................................................           [ 90%]
tests/test_vacancy_operations.py ......                                                  [ 91%]
tests/test_vacancy_operations_coordinator.py ...........................                 [ 95%]
tests/test_vacancy_search_handler.py .......................                             [ 98%]
tests/test_vacancy_stats.py FFFFFFFF                                                     [100%]

============================================ ERRORS ============================================
___________ ERROR at setup of TestUserInterfaceExtended.test_display_search_results ____________
file /home/runner/workspace/tests/test_extended_coverage.py, line 512
      @patch('builtins.print')
      def test_display_search_results(self, mock_print, user_interface, sample_vacancies_extended):
E       fixture 'sample_vacancies_extended' not found
>       available fixtures: base_mock_api, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capteesys, class_mocker, cov, doctest_namespace, mock_connection, mock_db_config, mock_vacancy_data, mocker, module_mocker, monkeypatch, no_cover, package_mocker, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, user_interface
>       use 'pytest --fixtures [testpath]' for help on them.

/home/runner/workspace/tests/test_extended_coverage.py:512
___________ ERROR at setup of TestInterfaceHandlers.test_format_vacancy_for_display ____________
file /home/runner/workspace/tests/test_extended_coverage.py, line 596
      def test_format_vacancy_for_display(self, display_handler, sample_vacancies_extended):
E       fixture 'sample_vacancies_extended' not found
>       available fixtures: base_mock_api, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capteesys, class_mocker, cov, display_handler, doctest_namespace, mock_connection, mock_db_config, mock_vacancy_data, mocker, module_mocker, monkeypatch, no_cover, package_mocker, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/home/runner/workspace/tests/test_extended_coverage.py:596
______________ ERROR at setup of TestInterfaceHandlers.test_display_vacancy_list _______________
file /home/runner/workspace/tests/test_extended_coverage.py, line 606
      @patch('builtins.print')
      def test_display_vacancy_list(self, mock_print, display_handler, sample_vacancies_extended):
E       fixture 'sample_vacancies_extended' not found
>       available fixtures: base_mock_api, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capteesys, class_mocker, cov, display_handler, doctest_namespace, mock_connection, mock_db_config, mock_vacancy_data, mocker, module_mocker, monkeypatch, no_cover, package_mocker, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/home/runner/workspace/tests/test_extended_coverage.py:606
=========================================== FAILURES ===========================================
_____________________________ TestDBManagerDemo.test_run_full_demo _____________________________

self = <workspace.tests.test_db_manager_demo.TestDBManagerDemo object at 0x7fdffed5aa10>
mock_print = <MagicMock name='print' id='140600004372176'>
db_manager_demo = <src.utils.db_manager_demo.DBManagerDemo object at 0x7fdffd50e390>

    @patch('builtins.print')
    def test_run_full_demo(self, mock_print, db_manager_demo):
        """Тест полной демонстрации"""
>       db_manager_demo.run_full_demo()

tests/test_db_manager_demo.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/utils/db_manager_demo.py:52: in run_full_demo
    self._demo_companies_and_vacancies_count()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <src.utils.db_manager_demo.DBManagerDemo object at 0x7fdffd50e390>

    def _demo_companies_and_vacancies_count(self) -> None:
        """Демонстрирует метод get_companies_and_vacancies_count() для целевых компаний"""
        print("\n3. get_companies_and_vacancies_count() - Анализ вакансий по целевым компаниям:")
        print("-" * 80)
    
        from src.config.target_companies import TargetCompanies
    
        print("Анализ показывает только данные от целевых компаний из конфигурации проекта")
        print("Метод фильтрует результаты и показывает статистику по всем 15 целевым компаниям")
        print()
    
        # Получаем данные специально по целевым компаниям
        companies_data = self.db_manager.get_target_companies_analysis()
    
        if not companies_data:
            print("Нет данных о целевых компаниях")
            print("Выполните поиск вакансий через пункт меню 1 для получения данных")
            return
    
        print(f"{'№':<3} {'Целевая компания':<35} {'Количество вакансий':<20}")
        print("-" * 80)
    
        total_vacancies = 0
        companies_with_vacancies = 0
    
        # Показываем результаты в том порядке, как они возвращены методом
        # (метод уже фильтрует и сопоставляет целевые компании)
>       for i, (company_name, vacancy_count) in enumerate(companies_data, 1):
                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       TypeError: 'Mock' object is not iterable

src/utils/db_manager_demo.py:132: TypeError
_____________________ TestDBManagerDemo.test_demo_companies_and_vacancies ______________________

self = <workspace.tests.test_db_manager_demo.TestDBManagerDemo object at 0x7fdffed5afd0>
mock_print = <MagicMock name='print' id='140600004926160'>
db_manager_demo = <src.utils.db_manager_demo.DBManagerDemo object at 0x7fdffd595610>

    @patch('builtins.print')
    def test_demo_companies_and_vacancies(self, mock_print, db_manager_demo):
        """Тест демонстрации списка компаний и вакансий"""
>       db_manager_demo.demo_companies_and_vacancies()
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: 'DBManagerDemo' object has no attribute 'demo_companies_and_vacancies'

tests/test_db_manager_demo.py:98: AttributeError
__________________________ TestDBManagerDemo.test_demo_all_vacancies ___________________________

self = <workspace.tests.test_db_manager_demo.TestDBManagerDemo object at 0x7fdffed5b5d0>
mock_print = <MagicMock name='print' id='140600046451344'>
db_manager_demo = <src.utils.db_manager_demo.DBManagerDemo object at 0x7fdffe1e6490>

    @patch('builtins.print')
    def test_demo_all_vacancies(self, mock_print, db_manager_demo):
        """Тест демонстрации всех вакансий"""
>       db_manager_demo.demo_all_vacancies()
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: 'DBManagerDemo' object has no attribute 'demo_all_vacancies'

tests/test_db_manager_demo.py:107: AttributeError
____________________________ TestDBManagerDemo.test_demo_avg_salary ____________________________

self = <workspace.tests.test_db_manager_demo.TestDBManagerDemo object at 0x7fdffed5bbd0>
mock_print = <MagicMock name='print' id='140600004683984'>
db_manager_demo = <src.utils.db_manager_demo.DBManagerDemo object at 0x7fdffd558a50>

    @patch('builtins.print')
    def test_demo_avg_salary(self, mock_print, db_manager_demo):
        """Тест демонстрации средней зарплаты"""
>       db_manager_demo.demo_avg_salary()
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: 'DBManagerDemo' object has no attribute 'demo_avg_salary'

tests/test_db_manager_demo.py:115: AttributeError
______________________ TestDBManagerDemo.test_demo_high_salary_vacancies _______________________

self = <workspace.tests.test_db_manager_demo.TestDBManagerDemo object at 0x7fdffed68290>
mock_print = <MagicMock name='print' id='140600004869200'>
db_manager_demo = <src.utils.db_manager_demo.DBManagerDemo object at 0x7fdffd587010>

    @patch('builtins.print')
    def test_demo_high_salary_vacancies(self, mock_print, db_manager_demo):
        """Тест демонстрации вакансий с высокой зарплатой"""
>       db_manager_demo.demo_high_salary_vacancies()
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: 'DBManagerDemo' object has no attribute 'demo_high_salary_vacancies'

tests/test_db_manager_demo.py:123: AttributeError
__________________________ TestDBManagerDemo.test_demo_keyword_search __________________________

self = <workspace.tests.test_db_manager_demo.TestDBManagerDemo object at 0x7fdffed68910>
mock_print = <MagicMock name='print' id='140600017575440'>
db_manager_demo = <src.utils.db_manager_demo.DBManagerDemo object at 0x7fdffe1a6010>

    @patch('builtins.print')
    def test_demo_keyword_search(self, mock_print, db_manager_demo):
        """Тест демонстрации поиска по ключевому слову"""
        keyword = "Python"
>       db_manager_demo.demo_keyword_search(keyword)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: 'DBManagerDemo' object has no attribute 'demo_keyword_search'

tests/test_db_manager_demo.py:132: AttributeError
________________________ TestDBManagerDemo.test_demo_with_empty_results ________________________

self = <workspace.tests.test_db_manager_demo.TestDBManagerDemo object at 0x7fdffed69010>
mock_db_manager = <Mock spec='DBManager' id='140600017755984'>

    def test_demo_with_empty_results(self, mock_db_manager):
        """Тест демонстрации с пустыми результатами"""
        mock_db_manager.get_companies_and_vacancies_count.return_value = []
        mock_db_manager.get_all_vacancies.return_value = []
        mock_db_manager.get_avg_salary.return_value = None
        mock_db_manager.get_vacancies_with_higher_salary.return_value = []
        mock_db_manager.get_vacancies_with_keyword.return_value = []
    
        if DB_MANAGER_DEMO_AVAILABLE:
            demo = DBManagerDemo(mock_db_manager)
        else:
            demo = MockDBManagerDemo(mock_db_manager)
    
        # Демонстрация должна работать даже с пустыми результатами
        with patch('builtins.print'):
>           demo.run_full_demo()

tests/test_db_manager_demo.py:152: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/utils/db_manager_demo.py:52: in run_full_demo
    self._demo_companies_and_vacancies_count()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <src.utils.db_manager_demo.DBManagerDemo object at 0x7fdffe1d1f10>

    def _demo_companies_and_vacancies_count(self) -> None:
        """Демонстрирует метод get_companies_and_vacancies_count() для целевых компаний"""
        print("\n3. get_companies_and_vacancies_count() - Анализ вакансий по целевым компаниям:")
        print("-" * 80)
    
        from src.config.target_companies import TargetCompanies
    
        print("Анализ показывает только данные от целевых компаний из конфигурации проекта")
        print("Метод фильтрует результаты и показывает статистику по всем 15 целевым компаниям")
        print()
    
        # Получаем данные специально по целевым компаниям
        companies_data = self.db_manager.get_target_companies_analysis()
    
        if not companies_data:
            print("Нет данных о целевых компаниях")
            print("Выполните поиск вакансий через пункт меню 1 для получения данных")
            return
    
        print(f"{'№':<3} {'Целевая компания':<35} {'Количество вакансий':<20}")
        print("-" * 80)
    
        total_vacancies = 0
        companies_with_vacancies = 0
    
        # Показываем результаты в том порядке, как они возвращены методом
        # (метод уже фильтрует и сопоставляет целевые компании)
>       for i, (company_name, vacancy_count) in enumerate(companies_data, 1):
                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       TypeError: 'Mock' object is not iterable

src/utils/db_manager_demo.py:132: TypeError
__________________________ TestDBManagerDemo.test_demo_error_handling __________________________

self = <workspace.tests.test_db_manager_demo.TestDBManagerDemo object at 0x7fdffed69710>
mock_db_manager = <Mock spec='DBManager' id='140600005293328'>

    def test_demo_error_handling(self, mock_db_manager):
        """Тест обработки ошибок в демонстрации"""
        # Настраиваем методы для выброса исключений
        mock_db_manager.get_companies_and_vacancies_count.side_effect = Exception("DB Error")
    
        if DB_MANAGER_DEMO_AVAILABLE:
            demo = DBManagerDemo(mock_db_manager)
        else:
            demo = MockDBManagerDemo(mock_db_manager)
    
        # Демонстрация должна обрабатывать ошибки
        with patch('builtins.print'):
            try:
>               demo.demo_companies_and_vacancies()
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E               AttributeError: 'DBManagerDemo' object has no attribute 'demo_companies_and_vacancies'

tests/test_db_manager_demo.py:167: AttributeError

During handling of the above exception, another exception occurred:

self = <workspace.tests.test_db_manager_demo.TestDBManagerDemo object at 0x7fdffed69710>
mock_db_manager = <Mock spec='DBManager' id='140600005293328'>

    def test_demo_error_handling(self, mock_db_manager):
        """Тест обработки ошибок в демонстрации"""
        # Настраиваем методы для выброса исключений
        mock_db_manager.get_companies_and_vacancies_count.side_effect = Exception("DB Error")
    
        if DB_MANAGER_DEMO_AVAILABLE:
            demo = DBManagerDemo(mock_db_manager)
        else:
            demo = MockDBManagerDemo(mock_db_manager)
    
        # Демонстрация должна обрабатывать ошибки
        with patch('builtins.print'):
            try:
                demo.demo_companies_and_vacancies()
            except Exception:
>               pytest.fail("Demo should handle database errors gracefully")
E               Failed: Demo should handle database errors gracefully

tests/test_db_manager_demo.py:169: Failed
_____________________________ TestDecorators.test_cache_decorator ______________________________

self = <workspace.tests.test_decorators.TestDecorators object at 0x7fdffed6ac10>

    def test_cache_decorator(self):
        """Тест декоратора кэширования"""
        if DECORATORS_AVAILABLE:
            decorator = cache_decorator
        else:
            decorator = mock_cache_decorator
    
        call_count = 0
    
        @decorator
        def expensive_function(x: int) -> int:
            """Дорогая функция для тестирования кэша"""
            nonlocal call_count
            call_count += 1
            return x * 2
    
        # Первый вызов
        result1 = expensive_function(5)
        assert result1 == 10
        assert call_count == 1
    
        # Второй вызов с теми же аргументами (должен взять из кэша)
        result2 = expensive_function(5)
        assert result2 == 10
        # Функция не должна вызываться повторно
        if DECORATORS_AVAILABLE:
            assert call_count == 1
    
        # Вызов с другими аргументами
        result3 = expensive_function(10)
        assert result3 == 20
        expected_count = 2 if DECORATORS_AVAILABLE else 3
>       assert call_count == expected_count
E       assert 2 == 3

tests/test_decorators.py:77: AssertionError
___________________________ TestEnvLoader.test_load_env_file_success ___________________________

self = <workspace.tests.test_env_loader.TestEnvLoader object at 0x7fdffe950450>
env_loader = <src.utils.env_loader.EnvLoader object at 0x7fdffd597e90>

    @patch.dict(os.environ, {}, clear=True)
    def test_load_env_file_success(self, env_loader):
        """Тест успешной загрузки .env файла"""
        env_content = "API_KEY=test_key\nDATABASE_URL=postgresql://localhost:5432/test\n"
    
        with patch("builtins.open", mock_open(read_data=env_content)):
            with patch("os.path.exists", return_value=True):
                result = env_loader.load_env_file(".env")
    
>               assert result is True
E               assert None is True

tests/test_env_loader.py:42: AssertionError
_________________________ TestEnvLoader.test_load_env_file_not_exists __________________________

self = <workspace.tests.test_env_loader.TestEnvLoader object at 0x7fdffe950c50>
env_loader = <src.utils.env_loader.EnvLoader object at 0x7fdffed6a950>

    @patch.dict(os.environ, {}, clear=True)
    def test_load_env_file_not_exists(self, env_loader):
        """Тест загрузки несуществующего .env файла"""
        with patch("os.path.exists", return_value=False):
            result = env_loader.load_env_file(".env")
>           assert result is False
E           assert None is False

tests/test_env_loader.py:52: AssertionError
________________________ TestEnvLoader.test_load_env_file_with_comments ________________________

self = <workspace.tests.test_env_loader.TestEnvLoader object at 0x7fdffe950ed0>
env_loader = <src.utils.env_loader.EnvLoader object at 0x7fdffd55af90>

        @patch.dict(os.environ, {}, clear=True)
        def test_load_env_file_with_comments(self, env_loader):
            """Тест загрузки .env файла с комментариями"""
            env_content = """
    # Database configuration
    DATABASE_URL=postgresql://localhost:5432/test
    # API Keys
    API_KEY=test_key
    # Empty line and comment only
    
    # Another comment
    SECRET_KEY=secret_value
    """
    
            with patch("builtins.open", mock_open(read_data=env_content)):
                with patch("os.path.exists", return_value=True):
                    result = env_loader.load_env_file(".env")
    
>                   assert result is True
E                   assert None is True

tests/test_env_loader.py:72: AssertionError
_________________________ TestEnvLoader.test_load_env_file_with_quotes _________________________

self = <workspace.tests.test_env_loader.TestEnvLoader object at 0x7fdffe951690>
env_loader = <src.utils.env_loader.EnvLoader object at 0x7fdffd5d21d0>

        @patch.dict(os.environ, {}, clear=True)
        def test_load_env_file_with_quotes(self, env_loader):
            """Тест загрузки .env файла с кавычками"""
            env_content = '''
    API_KEY="test_key_with_quotes"
    DATABASE_URL='postgresql://localhost:5432/test'
    MIXED_VALUE="value with 'single' quotes"
    '''
    
            with patch("builtins.open", mock_open(read_data=env_content)):
                with patch("os.path.exists", return_value=True):
                    result = env_loader.load_env_file(".env")
    
>                   assert result is True
E                   assert None is True

tests/test_env_loader.py:90: AssertionError
___________________________ TestEnvLoader.test_get_env_var_required ____________________________

self = <workspace.tests.test_env_loader.TestEnvLoader object at 0x7fdffe951950>
env_loader = <src.utils.env_loader.EnvLoader object at 0x7fdffed5b110>

    def test_get_env_var_required(self, env_loader):
        """Тест получения обязательной переменной окружения"""
        with patch.dict(os.environ, {}, clear=True):
            with pytest.raises((ValueError, KeyError)):
>               env_loader.get_env_var("REQUIRED_VAR", required=True)
E               TypeError: EnvLoader.get_env_var() got an unexpected keyword argument 'required'

tests/test_env_loader.py:111: TypeError
__________________________ TestEnvLoader.test_get_env_vars_by_prefix ___________________________

self = <workspace.tests.test_env_loader.TestEnvLoader object at 0x7fdffe952d50>
env_loader = <src.utils.env_loader.EnvLoader object at 0x7fdffed5b650>

    def test_get_env_vars_by_prefix(self, env_loader):
        """Тест получения переменных по префиксу"""
        test_env = {
            "API_KEY": "main_key",
            "API_SECRET": "main_secret",
            "DATABASE_URL": "db_url",
            "API_VERSION": "v1"
        }
    
        with patch.dict(os.environ, test_env):
>           api_vars = env_loader.get_env_vars_by_prefix("API_")
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E           AttributeError: 'EnvLoader' object has no attribute 'get_env_vars_by_prefix'

tests/test_env_loader.py:123: AttributeError
__________________________ TestEnvLoader.test_validate_required_vars ___________________________

self = <workspace.tests.test_env_loader.TestEnvLoader object at 0x7fdffe9528d0>
env_loader = <src.utils.env_loader.EnvLoader object at 0x7fdffd5860d0>

    def test_validate_required_vars(self, env_loader):
        """Тест валидации обязательных переменных"""
        required_vars = ["API_KEY", "DATABASE_URL", "SECRET_KEY"]
    
        # Тест с отсутствующими переменными
        with patch.dict(os.environ, {}, clear=True):
>           missing_vars = env_loader.validate_required_vars(required_vars)
                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E           AttributeError: 'EnvLoader' object has no attribute 'validate_required_vars'

tests/test_env_loader.py:137: AttributeError
__________________________ TestEnvLoader.test_load_env_file_io_error ___________________________

self = <workspace.tests.test_env_loader.TestEnvLoader object at 0x7fdffe953850>
env_loader = <src.utils.env_loader.EnvLoader object at 0x7fdffd558a50>

    def test_load_env_file_io_error(self, env_loader):
        """Тест обработки ошибки чтения файла"""
        with patch("os.path.exists", return_value=True):
            with patch("builtins.open", side_effect=IOError("Permission denied")):
                result = env_loader.load_env_file(".env")
>               assert result is False
E               assert None is False

tests/test_env_loader.py:156: AssertionError
__________________________ TestEnvLoader.test_env_var_type_conversion __________________________

self = <workspace.tests.test_env_loader.TestEnvLoader object at 0x7fdffe953ed0>
env_loader = <src.utils.env_loader.EnvLoader object at 0x7fdffe14f550>

    @patch.dict(os.environ, {}, clear=True)
    def test_env_var_type_conversion(self, env_loader):
        """Тест конвертации типов переменных окружения"""
        test_env = {
            "INT_VAR": "123",
            "FLOAT_VAR": "123.45",
            "BOOL_TRUE": "true",
            "BOOL_FALSE": "false",
            "STRING_VAR": "test_string"
        }
    
        with patch.dict(os.environ, test_env):
            # Тест конвертации в int
>           int_val = env_loader.get_env_var("INT_VAR", var_type=int)
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E           TypeError: EnvLoader.get_env_var() got an unexpected keyword argument 'var_type'

tests/test_env_loader.py:171: TypeError
______________________ TestVacancyStats.test_vacancy_stats_initialization ______________________

self = <workspace.tests.test_vacancy_stats.TestVacancyStats object at 0x7fdffe16c1d0>
vacancy_stats = <src.utils.vacancy_stats.VacancyStats object at 0x7fdffdc771d0>

    def test_vacancy_stats_initialization(self, vacancy_stats):
        """Тест инициализации класса статистики"""
        assert vacancy_stats is not None
    
        # Проверяем наличие основных методов
        methods = ['calculate_salary_statistics', 'get_top_companies', 'analyze_sources']
        for method in methods:
>           assert hasattr(vacancy_stats, method)
E           AssertionError: assert False
E            +  where False = hasattr(<src.utils.vacancy_stats.VacancyStats object at 0x7fdffdc771d0>, 'get_top_companies')

tests/test_vacancy_stats.py:77: AssertionError
______________________ TestVacancyStats.test_calculate_salary_statistics _______________________

self = <workspace.tests.test_vacancy_stats.TestVacancyStats object at 0x7fdffe16c550>
vacancy_stats = <src.utils.vacancy_stats.VacancyStats object at 0x7fdffdd4df50>
sample_vacancies = [{'description': 'Работа с Python и Django', 'employer': {'name': 'Яндекс'}, 'salary': {'currency': 'RUR', 'from': 100...ption': 'Работа с React и TypeScript', 'employer': {'name': 'Тинькофф'}, 'salary': None, 'source': 'superjob.ru', ...}]

    def test_calculate_salary_statistics(self, vacancy_stats, sample_vacancies):
        """Тест расчета статистики по зарплатам"""
        # Конвертируем в объекты Vacancy если доступно
        if VACANCY_STATS_AVAILABLE:
            try:
                vacancies = [Vacancy(**data) for data in sample_vacancies]
            except Exception:
                vacancies = sample_vacancies
        else:
            vacancies = sample_vacancies
    
>       stats = vacancy_stats.calculate_salary_statistics(vacancies)
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_vacancy_stats.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <src.utils.vacancy_stats.VacancyStats object at 0x7fdffdd4df50>
vacancies = [<src.vacancies.models.Vacancy object at 0x7fdffdc9d090>, <src.vacancies.models.Vacancy object at 0x7fdffdc9d230>, <src.vacancies.models.Vacancy object at 0x7fdffdc9d640>]

    def calculate_salary_statistics(self, vacancies):
        """Подсчет статистики по зарплатам"""
        salaries = []
        for vacancy in vacancies:
            if vacancy.salary:
>               if vacancy.salary.from_amount:
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^
E               AttributeError: 'Salary' object has no attribute 'from_amount'

src/utils/vacancy_stats.py:24: AttributeError
___________________________ TestVacancyStats.test_get_top_companies ____________________________

self = <workspace.tests.test_vacancy_stats.TestVacancyStats object at 0x7fdffe16ca50>
vacancy_stats = <src.utils.vacancy_stats.VacancyStats object at 0x7fdffd59d250>
sample_vacancies = [{'description': 'Работа с Python и Django', 'employer': {'name': 'Яндекс'}, 'salary': {'currency': 'RUR', 'from': 100...ption': 'Работа с React и TypeScript', 'employer': {'name': 'Тинькофф'}, 'salary': None, 'source': 'superjob.ru', ...}]

    def test_get_top_companies(self, vacancy_stats, sample_vacancies):
        """Тест получения топ компаний"""
        if VACANCY_STATS_AVAILABLE:
            try:
                vacancies = [Vacancy(**data) for data in sample_vacancies]
            except Exception:
                vacancies = sample_vacancies
        else:
            vacancies = sample_vacancies
    
>       top_companies = vacancy_stats.get_top_companies(vacancies, limit=2)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: 'VacancyStats' object has no attribute 'get_top_companies'

tests/test_vacancy_stats.py:112: AttributeError
____________________________ TestVacancyStats.test_analyze_sources _____________________________

self = <workspace.tests.test_vacancy_stats.TestVacancyStats object at 0x7fdffe16d0d0>
vacancy_stats = <src.utils.vacancy_stats.VacancyStats object at 0x7fdffdda2150>
sample_vacancies = [{'description': 'Работа с Python и Django', 'employer': {'name': 'Яндекс'}, 'salary': {'currency': 'RUR', 'from': 100...ption': 'Работа с React и TypeScript', 'employer': {'name': 'Тинькофф'}, 'salary': None, 'source': 'superjob.ru', ...}]

    def test_analyze_sources(self, vacancy_stats, sample_vacancies):
        """Тест анализа источников"""
        if VACANCY_STATS_AVAILABLE:
            try:
                vacancies = [Vacancy(**data) for data in sample_vacancies]
            except Exception:
                vacancies = sample_vacancies
        else:
            vacancies = sample_vacancies
    
>       source_stats = vacancy_stats.analyze_sources(vacancies)
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: 'VacancyStats' object has no attribute 'analyze_sources'

tests/test_vacancy_stats.py:134: AttributeError
__________________________ TestVacancyStats.test_empty_vacancies_list __________________________

self = <workspace.tests.test_vacancy_stats.TestVacancyStats object at 0x7fdffe16d710>
vacancy_stats = <src.utils.vacancy_stats.VacancyStats object at 0x7fdffdd475d0>

    def test_empty_vacancies_list(self, vacancy_stats):
        """Тест обработки пустого списка вакансий"""
        empty_list = []
    
        # Тест статистики зарплат
        salary_stats = vacancy_stats.calculate_salary_statistics(empty_list)
>       assert salary_stats['total_count'] == 0
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       KeyError: 'total_count'

tests/test_vacancy_stats.py:150: KeyError
________________________ TestVacancyStats.test_vacancies_without_salary ________________________

self = <workspace.tests.test_vacancy_stats.TestVacancyStats object at 0x7fdffe16dd50>
vacancy_stats = <src.utils.vacancy_stats.VacancyStats object at 0x7fdffdc91250>

    def test_vacancies_without_salary(self, vacancy_stats):
        """Тест обработки вакансий без зарплаты"""
        vacancies_no_salary = [
            {
                "title": "Developer",
                "vacancy_id": "1",
                "url": "https://example.com/1",
                "source": "hh.ru",
                "employer": {"name": "Company1"},
                "salary": None,
                "description": "Job description"
            }
        ]
    
        if VACANCY_STATS_AVAILABLE:
            try:
                vacancies = [Vacancy(**data) for data in vacancies_no_salary]
            except Exception:
                vacancies = vacancies_no_salary
        else:
            vacancies = vacancies_no_salary
    
>       stats = vacancy_stats.calculate_salary_statistics(vacancies)
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_vacancy_stats.py:182: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <src.utils.vacancy_stats.VacancyStats object at 0x7fdffdc91250>
vacancies = [<src.vacancies.models.Vacancy object at 0x7fdffdccde60>]

    def calculate_salary_statistics(self, vacancies):
        """Подсчет статистики по зарплатам"""
        salaries = []
        for vacancy in vacancies:
            if vacancy.salary:
>               if vacancy.salary.from_amount:
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^
E               AttributeError: 'Salary' object has no attribute 'from_amount'

src/utils/vacancy_stats.py:24: AttributeError
________________________ TestVacancyStats.test_salary_range_calculation ________________________

self = <workspace.tests.test_vacancy_stats.TestVacancyStats object at 0x7fdffe16e390>
vacancy_stats = <src.utils.vacancy_stats.VacancyStats object at 0x7fdffdda2150>

    def test_salary_range_calculation(self, vacancy_stats):
        """Тест расчета диапазона зарплат"""
        vacancies_with_range = [
            {
                "title": "Developer",
                "vacancy_id": "1",
                "url": "https://example.com/1",
                "source": "hh.ru",
                "employer": {"name": "Company1"},
                "salary": {"from": 50000, "to": 100000, "currency": "RUR"},
                "description": "Job description"
            }
        ]
    
        if VACANCY_STATS_AVAILABLE:
            try:
                vacancies = [Vacancy(**data) for data in vacancies_with_range]
            except Exception:
                vacancies = vacancies_with_range
        else:
            vacancies = vacancies_with_range
    
>       stats = vacancy_stats.calculate_salary_statistics(vacancies)
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_vacancy_stats.py:209: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <src.utils.vacancy_stats.VacancyStats object at 0x7fdffdda2150>
vacancies = [<src.vacancies.models.Vacancy object at 0x7fdffdc9e820>]

    def calculate_salary_statistics(self, vacancies):
        """Подсчет статистики по зарплатам"""
        salaries = []
        for vacancy in vacancies:
            if vacancy.salary:
>               if vacancy.salary.from_amount:
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^
E               AttributeError: 'Salary' object has no attribute 'from_amount'

src/utils/vacancy_stats.py:24: AttributeError
___________________________ TestVacancyStats.test_company_statistics ___________________________

self = <workspace.tests.test_vacancy_stats.TestVacancyStats object at 0x7fdffe16e9d0>
vacancy_stats = <src.utils.vacancy_stats.VacancyStats object at 0x7fdffd5b1110>
sample_vacancies = [{'description': 'Работа с Python и Django', 'employer': {'name': 'Яндекс'}, 'salary': {'currency': 'RUR', 'from': 100...ption': 'Работа с React и TypeScript', 'employer': {'name': 'Тинькофф'}, 'salary': None, 'source': 'superjob.ru', ...}]

    def test_company_statistics(self, vacancy_stats, sample_vacancies):
        """Тест статистики по компаниям"""
        if VACANCY_STATS_AVAILABLE:
            try:
                vacancies = [Vacancy(**data) for data in sample_vacancies]
            except Exception:
                vacancies = sample_vacancies
        else:
            vacancies = sample_vacancies
    
>       top_companies = vacancy_stats.get_top_companies(vacancies)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: 'VacancyStats' object has no attribute 'get_top_companies'

tests/test_vacancy_stats.py:226: AttributeError
=================================== short test summary info ====================================
FAILED tests/test_db_manager_demo.py::TestDBManagerDemo::test_run_full_demo - TypeError: 'Mock' object is not iterable
FAILED tests/test_db_manager_demo.py::TestDBManagerDemo::test_demo_companies_and_vacancies - AttributeError: 'DBManagerDemo' object has no attribute 'demo_companies_and_vacancies'
FAILED tests/test_db_manager_demo.py::TestDBManagerDemo::test_demo_all_vacancies - AttributeError: 'DBManagerDemo' object has no attribute 'demo_all_vacancies'
FAILED tests/test_db_manager_demo.py::TestDBManagerDemo::test_demo_avg_salary - AttributeError: 'DBManagerDemo' object has no attribute 'demo_avg_salary'
FAILED tests/test_db_manager_demo.py::TestDBManagerDemo::test_demo_high_salary_vacancies - AttributeError: 'DBManagerDemo' object has no attribute 'demo_high_salary_vacancies'
FAILED tests/test_db_manager_demo.py::TestDBManagerDemo::test_demo_keyword_search - AttributeError: 'DBManagerDemo' object has no attribute 'demo_keyword_search'
FAILED tests/test_db_manager_demo.py::TestDBManagerDemo::test_demo_with_empty_results - TypeError: 'Mock' object is not iterable
FAILED tests/test_db_manager_demo.py::TestDBManagerDemo::test_demo_error_handling - Failed: Demo should handle database errors gracefully
FAILED tests/test_decorators.py::TestDecorators::test_cache_decorator - assert 2 == 3
FAILED tests/test_env_loader.py::TestEnvLoader::test_load_env_file_success - assert None is True
FAILED tests/test_env_loader.py::TestEnvLoader::test_load_env_file_not_exists - assert None is False
FAILED tests/test_env_loader.py::TestEnvLoader::test_load_env_file_with_comments - assert None is True
FAILED tests/test_env_loader.py::TestEnvLoader::test_load_env_file_with_quotes - assert None is True
FAILED tests/test_env_loader.py::TestEnvLoader::test_get_env_var_required - TypeError: EnvLoader.get_env_var() got an unexpected keyword argument 'required'
FAILED tests/test_env_loader.py::TestEnvLoader::test_get_env_vars_by_prefix - AttributeError: 'EnvLoader' object has no attribute 'get_env_vars_by_prefix'
FAILED tests/test_env_loader.py::TestEnvLoader::test_validate_required_vars - AttributeError: 'EnvLoader' object has no attribute 'validate_required_vars'
FAILED tests/test_env_loader.py::TestEnvLoader::test_load_env_file_io_error - assert None is False
FAILED tests/test_env_loader.py::TestEnvLoader::test_env_var_type_conversion - TypeError: EnvLoader.get_env_var() got an unexpected keyword argument 'var_type'
FAILED tests/test_vacancy_stats.py::TestVacancyStats::test_vacancy_stats_initialization - AssertionError: assert False
FAILED tests/test_vacancy_stats.py::TestVacancyStats::test_calculate_salary_statistics - AttributeError: 'Salary' object has no attribute 'from_amount'
FAILED tests/test_vacancy_stats.py::TestVacancyStats::test_get_top_companies - AttributeError: 'VacancyStats' object has no attribute 'get_top_companies'
FAILED tests/test_vacancy_stats.py::TestVacancyStats::test_analyze_sources - AttributeError: 'VacancyStats' object has no attribute 'analyze_sources'
FAILED tests/test_vacancy_stats.py::TestVacancyStats::test_empty_vacancies_list - KeyError: 'total_count'
FAILED tests/test_vacancy_stats.py::TestVacancyStats::test_vacancies_without_salary - AttributeError: 'Salary' object has no attribute 'from_amount'
FAILED tests/test_vacancy_stats.py::TestVacancyStats::test_salary_range_calculation - AttributeError: 'Salary' object has no attribute 'from_amount'
FAILED tests/test_vacancy_stats.py::TestVacancyStats::test_company_statistics - AttributeError: 'VacancyStats' object has no attribute 'get_top_companies'
ERROR tests/test_extended_coverage.py::TestUserInterfaceExtended::test_display_search_results
ERROR tests/test_extended_coverage.py::TestInterfaceHandlers::test_format_vacancy_for_display
ERROR tests/test_extended_coverage.py::TestInterfaceHandlers::test_display_vacancy_list