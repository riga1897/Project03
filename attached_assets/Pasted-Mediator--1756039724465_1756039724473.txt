Mediator — паттерн проектирования, который вводит объект-посредник для координации взаимодействий между другими объектами. Вместо того, чтобы объекты напрямую вызывали методы друг друга и пытались «договариваться», они отправляют сообщения посреднику, а он решает, кто и как должен на них отреагировать. Классическая аналогия — диспетчерская в аэропорту: пилоты не связываются друг с другом напрямую, а говорят с диспетчером.

При прямой связи «каждый с каждым» количество зависимостей растёт как квадрат числа компонентов: изменения в одном классе часто заставляют править десятки других. Посредник помещает логику взаимодействия в одну точку:


class Mediator:
    """Интерфейс медиатора."""
    def notify(self, sender, event):
        raise NotImplementedError

class CourseMediator(Mediator):
    """Конкретный медиатор — координатор курсов и пользователей."""
    def __init__(self):
        self.users = []

    def register(self, user):
        self.users.append(user)
        user.mediator = self

    def notify(self, sender, course_name):
        # В простом варианте медиатор просто логирует сообщение
        print(f"[{sender}] выбрал курс: {course_name}")
        # Можно добавить дополнительную логику: фильтрация, отправка уведомлений и т.п.

class User:
    def __init__(self, name):
        self.name = name
        self.mediator = None

    def send_course(self, course_name):
        if not self.mediator:
            raise RuntimeError("User не зарегистрирован у медиатора")
        self.mediator.notify(self, course_name)

    def __str__(self):
        return self.name


m = CourseMediator()
u1 = User("Майкл"); u2 = User("Оля")
m.register(u1); m.register(u2)
u1.send_course("DSA")
u2.send_course("Software Development")


User не знает про других пользователей. Вся координация — в CourseMediator. Такой подход облегчает изменение логики (например, добавить рассылку уведомлений другим пользователям) без модификации User. Медиатор снижает связанность (Coupling) между компонентами и упрощает поддержку. 