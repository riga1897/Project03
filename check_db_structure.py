
import psycopg2
from psycopg2.extras import RealDictCursor
from src.utils.env_loader import EnvLoader

def check_db_structure():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ë–î –∏ –≤—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞–±–ª–∏—Ü–∞—Ö"""
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    try:
        connection = psycopg2.connect(
            host=EnvLoader.get_env_var('PGHOST', 'localhost'),
            port=EnvLoader.get_env_var('PGPORT', '5432'),
            database=EnvLoader.get_env_var('PGDATABASE', 'Project03'),
            user=EnvLoader.get_env_var('PGUSER', 'postgres'),
            password=EnvLoader.get_env_var('PGPASSWORD', '')
        )
        
        cursor = connection.cursor(cursor_factory=RealDictCursor)
        
        print("üîç –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´ –ë–ê–ó–´ –î–ê–ù–ù–´–•")
        print("=" * 50)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        cursor.execute("""
            SELECT table_name 
            FROM information_schema.tables 
            WHERE table_schema = 'public' 
            ORDER BY table_name;
        """)
        
        tables = cursor.fetchall()
        print(f"üìã –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: {len(tables)}")
        for table in tables:
            print(f"  - {table['table_name']}")
        
        print("\n" + "=" * 50)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–∞–∂–¥–æ–π —Ç–∞–±–ª–∏—Ü—ã
        for table in tables:
            table_name = table['table_name']
            print(f"\nüìä –°–¢–†–£–ö–¢–£–†–ê –¢–ê–ë–õ–ò–¶–´: {table_name}")
            print("-" * 40)
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–æ–Ω–∫–∞—Ö
            cursor.execute("""
                SELECT 
                    column_name,
                    data_type,
                    is_nullable,
                    column_default,
                    character_maximum_length
                FROM information_schema.columns 
                WHERE table_name = %s 
                ORDER BY ordinal_position;
            """, (table_name,))
            
            columns = cursor.fetchall()
            
            for col in columns:
                nullable = "NULL" if col['is_nullable'] == 'YES' else "NOT NULL"
                length = f"({col['character_maximum_length']})" if col['character_maximum_length'] else ""
                default = f" DEFAULT {col['column_default']}" if col['column_default'] else ""
                
                print(f"  {col['column_name']:<20} {col['data_type']}{length:<15} {nullable}{default}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏
            cursor.execute("""
                SELECT
                    tc.constraint_name,
                    tc.table_name,
                    kcu.column_name,
                    ccu.table_name AS foreign_table_name,
                    ccu.column_name AS foreign_column_name
                FROM information_schema.table_constraints AS tc
                JOIN information_schema.key_column_usage AS kcu
                    ON tc.constraint_name = kcu.constraint_name
                    AND tc.table_schema = kcu.table_schema
                JOIN information_schema.constraint_column_usage AS ccu
                    ON ccu.constraint_name = tc.constraint_name
                    AND ccu.table_schema = tc.table_schema
                WHERE tc.constraint_type = 'FOREIGN KEY'
                    AND tc.table_name = %s;
            """, (table_name,))
            
            foreign_keys = cursor.fetchall()
            if foreign_keys:
                print("\n  üîó –í–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏:")
                for fk in foreign_keys:
                    print(f"    {fk['column_name']} -> {fk['foreign_table_name']}.{fk['foreign_column_name']}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
            cursor.execute(f"SELECT COUNT(*) as count FROM {table_name}")
            count = cursor.fetchone()['count']
            print(f"\n  üìà –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: {count}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–µ vacancies
        print("\n" + "=" * 50)
        print("üîç –ê–ù–ê–õ–ò–ó –î–ê–ù–ù–´–• –í –¢–ê–ë–õ–ò–¶–ï VACANCIES")
        print("-" * 40)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å –ø–æ–ª–µ–π company –∏ company_id
        cursor.execute("""
            SELECT 
                COUNT(*) as total_vacancies,
                COUNT(company_id) as with_company_id,
                COUNT(employer) as with_employer,
                COUNT(CASE WHEN company_id IS NOT NULL AND company_id != '' THEN 1 END) as with_non_empty_company_id,
                COUNT(CASE WHEN employer IS NOT NULL AND employer != '' THEN 1 END) as with_non_empty_employer
            FROM vacancies;
        """)
        
        stats = cursor.fetchone()
        print(f"–í—Å–µ–≥–æ –≤–∞–∫–∞–Ω—Å–∏–π: {stats['total_vacancies']}")
        print(f"–° company_id: {stats['with_company_id']} (–Ω–µ –ø—É—Å—Ç—ã—Ö: {stats['with_non_empty_company_id']})")
        print(f"–° employer: {stats['with_employer']} (–Ω–µ –ø—É—Å—Ç—ã—Ö: {stats['with_non_empty_employer']})")
        
        # –ü—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö
        cursor.execute("""
            SELECT 
                vacancy_id,
                title,
                employer,
                company_id,
                source
            FROM vacancies 
            LIMIT 5;
        """)
        
        examples = cursor.fetchall()
        print(f"\nüìù –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø–∏—Å–µ–π:")
        for ex in examples:
            print(f"  ID: {ex['vacancy_id']}")
            print(f"  –ù–∞–∑–≤–∞–Ω–∏–µ: {ex['title'][:50]}...")
            print(f"  Employer: {ex['employer']}")
            print(f"  Company_ID: {ex['company_id']}")
            print(f"  –ò—Å—Ç–æ—á–Ω–∏–∫: {ex['source']}")
            print("  " + "-" * 30)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É companies –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        cursor.execute("""
            SELECT table_name 
            FROM information_schema.tables 
            WHERE table_schema = 'public' AND table_name = 'companies';
        """)
        
        if cursor.fetchone():
            print(f"\nüè¢ –ê–ù–ê–õ–ò–ó –¢–ê–ë–õ–ò–¶–´ COMPANIES")
            print("-" * 40)
            
            cursor.execute("SELECT COUNT(*) as count FROM companies")
            companies_count = cursor.fetchone()['count']
            print(f"–í—Å–µ–≥–æ –∫–æ–º–ø–∞–Ω–∏–π: {companies_count}")
            
            if companies_count > 0:
                cursor.execute("""
                    SELECT hh_id, company_id, name 
                    FROM companies 
                    LIMIT 5;
                """)
                
                company_examples = cursor.fetchall()
                print("–ü—Ä–∏–º–µ—Ä—ã –∫–æ–º–ø–∞–Ω–∏–π:")
                for comp in company_examples:
                    print(f"  HH_ID: {comp['hh_id']}, Company_ID: {comp['company_id']}, Name: {comp['name']}")
        
        cursor.close()
        connection.close()
        
        print("\n" + "=" * 50)
        print("‚úÖ –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ë–î –∑–∞–≤–µ—Ä—à–µ–Ω")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –ë–î: {e}")

if __name__ == "__main__":
    check_db_structure()
