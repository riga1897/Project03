
#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–π –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –≤–∞–∫–∞–Ω—Å–∏—è—Ö
"""

import logging
import sys
from src.storage.db_manager import DBManager
from src.config.db_config import DatabaseConfig

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def migrate_company_mapping():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–π –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –≤–∞–∫–∞–Ω—Å–∏–π"""
    try:
        db_manager = DBManager(DatabaseConfig())
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        if not db_manager.check_connection():
            logger.error("–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return False
            
        connection = db_manager._get_connection()
        
        try:
            cursor = connection.cursor()
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–º–ø–∞–Ω–∏–∏ –∏–∑ –ë–î
            cursor.execute("SELECT id, name, LOWER(name) as normalized_name FROM companies")
            companies = cursor.fetchall()
            
            company_patterns = {}
            for comp_id, original_name, normalized_name in companies:
                company_patterns[original_name] = comp_id
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
                alternatives = {
                    "—è–Ω–¥–µ–∫—Å": ["yandex"],
                    "—Ç–∏–Ω—å–∫–æ—Ñ—Ñ": ["—Ç-–±–∞–Ω–∫", "tinkoff", "t-bank", "tcs"],
                    "—Å–±–µ—Ä": ["—Å–±–µ—Ä–±–∞–Ω–∫", "sberbank", "sber"],
                    "wildberries": ["wb", "–≤–∞–π–ª–¥–±–µ—Ä—Ä–∏–∑"],
                    "ozon": ["–æ–∑–æ–Ω"],
                    "vk": ["–≤–∫–æ–Ω—Ç–∞–∫—Ç–µ", "–≤–∫", "mail.ru group", "vk group"],
                    "–ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è –∫–∞—Å–ø–µ—Ä—Å–∫–æ–≥–æ": ["kaspersky", "–∫–∞—Å–ø–µ—Ä—Å–∫–∏–π"],
                    "–∞–≤–∏—Ç–æ": ["avito"],
                    "x5 retail group": ["x5", "x5 tech", "–ø—è—Ç—ë—Ä–æ—á–∫–∞"],
                    "—Ä–æ—Å—Ç–µ–ª–µ–∫–æ–º": ["rostelecom", "—Ä–æ—Å—Ç–µ–ª–µ–∫–æ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏"],
                    "–∞–ª—å—Ñ–∞-–±–∞–Ω–∫": ["alfa-bank", "alfabank"],
                    "jetbrains": ["–¥–∂–µ—Ç–±—Ä–µ–π–Ω—Å"],
                    "2gis": ["2–≥–∏—Å", "–¥—É–±–ª—å–≥–∏—Å"],
                    "skyeng": ["—Å–∫–∞–π—ç–Ω–≥"],
                    "delivery club": ["–¥–µ–ª–∏–≤–µ—Ä–∏ –∫–ª–∞–±"]
                }
                
                for main_name, alt_names in alternatives.items():
                    if main_name in normalized_name.lower():
                        for alt_name in alt_names:
                            company_patterns[alt_name] = comp_id
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –±–µ–∑ company_id
            cursor.execute("""
                SELECT id, vacancy_id, employer 
                FROM vacancies 
                WHERE company_id IS NULL AND employer IS NOT NULL AND employer != ''
            """)
            
            vacancies_to_update = cursor.fetchall()
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(vacancies_to_update)} –≤–∞–∫–∞–Ω—Å–∏–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
            
            updated_count = 0
            
            for vacancy_pk, vacancy_id, employer in vacancies_to_update:
                if not employer:
                    continue
                    
                employer_lower = employer.lower().strip()
                mapped_company_id = None
                
                # –ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –∫–æ–º–ø–∞–Ω–∏–∏
                for pattern_name, comp_id in company_patterns.items():
                    pattern_lower = pattern_name.lower()
                    if len(pattern_lower) > 3:
                        if pattern_lower in employer_lower or employer_lower in pattern_lower:
                            mapped_company_id = comp_id
                            break
                
                if mapped_company_id:
                    cursor.execute(
                        "UPDATE vacancies SET company_id = %s WHERE id = %s",
                        (mapped_company_id, vacancy_pk)
                    )
                    updated_count += 1
                    logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {employer} -> company_id: {mapped_company_id}")
                else:
                    logger.debug(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è: {employer}")
            
            connection.commit()
            logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ {updated_count} –≤–∞–∫–∞–Ω—Å–∏–π")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            cursor.execute("""
                SELECT c.name, COUNT(v.id) as vacancy_count
                FROM companies c
                LEFT JOIN vacancies v ON c.id = v.company_id
                GROUP BY c.name, c.id
                ORDER BY vacancy_count DESC, c.name
            """)
            
            results = cursor.fetchall()
            logger.info("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–∏:")
            for company_name, vacancy_count in results:
                status = "‚úÖ" if vacancy_count > 0 else "‚ùå"
                logger.info(f"{status} {company_name}: {vacancy_count} –≤–∞–∫–∞–Ω—Å–∏–π")
            
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
            connection.rollback()
            return False
        finally:
            if 'cursor' in locals():
                cursor.close()
            connection.close()
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return False

if __name__ == "__main__":
    logger.info("üîÑ –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–π...")
    success = migrate_company_mapping()
    
    if success:
        logger.info("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        sys.exit(0)
    else:
        logger.error("‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–∞–º–∏")
        sys.exit(1)
