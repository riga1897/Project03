
#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—è employer –∏–∑ —Ç–∞–±–ª–∏—Ü—ã vacancies
–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏—è—Ö —Ç–µ–ø–µ—Ä—å –±–µ—Ä–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã companies
"""

import psycopg2
import logging
from src.utils.env_loader import EnvLoader

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def migrate_remove_employer_field():
    """–ú–∏–≥—Ä–∞—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—è employer –∏–∑ —Ç–∞–±–ª–∏—Ü—ã vacancies"""
    
    try:
        connection = psycopg2.connect(
            host=EnvLoader.get_env_var('PGHOST', 'localhost'),
            port=EnvLoader.get_env_var('PGPORT', '5432'),
            database=EnvLoader.get_env_var('PGDATABASE', 'Project03'),
            user=EnvLoader.get_env_var('PGUSER', 'postgres'),
            password=EnvLoader.get_env_var('PGPASSWORD', '')
        )
        
        cursor = connection.cursor()
        
        print("üîß –ú–ò–ì–†–ê–¶–ò–Ø: –£–î–ê–õ–ï–ù–ò–ï –ü–û–õ–Ø EMPLOYER")
        print("=" * 50)
        
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª–µ employer
        cursor.execute("""
            SELECT column_name 
            FROM information_schema.columns 
            WHERE table_name = 'vacancies' AND column_name = 'employer'
        """)
        
        if cursor.fetchone():
            print("‚úì –ü–æ–ª–µ employer –Ω–∞–π–¥–µ–Ω–æ, –Ω–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é...")
            
            # 2. –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –¥–∞–Ω–Ω—ã—Ö –∏–∑ employer –≤ companies –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            cursor.execute("""
                SELECT COUNT(*) FROM vacancies 
                WHERE employer IS NOT NULL 
                AND employer != ''
                AND company_id IS NULL
            """)
            
            orphaned_count = cursor.fetchone()[0]
            print(f"–ù–∞–π–¥–µ–Ω–æ {orphaned_count} –≤–∞–∫–∞–Ω—Å–∏–π —Å employer, –Ω–æ –±–µ–∑ company_id")
            
            if orphaned_count > 0:
                print("–°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å–∏ –≤ companies –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–π –±–µ–∑ company_id...")
                cursor.execute("""
                    INSERT INTO companies (name, source, external_id)
                    SELECT DISTINCT 
                        employer as name,
                        'legacy' as source,
                        'legacy_' || MD5(employer) as external_id
                    FROM vacancies 
                    WHERE employer IS NOT NULL 
                    AND employer != ''
                    AND company_id IS NULL
                    AND employer NOT IN (SELECT name FROM companies)
                """)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º company_id –¥–ª—è —ç—Ç–∏—Ö –≤–∞–∫–∞–Ω—Å–∏–π
                cursor.execute("""
                    UPDATE vacancies v
                    SET company_id = c.id
                    FROM companies c
                    WHERE v.employer = c.name
                    AND v.company_id IS NULL
                    AND c.source = 'legacy'
                """)
                
                updated_count = cursor.rowcount
                print(f"‚úì –û–±–Ω–æ–≤–ª–µ–Ω–æ {updated_count} –∑–∞–ø–∏—Å–µ–π —Å company_id")
            
            # 3. –£–¥–∞–ª—è–µ–º –∏–Ω–¥–µ–∫—Å—ã —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å employer
            cursor.execute("""
                SELECT indexname 
                FROM pg_indexes 
                WHERE tablename = 'vacancies' 
                AND indexname LIKE '%employer%'
            """)
            
            employer_indexes = cursor.fetchall()
            for (index_name,) in employer_indexes:
                print(f"–£–¥–∞–ª—è–µ–º –∏–Ω–¥–µ–∫—Å: {index_name}")
                cursor.execute(f"DROP INDEX IF EXISTS {index_name}")
            
            # 4. –£–¥–∞–ª—è–µ–º –ø–æ–ª–µ employer
            print("–£–¥–∞–ª—è–µ–º –ø–æ–ª–µ employer...")
            cursor.execute("ALTER TABLE vacancies DROP COLUMN IF EXISTS employer")
            
            print("‚úì –ü–æ–ª–µ employer —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ")
        else:
            print("‚úì –ü–æ–ª–µ employer —É–∂–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ")
        
        # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        cursor.execute("""
            SELECT column_name, data_type 
            FROM information_schema.columns 
            WHERE table_name = 'vacancies' 
            ORDER BY ordinal_position
        """)
        
        columns = cursor.fetchall()
        print("\nüìä –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–†–£–ö–¢–£–†–ê –¢–ê–ë–õ–ò–¶–´ VACANCIES:")
        for col_name, col_type in columns:
            print(f"  - {col_name}: {col_type}")
        
        connection.commit()
        print("\n‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        connection.rollback()
        raise
    finally:
        if 'cursor' in locals():
            cursor.close()
        if 'connection' in locals():
            connection.close()

if __name__ == "__main__":
    migrate_remove_employer_field()
