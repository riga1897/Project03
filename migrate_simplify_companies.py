
#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã companies
–û—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ–ª—è id, name, description
"""

import psycopg2
import logging
from src.utils.env_loader import EnvLoader

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def migrate_simplify_companies():
    """–ú–∏–≥—Ä–∞—Ü–∏—è –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã companies"""
    
    try:
        connection = psycopg2.connect(
            host=EnvLoader.get_env_var('PGHOST', 'localhost'),
            port=EnvLoader.get_env_var('PGPORT', '5432'),
            database=EnvLoader.get_env_var('PGDATABASE', 'Project03'),
            user=EnvLoader.get_env_var('PGUSER', 'postgres'),
            password=EnvLoader.get_env_var('PGPASSWORD', '')
        )
        
        cursor = connection.cursor()
        
        print("üîß –ú–ò–ì–†–ê–¶–ò–Ø: –£–ü–†–û–©–ï–ù–ò–ï –°–¢–†–£–ö–¢–£–†–´ –¢–ê–ë–õ–ò–¶–´ COMPANIES")
        print("=" * 60)
        
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        cursor.execute("""
            SELECT column_name, data_type 
            FROM information_schema.columns 
            WHERE table_name = 'companies' 
            ORDER BY ordinal_position
        """)
        
        current_columns = cursor.fetchall()
        print("–¢–µ–∫—É—â–∏–µ –ø–æ–ª—è –≤ —Ç–∞–±–ª–∏—Ü–µ companies:")
        for col_name, data_type in current_columns:
            print(f"  - {col_name}: {data_type}")
        
        # 2. –£–¥–∞–ª—è–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ –ø–æ–ª—è
        fields_to_remove = ['external_id', 'url', 'logo_url', 'site_url', 'source']
        
        for field in fields_to_remove:
            cursor.execute("""
                SELECT column_name 
                FROM information_schema.columns 
                WHERE table_name = 'companies' AND column_name = %s
            """, (field,))
            
            if cursor.fetchone():
                print(f"–£–¥–∞–ª—è–µ–º –ø–æ–ª–µ {field}...")
                cursor.execute(f"ALTER TABLE companies DROP COLUMN IF EXISTS {field}")
                print(f"‚úì –ü–æ–ª–µ {field} —É–¥–∞–ª–µ–Ω–æ")
        
        # 3. –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ description –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        cursor.execute("""
            SELECT column_name 
            FROM information_schema.columns 
            WHERE table_name = 'companies' AND column_name = 'description'
        """)
        
        if not cursor.fetchone():
            print("–î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ description...")
            cursor.execute("ALTER TABLE companies ADD COLUMN description TEXT")
            print("‚úì –ü–æ–ª–µ description –¥–æ–±–∞–≤–ª–µ–Ω–æ")
        
        # 4. –î–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –Ω–∞ name
        try:
            cursor.execute("CREATE UNIQUE INDEX IF NOT EXISTS idx_companies_name_unique ON companies(name)")
            print("‚úì –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –Ω–∞ –ø–æ–ª–µ name —Å–æ–∑–¥–∞–Ω")
        except psycopg2.Error as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å: {e}")
        
        # 5. –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∏–Ω–¥–µ–∫—Å—ã
        old_indexes = ['idx_companies_external_id', 'idx_companies_source', 'idx_companies_company_id']
        for index_name in old_indexes:
            try:
                cursor.execute(f"DROP INDEX IF EXISTS {index_name}")
                print(f"‚úì –ò–Ω–¥–µ–∫—Å {index_name} —É–¥–∞–ª–µ–Ω")
            except psycopg2.Error as e:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∏–Ω–¥–µ–∫—Å {index_name}: {e}")
        
        # 6. –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É —Ü–µ–ª–µ–≤—ã–º–∏ –∫–æ–º–ø–∞–Ω–∏—è–º–∏ –µ—Å–ª–∏ –æ–Ω–∞ –ø—É—Å—Ç–∞
        cursor.execute("SELECT COUNT(*) FROM companies")
        companies_count = cursor.fetchone()[0]
        
        if companies_count == 0:
            print("–ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É —Ü–µ–ª–µ–≤—ã–º–∏ –∫–æ–º–ø–∞–Ω–∏—è–º–∏...")
            from src.config.target_companies import TARGET_COMPANIES
            
            for company in TARGET_COMPANIES:
                cursor.execute("""
                    INSERT INTO companies (name, description)
                    VALUES (%s, %s)
                    ON CONFLICT (name) DO NOTHING
                """, (
                    company["name"],
                    company.get("description", "")
                ))
            
            print(f"‚úì –î–æ–±–∞–≤–ª–µ–Ω–æ {len(TARGET_COMPANIES)} —Ü–µ–ª–µ–≤—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π")
        
        # 7. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        cursor.execute("""
            SELECT column_name, data_type 
            FROM information_schema.columns 
            WHERE table_name = 'companies' 
            ORDER BY ordinal_position
        """)
        
        final_columns = cursor.fetchall()
        print("\n–§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã companies:")
        for col_name, data_type in final_columns:
            print(f"  - {col_name}: {data_type}")
        
        # 8. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        cursor.execute("SELECT COUNT(*) FROM companies")
        final_count = cursor.fetchone()[0]
        print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–ø–∞–Ω–∏–π: {final_count}")
        
        connection.commit()
        print("\n‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        connection.rollback()
        raise
    finally:
        if 'cursor' in locals():
            cursor.close()
        connection.close()

if __name__ == "__main__":
    migrate_simplify_companies()
