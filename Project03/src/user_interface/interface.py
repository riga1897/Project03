"""
–ú–æ–¥—É–ª—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
"""

from typing import Optional

from src.database import DBManager, DatabaseSetup
from src.data_loader import DataLoader
from src.api.hh_api import HHApi # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º HHApi –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ run()


class UserInterface:
    """
    –ö–ª–∞—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞.

    –†–µ–∞–ª–∏–∑—É–µ—Ç –∫–æ–Ω—Å–æ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º,
    –∏—Å–ø–æ–ª—å–∑—É—è –º–µ—Ç–æ–¥—ã –∫–ª–∞—Å—Å–æ–≤ DBManager –∏ DataLoader.
    """

    def __init__(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞."""
        self.api = HHApi()
        # –ü–µ—Ä–µ–¥–∞–µ–º debug_mode –≤ DBManager –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        self.db_manager: DBManager = DBManager(debug_mode=False)
        self.data_loader: DataLoader = DataLoader(self.db_manager, self.api)

        # –ö—ç—à –≤ –ø–∞–º—è—Ç–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω—ã–º
        self.memory_cache = {}

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–ª–∞–¥–æ—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ—Ç–∫–ª—é—á–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
        self.debug_mode = False


    def display_menu(self) -> None:
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
        print("\n" + "=" * 60)
        print("–°–ò–°–¢–ï–ú–ê –ê–ù–ê–õ–ò–ó–ê –í–ê–ö–ê–ù–°–ò–ô HEADHUNTER")
        print("=" * 60)
        print("\nüìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:")
        print("1. –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å HeadHunter")
        print("2. –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–º–ø–∞–Ω–∏–∏ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–∫–∞–Ω—Å–∏–π")
        print("3. –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –≤–∞–∫–∞–Ω—Å–∏–∏")
        print("4. –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ä–µ–¥–Ω—é—é –∑–∞—Ä–ø–ª–∞—Ç—É")
        print("5. –ù–∞–π—Ç–∏ –≤–∞–∫–∞–Ω—Å–∏–∏ —Å –∑–∞—Ä–ø–ª–∞—Ç–æ–π –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–π")
        print("6. –ü–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É")
        print("7. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π")
        print("8. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—ç—à–µ–º")
        print("9. –°—Ç–∞—Ç—É—Å –∫—ç—à–∞")
        print("10. –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–ª–∞–¥–∫–∏")
        print("11. –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ")
        print("0. –í—ã—Ö–æ–¥")

    def show_companies(self) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–º–ø–∞–Ω–∏–∏ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–∫–∞–Ω—Å–∏–π."""
        print("\nüè¢ –ö–û–ú–ü–ê–ù–ò–ò –ò –ö–û–õ–ò–ß–ï–°–¢–í–û –í–ê–ö–ê–ù–°–ò–ô")
        print("-" * 40)

        companies = self.db_manager.get_companies_and_vacancies_count()

        if not companies:
            print("–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ (–æ–ø—Ü–∏—è 1)")
            return

        print(f"–ù–∞–π–¥–µ–Ω–æ –∫–æ–º–ø–∞–Ω–∏–π: {len(companies)}\n")

        for i, company in enumerate(companies, 1):
            print(f"{i:2}. {company['company_name']:<35} | {company['vacancies_count']:>3} –≤–∞–∫–∞–Ω—Å–∏–π")

    def show_all_vacancies(self) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –≤–∞–∫–∞–Ω—Å–∏–∏."""
        print("\nüíº –í–°–ï –í–ê–ö–ê–ù–¶–ò–ò")
        print("-" * 40)

        vacancies = self.db_manager.get_all_vacancies()

        if not vacancies:
            print("–í–∞–∫–∞–Ω—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ (–æ–ø—Ü–∏—è 1)")
            return

        print(f"–í—Å–µ–≥–æ –≤–∞–∫–∞–Ω—Å–∏–π: {len(vacancies)}\n")

        # –ü–æ–¥—Å—á–∏—Ç–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∑–∞—Ä–ø–ª–∞—Ç–∞–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        vacancies_with_salary = [v for v in vacancies if v.get('salary_from') or v.get('salary_to')]
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {len(vacancies_with_salary)} –∏–∑ {len(vacancies)} –≤–∞–∫–∞–Ω—Å–∏–π –∏–º–µ—é—Ç –∑–∞—Ä–ø–ª–∞—Ç—É")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –≤–∞–∫–∞–Ω—Å–∏–π
        for i, vacancy in enumerate(vacancies[:10], 1):
            salary_info = "–Ω–µ —É–∫–∞–∑–∞–Ω–∞"
            if vacancy.get('salary_from') or vacancy.get('salary_to'):
                parts = []
                if vacancy.get('salary_from'):
                    parts.append(f"–æ—Ç {vacancy['salary_from']:,}")
                if vacancy.get('salary_to'):
                    parts.append(f"–¥–æ {vacancy['salary_to']:,}")
                currency = vacancy.get('salary_currency', 'RUR')
                salary_info = f"{' '.join(parts)} {currency}"

            print(f"{i}. {vacancy['vacancy_name']}")
            print(f"   –ö–æ–º–ø–∞–Ω–∏—è: {vacancy['company_name']}")
            print(f"   –ó–∞—Ä–ø–ª–∞—Ç–∞: {salary_info}")
            if vacancy.get('salary_status'):
                print(f"   –°—Ç–∞—Ç—É—Å –∑–∞—Ä–ø–ª–∞—Ç—ã: {vacancy['salary_status']}")
            print(f"   –°—Å—ã–ª–∫–∞: {vacancy['vacancy_url']}")
            print()

        if len(vacancies) > 10:
            print(f"... –ø–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ 10 –∏–∑ {len(vacancies)} –≤–∞–∫–∞–Ω—Å–∏–π")

    def show_avg_salary(self) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ä–µ–¥–Ω—é—é –∑–∞—Ä–ø–ª–∞—Ç—É."""
        print("\nüí∞ –°–†–ï–î–ù–Ø–Ø –ó–ê–†–ü–õ–ê–¢–ê")
        print("-" * 40)

        avg_salary = self.db_manager.get_avg_salary()

        if avg_salary:
            print(f"–°—Ä–µ–¥–Ω—è—è –∑–∞—Ä–ø–ª–∞—Ç–∞ –ø–æ –≤—Å–µ–º –≤–∞–∫–∞–Ω—Å–∏—è–º: {avg_salary:,.0f} —Ä—É–±.")
        else:
            print("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ä–µ–¥–Ω—é—é –∑–∞—Ä–ø–ª–∞—Ç—É")
            print("–í–æ–∑–º–æ–∂–Ω–æ, –≤ –±–∞–∑–µ –Ω–µ—Ç –≤–∞–∫–∞–Ω—Å–∏–π —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π –∑–∞—Ä–ø–ª–∞—Ç–æ–π")

    def show_high_salary_vacancies(self) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∞–∫–∞–Ω—Å–∏–∏ —Å –∑–∞—Ä–ø–ª–∞—Ç–æ–π –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–π."""
        print("\nüíé –í–ê–ö–ê–ù–°–ò–ò –° –ó–ê–†–ü–õ–ê–¢–û–ô –í–´–®–ï –°–†–ï–î–ù–ï–ô")
        print("-" * 40)

        vacancies = self.db_manager.get_vacancies_with_higher_salary()

        if not vacancies:
            print("–í–∞–∫–∞–Ω—Å–∏–∏ —Å –∑–∞—Ä–ø–ª–∞—Ç–æ–π –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return

        avg_salary = self.db_manager.get_avg_salary()
        if avg_salary:
            print(f"–°—Ä–µ–¥–Ω—è—è –∑–∞—Ä–ø–ª–∞—Ç–∞: {avg_salary:,.0f} —Ä—É–±.")

        print(f"–ù–∞–π–¥–µ–Ω–æ –≤–∞–∫–∞–Ω—Å–∏–π: {len(vacancies)}\n")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-10
        for i, vacancy in enumerate(vacancies[:10], 1):
            salary = vacancy.get('calculated_salary', 0)
            print(f"{i:2}. {vacancy['vacancy_name'][:50]}")
            print(f"    –ö–æ–º–ø–∞–Ω–∏—è: {vacancy['company_name']}")
            print(f"    –ó–∞—Ä–ø–ª–∞—Ç–∞: {salary:,.0f} —Ä—É–±.")
            print()

        if len(vacancies) > 10:
            print(f"... –ø–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ 10 –∏–∑ {len(vacancies)} –≤–∞–∫–∞–Ω—Å–∏–π")

    def search_by_keyword(self) -> None:
        """–ü–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É."""
        print("\nüîç –ü–û–ò–°–ö –í–ê–ö–ê–ù–°–ò–ô –ü–û –ö–õ–Æ–ß–ï–í–û–ú–£ –°–õ–û–í–£")
        print("-" * 40)

        keyword = input("–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞: ").strip()

        if not keyword:
            print("–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
            return

        vacancies = self.db_manager.get_vacancies_with_keyword(keyword)

        if not vacancies:
            print(f"–í–∞–∫–∞–Ω—Å–∏–∏ —Å '{keyword}' –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return

        print(f"\n–ù–∞–π–¥–µ–Ω–æ –≤–∞–∫–∞–Ω—Å–∏–π: {len(vacancies)}\n")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        for i, vacancy in enumerate(vacancies[:10], 1):
            print(f"{i:2}. {vacancy['vacancy_name']}")
            print(f"    –ö–æ–º–ø–∞–Ω–∏—è: {vacancy['company_name']}")

            # –ó–∞—Ä–ø–ª–∞—Ç–∞
            salary_info = "–Ω–µ —É–∫–∞–∑–∞–Ω–∞"
            if vacancy.get('salary_from') or vacancy.get('salary_to'):
                parts = []
                if vacancy.get('salary_from'):
                    parts.append(f"–æ—Ç {vacancy['salary_from']:,}")
                if vacancy.get('salary_to'):
                    parts.append(f"–¥–æ {vacancy['salary_to']:,}")
                currency = vacancy.get('salary_currency', 'RUR')
                salary_info = f"{' '.join(parts)} {currency}"

            print(f"    –ó–∞—Ä–ø–ª–∞—Ç–∞: {salary_info}")
            print(f"    –ì–æ—Ä–æ–¥: {vacancy.get('area_name', '–Ω–µ —É–∫–∞–∑–∞–Ω')}")
            print()

        if len(vacancies) > 10:
            print(f"... –ø–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ 10 –∏–∑ {len(vacancies)} –≤–∞–∫–∞–Ω—Å–∏–π")

    def demonstrate_all(self) -> None:
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã."""
        print("\nüéØ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –í–°–ï–• –í–û–ó–ú–û–ñ–ù–û–°–¢–ï–ô")
        print("=" * 60)

        # 1. –ö–æ–º–ø–∞–Ω–∏–∏ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–∫–∞–Ω—Å–∏–π
        print("\n1Ô∏è‚É£ get_companies_and_vacancies_count()")
        companies = self.db_manager.get_companies_and_vacancies_count()
        if companies:
            print(f"   –ù–∞–π–¥–µ–Ω–æ {len(companies)} –∫–æ–º–ø–∞–Ω–∏–π")
            for company in companies[:3]:
                print(f"   ‚Ä¢ {company['company_name']}: {company['vacancies_count']} –≤–∞–∫–∞–Ω—Å–∏–π")

        # 2. –í—Å–µ –≤–∞–∫–∞–Ω—Å–∏–∏
        print("\n2Ô∏è‚É£ get_all_vacancies()")
        all_vacancies = self.db_manager.get_all_vacancies()
        if all_vacancies:
            print(f"   –í—Å–µ–≥–æ –≤–∞–∫–∞–Ω—Å–∏–π –≤ –±–∞–∑–µ: {len(all_vacancies)}")

        # 3. –°—Ä–µ–¥–Ω—è—è –∑–∞—Ä–ø–ª–∞—Ç–∞
        print("\n3Ô∏è‚É£ get_avg_salary()")
        avg_salary = self.db_manager.get_avg_salary()
        if avg_salary:
            print(f"   –°—Ä–µ–¥–Ω—è—è –∑–∞—Ä–ø–ª–∞—Ç–∞: {avg_salary:,.0f} —Ä—É–±.")

        # 4. –í–∞–∫–∞–Ω—Å–∏–∏ –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–π
        print("\n4Ô∏è‚É£ get_vacancies_with_higher_salary()")
        high_salary = self.db_manager.get_vacancies_with_higher_salary()
        if high_salary:
            print(f"   –í–∞–∫–∞–Ω—Å–∏–π —Å –∑–∞—Ä–ø–ª–∞—Ç–æ–π –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–π: {len(high_salary)}")

        # 5. –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        print("\n5Ô∏è‚É£ get_vacancies_with_keyword()")
        keywords = ['python', 'java', 'senior', 'junior']
        for keyword in keywords:
            results = self.db_manager.get_vacancies_with_keyword(keyword)
            print(f"   ‚Ä¢ '{keyword}': –Ω–∞–π–¥–µ–Ω–æ {len(results)} –≤–∞–∫–∞–Ω—Å–∏–π")

        print("\n" + "=" * 60)

    def _clear_cache(self) -> None:
        """–û—á–∏—â–∞–µ—Ç –∫—ç—à –¥–∞–Ω–Ω—ã—Ö."""
        # –û—á–∏—â–∞–µ–º —á–µ—Ä–µ–∑ DataLoader
        if self.data_loader.clear_cache():
            if self.debug_mode:
                print("‚úÖ –§–∞–π–ª–æ–≤—ã–π –∫—ç—à —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω")
        else:
            if self.debug_mode:
                print("‚ÑπÔ∏è  –§–∞–π–ª–æ–≤—ã–π –∫—ç—à —É–∂–µ –ø—É—Å—Ç")

        # –û—á–∏—â–∞–µ–º –∫—ç—à HH API –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        try:
            self.api.clear_cache("hh")
            if self.debug_mode:
                print("‚úÖ –ö—ç—à API HeadHunter –æ—á–∏—â–µ–Ω")
        except Exception as e:
            if self.debug_mode:
                print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –∫—ç—à API: {e}")

    def _show_cache_status(self) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∫—ç—à–∞."""
        print("\n" + "="*60)
        print("üìä –°–¢–ê–¢–£–° –ö–≠–®–ê")
        print("="*60)

        # –°—Ç–∞—Ç—É—Å —Ñ–∞–π–ª–æ–≤–æ–≥–æ –∫—ç—à–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ DataLoader
        cache_info = self.data_loader.get_cache_info()
        if cache_info['exists']:
            print(f"üìÅ –§–∞–π–ª–æ–≤—ã–π –∫—ç—à –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: ‚úÖ –°—É—â–µ—Å—Ç–≤—É–µ—Ç ({cache_info['size_mb']} MB)")
            print(f"üìä –î–∞–Ω–Ω—ã–µ: {cache_info['companies_count']} –∫–æ–º–ø–∞–Ω–∏–π, {cache_info['vacancies_count']} –≤–∞–∫–∞–Ω—Å–∏–π")
            if cache_info['valid']:
                print("‚úÖ –ö—ç—à –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω")
            else:
                print("‚ö†Ô∏è –ö—ç—à —É—Å—Ç–∞—Ä–µ–ª")
        else:
            print("üìÅ –§–∞–π–ª–æ–≤—ã–π –∫—ç—à –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")

        # –°—Ç–∞—Ç—É—Å –∫—ç—à–∞ API
        try:
            cache_status = self.api.get_cache_status()

            print(f"üóÇÔ∏è  –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∫—ç—à–∞ API: {cache_status.get('cache_dir', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
            print(f"üìÑ –§–∞–π–ª–æ–≤ –≤ –∫—ç—à–µ API: {cache_status.get('file_cache_count', 0)}")

            memory_cache = cache_status.get('memory_cache', {})
            if memory_cache:
                print(f"üß† –ö—ç—à –≤ –ø–∞–º—è—Ç–∏: {memory_cache.get('size', 0)}/{memory_cache.get('max_size', 0)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")

            if cache_status.get('cache_files'):
                print("üìã –§–∞–π–ª—ã –∫—ç—à–∞:")
                for file in cache_status['cache_files'][:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                    print(f"   ‚Ä¢ {file}")
                if len(cache_status['cache_files']) > 5:
                    print(f"   ... –∏ –µ—â–µ {len(cache_status['cache_files']) - 5}")

        except Exception as e:
            if self.debug_mode:
                print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∫—ç—à–∞ API: {e}")

        print("="*60)


    def handle_cache_management(self) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—ç—à–µ–º."""
        print("\nüîß –£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–≠–®–ï–ú")
        print("-" * 40)
        print("1. –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à")
        print("2. –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—ç—à–µ")
        print("0. –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

        choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é: ").strip()

        if choice == '1':
            self._clear_cache()
            if self.debug_mode:
                print("–û–ø–µ—Ä–∞—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
        elif choice == '2':
            self._show_cache_status()
        elif choice == '0':
            pass  # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        else:
            print("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω–∞—è –æ–ø—Ü–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    def load_data_from_api(self) -> None:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ API HeadHunter —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –≤—ã–±–æ—Ä–∞ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –∏ –ø–µ—Ä–∏–æ–¥–∞."""
        print("\n" + "="*60)
        print("–ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• HEADHUNTER –í POSTGRESQL")
        print("="*60)

        # –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        keyword = input("üéØ –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π (–∏–ª–∏ Enter –¥–ª—è –≤—Å–µ—Ö): ").strip()

        if not keyword:
            keyword = "–≤—Å–µ" # –ò—Å–ø–æ–ª—å–∑—É–µ–º "–≤—Å–µ" –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ü–∏–∏, —á—Ç–æ –ø–æ–∏—Å–∫ –±–µ–∑ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞
            if self.debug_mode:
                print("üîç –ë—É–¥–µ–º –∑–∞–≥—Ä—É–∂–∞—Ç—å –≤—Å–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –∫–æ–º–ø–∞–Ω–∏–π")
        else:
            if self.debug_mode:
                print(f"üéØ –ü–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É: '{keyword}'")

        # –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–∏–æ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        period = self._get_period_choice()
        if period is None:
            print("‚ùå –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
            return

        if self.debug_mode:
            print(f"üìÖ –ü–µ—Ä–∏–æ–¥ –ø–æ–∏—Å–∫–∞: –ø–æ—Å–ª–µ–¥–Ω–∏–µ {period} –¥–Ω–µ–π")
            print(f"\nüì¶ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")

        try:
            # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ API —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –ø–µ—Ä–∏–æ–¥–æ–º
            data = self.api.collect_data(keyword=keyword if keyword != "–≤—Å–µ" else None, period=period)

            if not data or not data.get('companies') or not data.get('vacancies'):
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ API")
                return

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∫—ç—à–µ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            self.data_loader.cache_data = data

            print(f"\n‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:")
            print(f"   üìä –ö–æ–º–ø–∞–Ω–∏–π: {len(data['companies'])}")
            print(f"   üíº –í–∞–∫–∞–Ω—Å–∏–π: {len(data['vacancies'])}")
            print(f"   üìÖ –ó–∞ –ø–µ—Ä–∏–æ–¥: {period} –¥–Ω–µ–π")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É PostgreSQL
            print(f"\nüì• –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É PostgreSQL...")
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            success = self.data_loader.load_data_with_params(
                use_cache=True,
                keyword=keyword if keyword != "–≤—Å–µ" else None,
                period=period
            )
            if success:
                print(f"‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!")
            else:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")

            if self.debug_mode:
                print(f"\nüíæ –î–∞–Ω–Ω—ã–µ —Ç–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∫—ç—à–µ –ø–∞–º—è—Ç–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞")

        except Exception as e:
            print(f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

    @staticmethod
    def _get_period_choice() -> Optional[int]:
        """
        –í—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤–∞–∫–∞–Ω—Å–∏–π

        Returns:
            Optional[int]: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–ª–∏ None –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ
        """
        try:
            print("\nüìÖ –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤–∞–∫–∞–Ω—Å–∏–π:")
            print("1. 1 –¥–µ–Ω—å")
            print("2. 3 –¥–Ω—è")
            print("3. 7 –¥–Ω–µ–π")
            print("4. 15 –¥–Ω–µ–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)")
            print("5. 30 –¥–Ω–µ–π")
            print("6. –í–≤–µ—Å—Ç–∏ —Å–≤–æ–π –ø–µ—Ä–∏–æ–¥")
            print("0. –û—Ç–º–µ–Ω–∞")

            choice = input("–í–∞—à –≤—ã–±–æ—Ä (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 15 –¥–Ω–µ–π): ").strip()

            period_map = {"1": 1, "2": 3, "3": 7, "4": 15, "5": 30, "": 15}

            if choice == "0":
                print("üìÖ –í—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω.")
                return None
            elif choice in period_map:
                return period_map[choice]
            elif choice == "6":
                try:
                    custom_period = int(input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π (1-365): "))
                    if 1 <= custom_period <= 365:
                        return custom_period
                    else:
                        print("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è 15 –¥–Ω–µ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
                        return 15
                except ValueError:
                    print("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è 15 –¥–Ω–µ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
                    return 15
            else:
                print("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è 15 –¥–Ω–µ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
                return 15

        except KeyboardInterrupt:
            print("\nüìÖ –í—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω.")
            return None

    def _debug_settings_menu(self) -> None:
        """–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ—Ç–ª–∞–¥–∫–∏"""
        print("\n" + "="*60)
        print("–ù–ê–°–¢–†–û–ô–ö–ò –û–¢–õ–ê–î–ö–ò")
        print("="*60)

        current_status = "–≤–∫–ª—é—á–µ–Ω" if self.db_manager.debug_mode else "–æ—Ç–∫–ª—é—á–µ–Ω"
        print(f"–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏: {current_status}")

        if self.db_manager.debug_mode:
            choice = input("\n–û—Ç–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏? (y/n): ").lower()
            if choice == 'y':
                self.db_manager.debug_mode = False
                print("‚úÖ –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω")
        else:
            choice = input("\n–í–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏? (y/n): ").lower()
            if choice == 'y':
                self.db_manager.debug_mode = True
                print("‚úÖ –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ –≤–∫–ª—é—á–µ–Ω")

        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")

    def _data_diagnostics_menu(self) -> None:
        """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ"""
        print("\n" + "="*60)
        print("–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –î–ê–ù–ù–´–• –í –ë–ê–ó–ï")
        print("="*60)

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∑–∞—Ä–ø–ª–∞—Ç–∞–º
        vacancies = self.db_manager.get_all_vacancies()
        companies = self.db_manager.get_companies_and_vacancies_count()

        print(f"üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   ‚Ä¢ –ö–æ–º–ø–∞–Ω–∏–π –≤ –±–∞–∑–µ: {len(companies)}")
        print(f"   ‚Ä¢ –í–∞–∫–∞–Ω—Å–∏–π –≤ –±–∞–∑–µ: {len(vacancies)}")

        # –ê–Ω–∞–ª–∏–∑ –∑–∞—Ä–ø–ª–∞—Ç
        vacancies_with_salary = [v for v in vacancies if v.get('salary_from') or v.get('salary_to')]
        print(f"\nüí∞ –ê–Ω–∞–ª–∏–∑ –∑–∞—Ä–ø–ª–∞—Ç:")
        print(f"   ‚Ä¢ –í–∞–∫–∞–Ω—Å–∏–π —Å –∑–∞—Ä–ø–ª–∞—Ç–æ–π: {len(vacancies_with_salary)}")
        print(f"   ‚Ä¢ –í–∞–∫–∞–Ω—Å–∏–π –±–µ–∑ –∑–∞—Ä–ø–ª–∞—Ç—ã: {len(vacancies) - len(vacancies_with_salary)}")
        print(f"   ‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç —Å –∑–∞—Ä–ø–ª–∞—Ç–æ–π: {len(vacancies_with_salary)/len(vacancies)*100:.1f}%" if vacancies else "0%")

        # –ü—Ä–∏–º–µ—Ä—ã –≤–∞–∫–∞–Ω—Å–∏–π —Å –∑–∞—Ä–ø–ª–∞—Ç–æ–π
        if vacancies_with_salary:
            print(f"\nüíº –ü—Ä–∏–º–µ—Ä—ã –≤–∞–∫–∞–Ω—Å–∏–π —Å –∑–∞—Ä–ø–ª–∞—Ç–æ–π:")
            for i, v in enumerate(vacancies_with_salary[:3], 1):
                salary_parts = []
                if v.get('salary_from'):
                    salary_parts.append(f"–æ—Ç {v['salary_from']:,}")
                if v.get('salary_to'):
                    salary_parts.append(f"–¥–æ {v['salary_to']:,}")
                salary_str = f"{' '.join(salary_parts)} {v.get('salary_currency', 'RUR')}"
                print(f"   {i}. {v['vacancy_name'][:50]}...")
                print(f"      –ó–∞—Ä–ø–ª–∞—Ç–∞: {salary_str}")

        # –ê–Ω–∞–ª–∏–∑ –∫–æ–º–ø–∞–Ω–∏–π
        print(f"\nüè¢ –¢–æ–ø-5 –∫–æ–º–ø–∞–Ω–∏–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –≤–∞–∫–∞–Ω—Å–∏–π:")
        for i, company in enumerate(companies[:5], 1):
            print(f"   {i}. {company['company_name']}: {company['vacancies_count']} –≤–∞–∫–∞–Ω—Å–∏–π")

        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")


    def run(self) -> None:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≥–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞."""
        while True:
            self.display_menu()

            try:
                # –û–±–Ω–æ–≤–ª–µ–Ω –¥–∏–∞–ø–∞–∑–æ–Ω –≤—ã–±–æ—Ä–∞ –æ–ø—Ü–∏–π
                choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é (0-11): ").strip()

                if choice == '1':
                    self.load_data_from_api()
                elif choice == '2':
                    self.show_companies()
                elif choice == '3':
                    self.show_all_vacancies()
                elif choice == '4':
                    self.show_avg_salary()
                elif choice == '5':
                    self.show_high_salary_vacancies()
                elif choice == '6':
                    self.search_by_keyword()
                elif choice == '7':
                    self.demonstrate_all()
                elif choice == '8':
                    self.handle_cache_management()
                elif choice == '9':
                    self._show_cache_status()
                # –î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –ø—É–Ω–∫—Ç –º–µ–Ω—é –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ—Ç–ª–∞–¥–∫–∏
                elif choice == "10":
                    self._debug_settings_menu()
                elif choice == '11':
                    self._data_diagnostics_menu()
                elif choice == '0':
                    print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                    break
                else:
                    print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

                if choice != '0':
                    input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")

            except KeyboardInterrupt:
                print("\n\nüëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                break
            except Exception as e:
                print(f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
                input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")