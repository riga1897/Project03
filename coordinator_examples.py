"""
–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–≤ –≤ Python

–≠—Ç–æ—Ç —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã —Ç–æ–≥–æ, –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
–ø–∞—Ç—Ç–µ—Ä–Ω –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞ –≤ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö.
"""

import asyncio
from typing import Dict, List, Any
from dataclasses import dataclass
from coordinator_patterns import (
    ServiceCoordinator, 
    PipelineCoordinator, 
    TransactionalCoordinator,
    CoordinatorEvent,
    CoordinationResult
)

# ================================
# –ü–†–ò–ú–ï–† 1: –û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–ö–ê–ó–û–í E-COMMERCE
# ================================

class InventoryService:
    """–°–µ—Ä–≤–∏—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–º"""
    
    def __init__(self):
        self.inventory = {"product_1": 10, "product_2": 5}
    
    async def reserve_items(self, order_data: Dict) -> bool:
        """–†–µ–∑–µ—Ä–≤–∏—Ä—É–µ—Ç —Ç–æ–≤–∞—Ä—ã –¥–ª—è –∑–∞–∫–∞–∑–∞"""
        print(f"üì¶ Reserving items: {order_data['items']}")
        for item_id, quantity in order_data['items'].items():
            if self.inventory.get(item_id, 0) < quantity:
                raise ValueError(f"Insufficient inventory for {item_id}")
            self.inventory[item_id] -= quantity
        return True
    
    async def release_items(self, order_data: Dict) -> bool:
        """–û—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã"""
        print(f"üîÑ Releasing items: {order_data['items']}")
        for item_id, quantity in order_data['items'].items():
            self.inventory[item_id] += quantity
        return True

class PaymentService:
    """–°–µ—Ä–≤–∏—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π"""
    
    async def process_payment(self, order_data: Dict) -> Dict:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–ª–∞—Ç–µ–∂"""
        print(f"üí≥ Processing payment: ${order_data['total_amount']}")
        
        # –°–∏–º—É–ª—è—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞
        await asyncio.sleep(0.1)
        
        return {
            "transaction_id": "tx_12345",
            "amount": order_data['total_amount'],
            "status": "completed"
        }
    
    async def refund_payment(self, transaction_id: str) -> bool:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–ª–∞—Ç–µ–∂"""
        print(f"üí∏ Refunding payment: {transaction_id}")
        return True

class NotificationService:
    """–°–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    
    async def send_confirmation(self, order_data: Dict) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞"""
        print(f"üìß Sending order confirmation to {order_data['customer_email']}")
        return True
    
    async def send_shipping_notification(self, order_data: Dict) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–æ—Å—Ç–∞–≤–∫–µ"""
        print(f"üöö Sending shipping notification to {order_data['customer_email']}")
        return True

class OrderCoordinator(ServiceCoordinator):
    """–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–æ–≤"""
    
    def __init__(self):
        super().__init__()
        self.setup_services()
        self.setup_event_handlers()
    
    def setup_services(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Å–µ—Ä–≤–∏—Å—ã –∏ –∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"""
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏
        self.register_service("inventory", InventoryService())
        self.register_service("payment", PaymentService(), dependencies=["inventory"])
        self.register_service("notification", NotificationService(), dependencies=["payment"])
    
    def setup_event_handlers(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π"""
        self.register_handler(CoordinatorEvent.STARTED, self._on_order_started)
        self.register_handler(CoordinatorEvent.COMPLETED, self._on_order_completed)
        self.register_handler(CoordinatorEvent.FAILED, self._on_order_failed)
    
    async def _on_order_started(self, event: CoordinatorEvent, data: Any):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞"""
        print(f"üöÄ Order processing started: {data}")
    
    async def _on_order_completed(self, event: CoordinatorEvent, result: CoordinationResult):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
        print(f"‚úÖ Order processing completed successfully!")
    
    async def _on_order_failed(self, event: CoordinatorEvent, result: CoordinationResult):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–∫–∏ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞"""
        print(f"‚ùå Order processing failed: {result.errors}")
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏
        await self._compensate_failed_order(result)
    
    async def _compensate_failed_order(self, result: CoordinationResult):
        """–ö–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è –Ω–µ—É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞"""
        print("üîÑ Starting compensation process...")
        
        # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
        inventory_service = self._services.get("inventory")
        if inventory_service and "inventory" in result.data:
            try:
                await inventory_service.release_items(result.metadata.get("order_data"))
            except Exception as e:
                print(f"‚ö†Ô∏è Compensation error: {e}")

async def example_order_processing():
    """–ü—Ä–∏–º–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞"""
    print("=" * 50)
    print("üõí E-COMMERCE ORDER PROCESSING EXAMPLE")
    print("=" * 50)
    
    coordinator = OrderCoordinator()
    
    # –î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
    order_data = {
        "order_id": "ORD_001",
        "customer_email": "customer@example.com",
        "items": {"product_1": 2, "product_2": 1},
        "total_amount": 150.00
    }
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
    coordinator.set_context("order_data", order_data)
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–∫–∞–∑
    if order_data["items"]["product_1"] <= 10:  # –£—Å–ø–µ—à–Ω—ã–π —Å–ª—É—á–∞–π
        result = await coordinator.coordinate("reserve_items", order_data)
        if result.success:
            await coordinator.coordinate("process_payment", order_data)
            await coordinator.coordinate("send_confirmation", order_data)
    else:
        # –°–ª—É—á–∞–π —Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ç–æ–≤–∞—Ä–∞
        order_data["items"]["product_1"] = 15  # –ü—Ä–µ–≤—ã—à–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        result = await coordinator.coordinate("reserve_items", order_data)

# ================================
# –ü–†–ò–ú–ï–† 2: PIPELINE –û–ë–†–ê–ë–û–¢–ö–ò –î–ê–ù–ù–´–•
# ================================

class DataValidationStep:
    """–®–∞–≥ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö"""
    
    def __call__(self, data: Dict, context: Dict) -> Dict:
        print(f"üîç Validating data: {list(data.keys())}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        required_fields = ['name', 'email', 'age']
        for field in required_fields:
            if field not in data:
                raise ValueError(f"Missing required field: {field}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∫—É –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        data['_validated'] = True
        return data

class DataEnrichmentStep:
    """–®–∞–≥ –æ–±–æ–≥–∞—â–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"""
    
    def __call__(self, data: Dict, context: Dict) -> Dict:
        print(f"‚ö° Enriching data for: {data.get('name')}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        data['full_name'] = f"{data.get('name')} (Customer)"
        data['age_group'] = 'adult' if data.get('age', 0) >= 18 else 'minor'
        data['processed_at'] = "2024-01-01T00:00:00Z"
        
        return data

class DataPersistenceStep:
    """–®–∞–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"""
    
    def __call__(self, data: Dict, context: Dict) -> Dict:
        print(f"üíæ Persisting data for: {data.get('full_name')}")
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        customer_id = f"CUST_{hash(data['email']) % 10000:04d}"
        data['customer_id'] = customer_id
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        context['saved_customer_id'] = customer_id
        
        return data

async def example_data_pipeline():
    """–ü—Ä–∏–º–µ—Ä pipeline –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö"""
    print("\n" + "=" * 50)
    print("üîÑ DATA PROCESSING PIPELINE EXAMPLE")
    print("=" * 50)
    
    coordinator = PipelineCoordinator()
    
    # –î–æ–±–∞–≤–ª—è–µ–º —à–∞–≥–∏ –≤ pipeline
    coordinator.add_step(DataValidationStep())
    coordinator.add_step(DataEnrichmentStep())
    coordinator.add_step(DataPersistenceStep())
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    raw_data = {
        "name": "John Doe",
        "email": "john.doe@example.com",
        "age": 25
    }
    
    result = await coordinator.coordinate(raw_data, source="web_form")
    
    if result.success:
        print(f"‚úÖ Pipeline completed! Customer ID: {coordinator.get_context('saved_customer_id')}")
        print(f"üìä Final data: {result.data}")
    else:
        print(f"‚ùå Pipeline failed: {result.errors}")

# ================================
# –ü–†–ò–ú–ï–† 3: –ú–ò–ö–†–û–°–ï–†–í–ò–°–ù–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê
# ================================

class UserService:
    """–°–µ—Ä–≤–∏—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    
    async def get_user(self, user_id: str) -> Dict:
        print(f"üë§ Getting user: {user_id}")
        return {
            "user_id": user_id,
            "name": "John Doe",
            "email": "john@example.com"
        }
    
    async def update_user_stats(self, user_id: str, action: str) -> bool:
        print(f"üìà Updating user stats: {user_id} - {action}")
        return True

class ProductService:
    """–°–µ—Ä–≤–∏—Å —Ç–æ–≤–∞—Ä–æ–≤"""
    
    async def get_product(self, product_id: str) -> Dict:
        print(f"üì¶ Getting product: {product_id}")
        return {
            "product_id": product_id,
            "name": "Awesome Product",
            "price": 99.99
        }
    
    async def update_product_views(self, product_id: str) -> bool:
        print(f"üëÄ Updating product views: {product_id}")
        return True

class RecommendationService:
    """–°–µ—Ä–≤–∏—Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
    
    async def get_recommendations(self, user_data: Dict, product_data: Dict) -> List[Dict]:
        print(f"üéØ Getting recommendations for user: {user_data['name']}")
        return [
            {"product_id": "rec_1", "name": "Recommended Product 1", "score": 0.95},
            {"product_id": "rec_2", "name": "Recommended Product 2", "score": 0.87}
        ]

class MicroserviceCoordinator(ServiceCoordinator):
    """–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤"""
    
    def __init__(self):
        super().__init__()
        self.setup_microservices()
    
    def setup_microservices(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å—ã"""
        self.register_service("user", UserService())
        self.register_service("product", ProductService())
        self.register_service("recommendation", RecommendationService(), 
                            dependencies=["user", "product"])
    
    async def get_user_product_recommendations(self, user_id: str, product_id: str) -> CoordinationResult:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–¥—É–∫—Ç–∞"""
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–æ–¥—É–∫—Ç–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            user_service = self._services["user"]
            product_service = self._services["product"]
            recommendation_service = self._services["recommendation"]
            
            # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
            user_data, product_data = await asyncio.gather(
                user_service.get_user(user_id),
                product_service.get_product(product_id)
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            stats_updates = await asyncio.gather(
                user_service.update_user_stats(user_id, "view_product"),
                product_service.update_product_views(product_id),
                return_exceptions=True
            )
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            recommendations = await recommendation_service.get_recommendations(
                user_data, product_data
            )
            
            return CoordinationResult(
                success=True,
                data={
                    "user": user_data,
                    "product": product_data,
                    "recommendations": recommendations
                },
                metadata={
                    "stats_updated": all(isinstance(r, bool) and r for r in stats_updates)
                }
            )
            
        except Exception as e:
            return CoordinationResult(
                success=False,
                errors=[str(e)],
                metadata={"user_id": user_id, "product_id": product_id}
            )

async def example_microservices():
    """–ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã —Å –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞–º–∏"""
    print("\n" + "=" * 50)
    print("üèóÔ∏è MICROSERVICES COORDINATION EXAMPLE")
    print("=" * 50)
    
    coordinator = MicroserviceCoordinator()
    
    result = await coordinator.get_user_product_recommendations("user_123", "prod_456")
    
    if result.success:
        print("‚úÖ Microservices coordination completed!")
        print(f"üë§ User: {result.data['user']['name']}")
        print(f"üì¶ Product: {result.data['product']['name']}")
        print(f"üéØ Recommendations count: {len(result.data['recommendations'])}")
        for rec in result.data['recommendations']:
            print(f"  - {rec['name']} (score: {rec['score']})")
    else:
        print(f"‚ùå Microservices coordination failed: {result.errors}")

# ================================
# –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ó–ê–ü–£–°–ö–ê
# ================================

async def main():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ –ø—Ä–∏–º–µ—Ä—ã"""
    print("üéâ COORDINATOR PATTERNS EXAMPLES")
    print("These examples demonstrate different coordination patterns in Python\n")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã
    await example_order_processing()
    await example_data_pipeline()
    await example_microservices()
    
    print("\n" + "=" * 50)
    print("‚ú® All examples completed successfully!")
    print("=" * 50)

if __name__ == "__main__":
    asyncio.run(main())