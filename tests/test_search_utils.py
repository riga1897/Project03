
"""
–¢–µ—Å—Ç—ã –¥–ª—è –º–æ–¥—É–ª—è search_utils
"""

import pytest
from unittest.mock import Mock, patch
from src.utils.search_utils import (
    normalize_query,
    extract_keywords,
    build_search_params,
    validate_search_query,
    format_search_results
)


class TestSearchUtils:
    """–¢–µ—Å—Ç—ã –¥–ª—è —É—Ç–∏–ª–∏—Ç –ø–æ–∏—Å–∫–∞"""

    def test_normalize_query(self):
        """–¢–µ—Å—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
        # –û–±—ã—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        assert normalize_query("Python Developer") == "python developer"
        
        # –ó–∞–ø—Ä–æ—Å —Å –ª–∏—à–Ω–∏–º–∏ –ø—Ä–æ–±–µ–ª–∞–º–∏
        assert normalize_query("  Python   Developer  ") == "python developer"
        
        # –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
        assert normalize_query("") == ""
        assert normalize_query(None) == ""

    def test_extract_keywords(self):
        """–¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤"""
        # –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
        keywords = extract_keywords("Python Django REST")
        assert "python" in keywords
        assert "django" in keywords
        assert "rest" in keywords
        
        # –ó–∞–ø—Ä–æ—Å —Å–æ –∑–Ω–∞–∫–∞–º–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
        keywords = extract_keywords("Python, Django, REST API")
        assert len(keywords) >= 3
        
        # –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
        assert extract_keywords("") == []

    def test_build_search_params(self):
        """–¢–µ—Å—Ç –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–∏—Å–∫–∞"""
        # –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        params = build_search_params("python", per_page=50)
        assert params["text"] == "python"
        assert params["per_page"] == 50
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        params = build_search_params("python", salary_from=100000, area=1)
        assert params["salary"] == 100000
        assert params["area"] == 1

    def test_validate_search_query(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
        # –í–∞–ª–∏–¥–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        assert validate_search_query("Python") is True
        assert validate_search_query("JavaScript Developer") is True
        
        # –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        assert validate_search_query("") is False
        assert validate_search_query(None) is False
        assert validate_search_query("   ") is False

    def test_format_search_results(self):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞"""
        results = [
            {"id": "1", "name": "Python Developer", "source": "hh.ru"},
            {"id": "2", "profession": "Java Developer", "source": "superjob.ru"}
        ]
        
        formatted = format_search_results(results)
        assert isinstance(formatted, list)
        assert len(formatted) == 2

    def test_search_query_filtering(self):
        """–¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
        # –î–æ–ª–∂–µ–Ω —É–¥–∞–ª—è—Ç—å —Å—Ç–æ–ø-—Å–ª–æ–≤–∞
        clean_query = normalize_query("—Ä–∞–±–æ—Ç–∞ python —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –≤–∞–∫–∞–Ω—Å–∏—è")
        assert "—Ä–∞–±–æ—Ç–∞" not in clean_query or "python" in clean_query

    def test_keyword_extraction_with_operators(self):
        """–¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º–∏"""
        # AND –æ–ø–µ—Ä–∞—Ç–æ—Ä
        keywords = extract_keywords("Python AND Django")
        assert "python" in keywords
        assert "django" in keywords
        
        # OR –æ–ø–µ—Ä–∞—Ç–æ—Ä
        keywords = extract_keywords("Python OR Java")
        assert len(keywords) >= 2

    def test_empty_search_handling(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—É—Å—Ç—ã—Ö –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
        assert normalize_query("") == ""
        assert extract_keywords("") == []
        assert validate_search_query("") is False
        assert format_search_results([]) == []

    def test_special_characters_handling(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
        # –°–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É–¥–∞–ª–µ–Ω—ã
        normalized = normalize_query("C++ / C# Developer")
        assert "developer" in normalized
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–∞–∂–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        keywords = extract_keywords("React.js Vue.js")
        assert any("react" in str(k) for k in keywords)

    def test_language_detection(self):
        """–¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è–∑—ã–∫–∞ –∑–∞–ø—Ä–æ—Å–∞"""
        # –†—É—Å—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å
        russian_query = normalize_query("–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ Python")
        assert "—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫" in russian_query
        
        # –ê–Ω–≥–ª–∏–π—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å
        english_query = normalize_query("Python Developer")
        assert "python" in english_query

    def test_search_params_validation(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–∏—Å–∫–∞"""
        # –í–∞–ª–∏–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        params = build_search_params("python", per_page=20, page=0)
        assert params["per_page"] == 20
        assert params["page"] == 0
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏
        params = build_search_params("python", per_page=1000)  # –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ
        assert params["per_page"] <= 100  # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ

    def test_query_normalization_edge_cases(self):
        """–¢–µ—Å—Ç –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏"""
        # –û—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        long_query = "python " * 100
        normalized = normalize_query(long_query)
        assert len(normalized) <= 500  # –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω
        
        # –ó–∞–ø—Ä–æ—Å —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä
        assert normalize_query("12345") == "12345"
        
        # –ó–∞–ø—Ä–æ—Å —Å —ç–º–æ–¥–∑–∏ (–µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)
        emoji_query = normalize_query("Python üêç Developer")
        assert "python" in emoji_query

    def test_advanced_search_combinations(self):
        """–¢–µ—Å—Ç —Å–ª–æ–∂–Ω—ã—Ö –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π"""
        # –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        params = build_search_params(
            "python django",
            salary_from=80000,
            salary_to=200000,
            experience="between1And3",
            schedule="remote"
        )
        
        assert "python django" in params["text"]
        assert params["salary"] == 80000
        assert "experience" in params
