"""
–¢–µ—Å—Ç—ã –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ –∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è –∫–æ–¥–∞.
–ë–ï–ó –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤, –∑–∞–ø–∏—Å–∏ –Ω–∞ –¥–∏—Å–∫ –∏–ª–∏ stdin.
"""

import os
import sys
import pytest
from unittest.mock import Mock, MagicMock, patch, mock_open
from typing import Dict, List, Any, Optional

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, os.path.join(os.path.dirname(__file__), ".."))

# –ü–æ–ª–Ω–æ–µ –º–æ–∫–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
mock_requests = MagicMock()
mock_psycopg2 = MagicMock()
sys.modules['requests'] = mock_requests
sys.modules['psycopg2'] = mock_psycopg2


class TestErrorHandlingComprehensive:
    """–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""

    def test_api_error_handling(self) -> None:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ API"""
        try:
            from src.api_modules.base_api import BaseAPI

            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            class TestAPI(BaseAPI):
                def search_vacancies(self, query: str, **kwargs) -> List[Dict[str, Any]]:
                    return []

            api = TestAPI()
            assert api is not None

            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            result = api.search_vacancies("")
            assert isinstance(result, list)

        except ImportError:
            pytest.skip("BaseAPI module not found")

    def test_storage_error_handling(self) -> None:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ —Ö—Ä–∞–Ω–µ–Ω–∏—è"""
        try:
            from src.storage.abstract import AbstractStorage

            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            class TestStorage(AbstractStorage):
                def save_vacancies(self, vacancies: List[Any]) -> bool:
                    return True

                def get_vacancies(self, filters: Optional[Dict[str, Any]] = None) -> List[Any]:
                    return []

                def delete_vacancy(self, vacancy_id: str) -> bool:
                    return True

            storage = TestStorage()
            assert storage is not None

            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –ø—É—Å—Ç—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            result = storage.save_vacancies([])
            assert isinstance(result, bool)

        except ImportError:
            pytest.skip("AbstractStorage module not found")

    @patch('builtins.input', side_effect=['invalid', '1'])
    @patch('builtins.print')
    def test_input_validation_comprehensive(self, mock_print, mock_input) -> None:
        """–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞"""
        try:
            from src.utils.ui_helpers import UIHelpers

            helpers = UIHelpers()
            assert helpers is not None

            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤–≤–æ–¥–∞
            if hasattr(helpers, 'get_user_choice'):
                result = helpers.get_user_choice(['Option 1', 'Option 2'])
                assert isinstance(result, (int, str, type(None)))

        except ImportError:
            pytest.skip("UIHelpers module not found")


class TestBoundaryConditions:
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π"""

    def test_empty_data_handling(self) -> None:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—É—Å—Ç—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            from src.utils.salary import Salary

            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞—Ä–ø–ª–∞—Ç—É —Å –ø—É—Å—Ç—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            empty_salary = Salary({})
            assert empty_salary is not None

            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞—Ä–ø–ª–∞—Ç—É —Å None
            none_salary = Salary(None)
            assert none_salary is not None

        except ImportError:
            pytest.skip("Salary module not found")

    def test_large_data_sets(self) -> None:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å –±–æ–ª—å—à–∏–º–∏ –Ω–∞–±–æ—Ä–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            from src.vacancies.models import Vacancy, Employer

            # –°–æ–∑–¥–∞–µ–º –±–æ–ª—å—à–æ–π —Å–ø–∏—Å–æ–∫ –≤–∞–∫–∞–Ω—Å–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            employer = Employer("Test Company", "123")
            vacancies = []

            for i in range(1000):
                vacancy = Vacancy(
                    f"Developer {i}",
                    employer,
                    f"https://test.com/vacancy/{i}"
                )
                vacancies.append(vacancy)

            assert len(vacancies) == 1000
            assert all(isinstance(v, Vacancy) for v in vacancies)

        except ImportError:
            pytest.skip("Vacancy models not found")

    def test_unicode_handling(self) -> None:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Unicode –¥–∞–Ω–Ω—ã—Ö"""
        try:
            from src.utils.data_normalizers import DataNormalizer

            normalizer = DataNormalizer()

            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–æ–¥–∏—Ä–æ–≤–æ–∫
            unicode_data = {
                'title': '–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ Python',
                'description': '–†–∞–±–æ—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –∏ –º–∞—à–∏–Ω–Ω—ã–º –æ–±—É—á–µ–Ω–∏–µ–º üöÄ',
                'company': '–¢–µ—Ö–ö–æ–º–ø–∞–Ω–∏—è ‚Ññ1'
            }

            if hasattr(normalizer, 'normalize_text'):
                for key, value in unicode_data.items():
                    result = normalizer.normalize_text(value)
                    assert isinstance(result, str)

        except ImportError:
            pytest.skip("DataNormalizer module not found")


class TestPerformanceOptimization:
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""

    def test_caching_performance(self) -> None:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            from src.utils.cache import FileCache

            # –ú–æ–∫–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –∏ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –¥–∏—Å–∫
            with patch('pathlib.Path.exists', return_value=False):
                with patch('pathlib.Path.mkdir') as mock_mkdir:
                    with patch('builtins.open', mock_open()) as mock_file_open:
                        with patch('tempfile.TemporaryDirectory') as mock_temp:
                            mock_temp.return_value.__enter__.return_value = '/mock/temp'

                            cache = FileCache('/mock/cache')
                            assert cache is not None

                            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
                            for i in range(100):
                                params = {"query": f"test{i}"}
                                data = {"result": f"data{i}"}

                                if hasattr(cache, 'save_response'):
                                    cache.save_response(f"test{i}", params, data)
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ mkdir –Ω–µ –≤—ã–∑—ã–≤–∞–ª—Å—è
                            mock_mkdir.assert_not_called()
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ open –Ω–µ –≤—ã–∑—ã–≤–∞–ª—Å—è
                            mock_file_open.assert_not_called()

        except ImportError:
            pytest.skip("FileCache module not found")

    def test_memory_usage_optimization(self) -> None:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏"""
        try:
            from src.storage.services.deduplication_service import DeduplicationService

            service = DeduplicationService()

            # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏
            duplicate_data = [
                {'id': '1', 'title': 'Python Dev'} for _ in range(1000)
            ]

            if hasattr(service, 'remove_duplicates'):
                result = service.remove_duplicates(duplicate_data)
                assert isinstance(result, list)
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç
                if result:
                    assert len(result) <= len(duplicate_data)

        except ImportError:
            pytest.skip("DeduplicationService module not found")


class TestIntegrationScenarios:
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –ë–ï–ó –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""

    @patch('psycopg2.connect')
    @patch('requests.get')
    def test_end_to_end_workflow(self, mock_get, mock_connect) -> None:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞"""
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫–∏ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ workflow
        mock_response = Mock()
        mock_response.status_code = 200
        mock_response.json.return_value = {
            'items': [{'id': '123', 'name': 'Python Developer'}]
        }
        mock_get.return_value = mock_response

        mock_connection = Mock()
        mock_cursor = Mock()
        mock_connection.cursor.return_value = mock_cursor
        mock_connect.return_value = mock_connection

        try:
            from src.api_modules.hh_api import HeadHunterAPI
            from src.storage.db_manager import DBManager

            # –¢–µ—Å—Ç–∏—Ä—É–µ–º workflow –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
            api = HeadHunterAPI()
            db = DBManager()

            assert api is not None
            assert db is not None

        except ImportError:
            pytest.skip("Integration modules not found")

    @patch('builtins.input', return_value='0')
    @patch('builtins.print')
    def test_user_interaction_workflow(self, mock_print, mock_input) -> None:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ workflow –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
        try:
            from src.user_interface import main

            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–ª–∞–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é —Å –º–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –≤–≤–æ–¥–æ–º
            with patch('sys.exit'):
                main()

        except ImportError:
            pytest.skip("Main interface module not found")


class TestDataValidation:
    """–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö"""

    def test_salary_validation(self) -> None:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∑–∞—Ä–ø–ª–∞—Ç—ã"""
        try:
            from src.utils.salary import Salary

            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            invalid_data_sets = [
                None,
                {},
                {'from': 'invalid'},
                {'to': -1000},
                {'currency': 123}
            ]

            for invalid_data in invalid_data_sets:
                salary = Salary(invalid_data)
                assert salary is not None  # –ö–ª–∞—Å—Å –¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ

        except ImportError:
            pytest.skip("Salary module not found")

    def test_vacancy_validation(self) -> None:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤–∞–∫–∞–Ω—Å–∏–π"""
        try:
            from src.vacancies.models import Vacancy, Employer

            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            employer = Employer("", "")  # –ü—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ
            vacancy = Vacancy("", employer, "")  # –ü—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ

            assert vacancy is not None
            assert vacancy.employer is not None

        except ImportError:
            pytest.skip("Vacancy models not found")