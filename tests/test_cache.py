
"""
–¢–µ—Å—Ç—ã –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è API
"""

import pytest
import tempfile
import os
from unittest.mock import patch, Mock
from src.utils.cache import FileCache


class TestFileCache:
    """–¢–µ—Å—Ç—ã –¥–ª—è CacheManager"""

    @pytest.fixture
    def temp_cache_dir(self):
        """–°–æ–∑–¥–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∫—ç—à–∞"""
        with tempfile.TemporaryDirectory() as temp_dir:
            yield temp_dir

    @pytest.fixture
    def file_cache(self, temp_cache_dir):
        """–°–æ–∑–¥–∞–µ—Ç FileCache —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π"""
        return FileCache(cache_dir=temp_cache_dir)

    def test_cache_initialization(self, file_cache, temp_cache_dir):
        """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫—ç—à–∞"""
        assert str(file_cache.cache_dir) == temp_cache_dir
        assert file_cache.cache_dir.exists()

    def test_generate_params_hash(self, file_cache):
        """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ö–µ—à–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        params = {'text': 'python', 'area': '1', 'per_page': '20'}
        key = file_cache._generate_params_hash(params)
        
        assert isinstance(key, str)
        assert len(key) > 0
        # –•–µ—à –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º
        key2 = file_cache._generate_params_hash(params)
        assert key == key2

    def test_generate_params_hash_different_params(self, file_cache):
        """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–∞–∑–Ω—ã—Ö —Ö–µ—à–µ–π –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        params1 = {'text': 'python', 'area': '1'}
        params2 = {'text': 'java', 'area': '1'}
        
        key1 = file_cache._generate_params_hash(params1)
        key2 = file_cache._generate_params_hash(params2)
        
        assert key1 != key2

    def test_save_and_load_response(self, file_cache):
        """–¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–≤–µ—Ç–∞"""
        source = 'hh'
        params = {'text': 'python', 'area': '1'}
        data = {'items': [{'name': 'Python Developer', 'id': '1'}], 'found': 1}

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
        file_cache.save_response(source, params, data)

        # –ü–æ–ª—É—á–∞–µ–º –∏–∑ –∫—ç—à–∞
        cached_response = file_cache.load_response(source, params)
        
        assert cached_response is not None
        assert cached_response['data']['items'][0]['name'] == 'Python Developer'
        assert cached_response['data']['found'] == 1
        assert cached_response['meta']['params'] == params

    def test_load_response_nonexistent(self, file_cache):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫—ç—à–∞"""
        source = 'hh'
        params = {'text': 'nonexistent', 'area': '1'}
        
        cached_response = file_cache.load_response(source, params)
        assert cached_response is None

    def test_clear_cache_source(self, file_cache):
        """–¢–µ—Å—Ç –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞"""
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—ç—à –¥–ª—è HH
        hh_params = {'text': 'python', 'area': '1'}
        hh_data = {'items': []}
        file_cache.save_response('hh', hh_params, hh_data)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—ç—à –¥–ª—è SJ
        sj_params = {'text': 'python', 'area': '1'}
        sj_data = {'items': []}
        file_cache.save_response('sj', sj_params, sj_data)

        # –û—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ HH
        file_cache.clear('hh')

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ HH –æ—á–∏—â–µ–Ω, –∞ SJ –æ—Å—Ç–∞–ª—Å—è
        assert file_cache.load_response('hh', hh_params) is None
        assert file_cache.load_response('sj', sj_params) is not None

    def test_clear_cache_all(self, file_cache):
        """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞"""
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—ç—à –¥–ª—è –æ–±–æ–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        hh_params = {'text': 'python', 'area': '1'}
        file_cache.save_response('hh', hh_params, {'items': []})
        
        sj_params = {'text': 'python', 'area': '1'}
        file_cache.save_response('sj', sj_params, {'items': []})

        # –û—á–∏—â–∞–µ–º –≤–µ—Å—å –∫—ç—à
        file_cache.clear()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±–∞ –æ—á–∏—â–µ–Ω—ã
        assert file_cache.load_response('hh', hh_params) is None
        assert file_cache.load_response('sj', sj_params) is None

    def test_cache_with_complex_params(self, file_cache):
        """–¢–µ—Å—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ —Å–ª–æ–∂–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
        source = 'hh'
        params = {
            'text': 'python developer',
            'area': ['1', '2'],  # —Å–ø–∏—Å–æ–∫
            'salary': 100000,
            'experience': 'between1And3',
            'employment': 'full'
        }
        data = {'items': [], 'found': 0}

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –ø–æ–ª—É—á–∞–µ–º
        file_cache.save_response(source, params, data)
        cached_response = file_cache.load_response(source, params)
        
        assert cached_response is not None
        assert cached_response['data']['found'] == 0

    def test_cache_file_corrupted(self, file_cache, temp_cache_dir):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –∫—ç—à–∞"""
        source = 'hh'
        params = {'text': 'python', 'area': '1'}
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∫—ç—à–∞
        cache_key = file_cache._generate_params_hash(params)
        cache_file_path = os.path.join(temp_cache_dir, f"{source}_{cache_key}.json")
        
        with open(cache_file_path, 'w') as f:
            f.write("invalid json content")

        # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –∫—ç—à –¥–æ–ª–∂–Ω–∞ –≤–µ—Ä–Ω—É—Ç—å None
        cached_response = file_cache.load_response(source, params)
        assert cached_response is None

    def test_cache_unicode_support(self, file_cache):
        """–¢–µ—Å—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ Unicode –≤ –∫—ç—à–µ"""
        source = 'hh'
        params = {'text': '—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ python üêç', 'area': '–ú–æ—Å–∫–≤–∞'}
        data = {
            'items': [
                {'name': 'Senior Python —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ üë®‚Äçüíª', 'id': '1'}
            ],
            'found': 1
        }

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –ø–æ–ª—É—á–∞–µ–º
        file_cache.save_response(source, params, data)
        cached_response = file_cache.load_response(source, params)
        
        assert cached_response is not None
        assert cached_response['data']['items'][0]['name'] == 'Senior Python —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ üë®‚Äçüíª'
