
"""
–¢–µ—Å—Ç—ã –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è API
"""

import pytest
import tempfile
import os
from unittest.mock import patch, Mock
from src.utils.cache import CacheManager


class TestCacheManager:
    """–¢–µ—Å—Ç—ã –¥–ª—è CacheManager"""

    @pytest.fixture
    def temp_cache_dir(self):
        """–°–æ–∑–¥–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∫—ç—à–∞"""
        with tempfile.TemporaryDirectory() as temp_dir:
            yield temp_dir

    @pytest.fixture
    def cache_manager(self, temp_cache_dir):
        """–°–æ–∑–¥–∞–µ—Ç CacheManager —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π"""
        return CacheManager(base_cache_dir=temp_cache_dir)

    def test_cache_initialization(self, cache_manager, temp_cache_dir):
        """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫—ç—à–∞"""
        assert cache_manager.base_cache_dir == temp_cache_dir
        assert os.path.exists(os.path.join(temp_cache_dir, 'hh'))
        assert os.path.exists(os.path.join(temp_cache_dir, 'sj'))

    def test_get_cache_key(self, cache_manager):
        """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–∞ –∫—ç—à–∞"""
        params = {'text': 'python', 'area': '1', 'per_page': '20'}
        key = cache_manager._get_cache_key(params)
        
        assert isinstance(key, str)
        assert len(key) > 0
        # –ö–ª—é—á –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º
        key2 = cache_manager._get_cache_key(params)
        assert key == key2

    def test_get_cache_key_different_params(self, cache_manager):
        """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–∞–∑–Ω—ã—Ö –∫–ª—é—á–µ–π –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        params1 = {'text': 'python', 'area': '1'}
        params2 = {'text': 'java', 'area': '1'}
        
        key1 = cache_manager._get_cache_key(params1)
        key2 = cache_manager._get_cache_key(params2)
        
        assert key1 != key2

    def test_save_and_get_cache(self, cache_manager):
        """–¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—ç—à–∞"""
        source = 'hh'
        params = {'text': 'python', 'area': '1'}
        data = {'items': [{'name': 'Python Developer', 'id': '1'}], 'found': 1}

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
        cache_manager.save_cache(source, params, data)

        # –ü–æ–ª—É—á–∞–µ–º –∏–∑ –∫—ç—à–∞
        cached_data = cache_manager.get_cache(source, params)
        
        assert cached_data is not None
        assert cached_data['items'][0]['name'] == 'Python Developer'
        assert cached_data['found'] == 1

    def test_get_cache_nonexistent(self, cache_manager):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫—ç—à–∞"""
        source = 'hh'
        params = {'text': 'nonexistent', 'area': '1'}
        
        cached_data = cache_manager.get_cache(source, params)
        assert cached_data is None

    def test_is_cache_valid_fresh(self, cache_manager):
        """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Å–≤–µ–∂–µ–≥–æ –∫—ç—à–∞"""
        source = 'hh'
        params = {'text': 'python', 'area': '1'}
        data = {'items': []}

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—ç—à
        cache_manager.save_cache(source, params, data)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∞–ª–∏–¥–µ–Ω)
        assert cache_manager.is_cache_valid(source, params) is True

    @patch('time.time')
    def test_is_cache_valid_expired(self, mock_time, cache_manager):
        """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–æ–≥–æ –∫—ç—à–∞"""
        source = 'hh'
        params = {'text': 'python', 'area': '1'}
        data = {'items': []}

        # –ò–º–∏—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –∫—ç—à–∞
        mock_time.return_value = 1000
        cache_manager.save_cache(source, params, data)

        # –ò–º–∏—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è —á–µ—Ä–µ–∑ —á–∞—Å + 1 –º–∏–Ω—É—Ç—É
        mock_time.return_value = 1000 + 3661  # 1 —á–∞—Å 1 –º–∏–Ω—É—Ç–∞
        
        assert cache_manager.is_cache_valid(source, params) is False

    def test_clear_cache_source(self, cache_manager):
        """–¢–µ—Å—Ç –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞"""
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—ç—à –¥–ª—è HH
        hh_params = {'text': 'python', 'area': '1'}
        hh_data = {'items': []}
        cache_manager.save_cache('hh', hh_params, hh_data)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—ç—à –¥–ª—è SJ
        sj_params = {'text': 'python', 'area': '1'}
        sj_data = {'items': []}
        cache_manager.save_cache('sj', sj_params, sj_data)

        # –û—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ HH
        cache_manager.clear_cache('hh')

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ HH –æ—á–∏—â–µ–Ω, –∞ SJ –æ—Å—Ç–∞–ª—Å—è
        assert cache_manager.get_cache('hh', hh_params) is None
        assert cache_manager.get_cache('sj', sj_params) is not None

    def test_clear_cache_all(self, cache_manager):
        """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞"""
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—ç—à –¥–ª—è –æ–±–æ–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        hh_params = {'text': 'python', 'area': '1'}
        cache_manager.save_cache('hh', hh_params, {'items': []})
        
        sj_params = {'text': 'python', 'area': '1'}
        cache_manager.save_cache('sj', sj_params, {'items': []})

        # –û—á–∏—â–∞–µ–º –≤–µ—Å—å –∫—ç—à
        cache_manager.clear_cache()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±–∞ –æ—á–∏—â–µ–Ω—ã
        assert cache_manager.get_cache('hh', hh_params) is None
        assert cache_manager.get_cache('sj', sj_params) is None

    def test_get_cache_stats(self, cache_manager):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞"""
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π –≤ –∫—ç—à
        for i in range(3):
            params = {'text': f'query_{i}', 'area': '1'}
            data = {'items': [f'item_{i}'], 'found': 1}
            cache_manager.save_cache('hh', params, data)

        for i in range(2):
            params = {'text': f'query_{i}', 'area': '2'}
            data = {'items': [f'item_{i}'], 'found': 1}
            cache_manager.save_cache('sj', params, data)

        stats = cache_manager.get_cache_stats()
        
        assert stats['hh']['count'] == 3
        assert stats['sj']['count'] == 2
        assert 'total_size' in stats['hh']
        assert 'total_size' in stats['sj']

    def test_cache_with_complex_params(self, cache_manager):
        """–¢–µ—Å—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ —Å–ª–æ–∂–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
        source = 'hh'
        params = {
            'text': 'python developer',
            'area': ['1', '2'],  # —Å–ø–∏—Å–æ–∫
            'salary': 100000,
            'experience': 'between1And3',
            'employment': 'full'
        }
        data = {'items': [], 'found': 0}

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –ø–æ–ª—É—á–∞–µ–º
        cache_manager.save_cache(source, params, data)
        cached_data = cache_manager.get_cache(source, params)
        
        assert cached_data is not None
        assert cached_data['found'] == 0

    def test_cache_file_corrupted(self, cache_manager, temp_cache_dir):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –∫—ç—à–∞"""
        source = 'hh'
        params = {'text': 'python', 'area': '1'}
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∫—ç—à–∞
        cache_key = cache_manager._get_cache_key(params)
        cache_file_path = os.path.join(temp_cache_dir, source, f"{cache_key}.json")
        os.makedirs(os.path.dirname(cache_file_path), exist_ok=True)
        
        with open(cache_file_path, 'w') as f:
            f.write("invalid json content")

        # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –∫—ç—à –¥–æ–ª–∂–Ω–∞ –≤–µ—Ä–Ω—É—Ç—å None
        cached_data = cache_manager.get_cache(source, params)
        assert cached_data is None

    def test_cache_directory_permissions(self, temp_cache_dir):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–±–ª–µ–º —Å –ø—Ä–∞–≤–∞–º–∏ –¥–æ—Å—Ç—É–ø–∞"""
        # –≠—Ç–æ—Ç —Ç–µ—Å—Ç –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ Windows
        if os.name == 'nt':
            pytest.skip("–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –Ω–∞ Windows")

        # –î–µ–ª–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ–π –¥–ª—è –∑–∞–ø–∏—Å–∏
        cache_dir = os.path.join(temp_cache_dir, 'readonly')
        os.makedirs(cache_dir, mode=0o555)  # —Ç–æ–ª—å–∫–æ —á—Ç–µ–Ω–∏–µ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        
        try:
            cache_manager = CacheManager(base_cache_dir=cache_dir)
            
            # –ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
            params = {'text': 'python'}
            data = {'items': []}
            
            # –ù–µ –¥–æ–ª–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, –Ω–æ –∏ –Ω–µ –¥–æ–ª–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å
            cache_manager.save_cache('hh', params, data)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫—ç—à –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª—Å—è
            cached_data = cache_manager.get_cache('hh', params)
            assert cached_data is None
            
        finally:
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            os.chmod(cache_dir, 0o755)

    def test_cache_unicode_support(self, cache_manager):
        """–¢–µ—Å—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ Unicode –≤ –∫—ç—à–µ"""
        source = 'hh'
        params = {'text': '—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ python üêç', 'area': '–ú–æ—Å–∫–≤–∞'}
        data = {
            'items': [
                {'name': 'Senior Python —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ üë®‚Äçüíª', 'id': '1'}
            ],
            'found': 1
        }

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –ø–æ–ª—É—á–∞–µ–º
        cache_manager.save_cache(source, params, data)
        cached_data = cache_manager.get_cache(source, params)
        
        assert cached_data is not None
        assert cached_data['items'][0]['name'] == 'Senior Python —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ üë®‚Äçüíª'
