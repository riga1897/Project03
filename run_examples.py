#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–≤

–ó–∞–ø—É—Å–∫: python run_examples.py
"""

import asyncio
import logging
import sys
from typing import Dict, Any

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫—Ä–∞—Å–∏–≤–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
class ColoredFormatter(logging.Formatter):
    """–¶–≤–µ—Ç–Ω–æ–π —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è –ª–æ–≥–æ–≤"""
    
    COLORS = {
        'DEBUG': '\033[36m',    # Cyan
        'INFO': '\033[32m',     # Green  
        'WARNING': '\033[33m',  # Yellow
        'ERROR': '\033[31m',    # Red
        'CRITICAL': '\033[35m', # Magenta
    }
    RESET = '\033[0m'
    
    def format(self, record):
        log_color = self.COLORS.get(record.levelname, '')
        record.levelname = f"{log_color}{record.levelname}{self.RESET}"
        return super().format(record)

def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫—Ä–∞—Å–∏–≤–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    # –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä
    formatter = ColoredFormatter(
        '%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        datefmt='%H:%M:%S'
    )
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º handler
    handler = logging.StreamHandler(sys.stdout)
    handler.setFormatter(formatter)
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º root logger
    root_logger = logging.getLogger()
    root_logger.setLevel(logging.INFO)
    root_logger.addHandler(handler)

def print_header(title: str, width: int = 80):
    """–ü–µ—á–∞—Ç–∞–µ—Ç –∫—Ä–∞—Å–∏–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫"""
    print("\n" + "=" * width)
    print(f"üéØ {title}".center(width))
    print("=" * width)

def print_section(title: str):
    """–ü–µ—á–∞—Ç–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏"""
    print(f"\nüî∏ {title}")
    print("-" * (len(title) + 3))

async def run_basic_examples():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–∞–∑–æ–≤—ã–µ –ø—Ä–∏–º–µ—Ä—ã"""
    print_header("–ë–ê–ó–û–í–´–ï –ü–ê–¢–¢–ï–†–ù–´ –ö–û–û–†–î–ò–ù–ê–¢–û–†–û–í")
    
    try:
        from coordinator_patterns import ServiceCoordinator, PipelineCoordinator, CoordinatorFactory
        
        print_section("Service Coordinator")
        
        # –ü—Ä–æ—Å—Ç–æ–π –ø—Ä–∏–º–µ—Ä —Å–µ—Ä–≤–∏—Å-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞
        class TestService:
            def process(self, data):
                return f"Processed: {data}"
        
        coordinator = CoordinatorFactory.create_coordinator('service')
        coordinator.register_service('test', TestService())
        
        result = await coordinator.coordinate('process', 'test_data')
        print(f"‚úÖ Service coordination result: {result.success}")
        
        print_section("Pipeline Coordinator")
        
        # –ü—Ä–∏–º–µ—Ä pipeline
        pipeline = CoordinatorFactory.create_coordinator('pipeline')
        
        def step1(data, context):
            print(f"  üìù Step 1: Validating {data}")
            return f"validated_{data}"
        
        def step2(data, context):
            print(f"  ‚ö° Step 2: Processing {data}")  
            return f"processed_{data}"
        
        pipeline.add_step(step1)
        pipeline.add_step(step2)
        
        result = await pipeline.coordinate("raw_data")
        print(f"‚úÖ Pipeline result: {result.data}")
        
    except ImportError as e:
        print(f"‚ùå Cannot import basic patterns: {e}")

async def run_practical_examples():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã"""
    print_header("–ü–†–ê–ö–¢–ò–ß–ï–°–ö–ò–ï –ü–†–ò–ú–ï–†–´")
    
    try:
        from coordinator_examples import (
            example_order_processing,
            example_data_pipeline, 
            example_microservices
        )
        
        print_section("E-commerce Order Processing")
        await example_order_processing()
        
        print_section("Data Processing Pipeline")
        await example_data_pipeline()
        
        print_section("Microservices Coordination")
        await example_microservices()
        
    except ImportError as e:
        print(f"‚ùå Cannot import practical examples: {e}")
    except Exception as e:
        print(f"‚ùå Error in practical examples: {e}")

async def run_best_practices():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –ª—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏"""
    print_header("–õ–£–ß–®–ò–ï –ü–†–ê–ö–¢–ò–ö–ò")
    
    try:
        from coordinator_best_practices import example_best_practices
        
        await example_best_practices()
        
    except ImportError as e:
        print(f"‚ùå Cannot import best practices: {e}")
    except Exception as e:
        print(f"‚ùå Error in best practices: {e}")

async def run_di_integration():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å DI"""
    print_header("DEPENDENCY INJECTION –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø")
    
    try:
        from dependency_injection_integration import demonstrate_di_integration
        
        await demonstrate_di_integration()
        
    except ImportError as e:
        print(f"‚ùå Cannot import DI integration: {e}")
    except Exception as e:
        print(f"‚ùå Error in DI integration: {e}")

def show_menu():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é"""
    print_header("–ö–û–û–†–î–ò–ù–ê–¢–û–†–´ –í PYTHON - –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø")
    
    print("\nüéÆ –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–º–µ—Ä –¥–ª—è –∑–∞–ø—É—Å–∫–∞:")
    print("1. üìê –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–≤")
    print("2. üõí –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã (E-commerce, Pipeline, Microservices)")
    print("3. üèÜ –õ—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ (Circuit Breaker, Metrics, Retry)")
    print("4. üîå –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Dependency Injection")
    print("5. üéØ –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ –ø—Ä–∏–º–µ—Ä—ã")
    print("0. ‚ùå –í—ã—Ö–æ–¥")
    
    return input("\nüëâ –í–∞—à –≤—ã–±–æ—Ä: ").strip()

async def run_all_examples():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ –ø—Ä–∏–º–µ—Ä—ã –ø–æ–¥—Ä—è–¥"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø—Ä–∏–º–µ—Ä–æ–≤...")
    
    await run_basic_examples()
    await run_practical_examples() 
    await run_best_practices()
    await run_di_integration()
    
    print_header("‚ú® –í–°–ï –ü–†–ò–ú–ï–†–´ –ó–ê–í–ï–†–®–ï–ù–´ –£–°–ü–ï–®–ù–û!")
    print("üìñ –ò–∑—É—á–∏—Ç–µ –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–ª—è –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è")
    print("üìö –ß–∏—Ç–∞–π—Ç–µ COORDINATOR_GUIDE.md –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    setup_logging()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–µ—Ä–µ–¥–∞–Ω—ã –ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    if len(sys.argv) > 1:
        if sys.argv[1] == "--all":
            await run_all_examples()
            return
        elif sys.argv[1] == "--help":
            print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
            print("  python run_examples.py        # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é")
            print("  python run_examples.py --all  # –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø—Ä–∏–º–µ—Ä–æ–≤")
            print("  python run_examples.py --help # –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å")
            return
    
    # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
    while True:
        try:
            choice = show_menu()
            
            if choice == "0":
                print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            elif choice == "1":
                await run_basic_examples()
            elif choice == "2":
                await run_practical_examples()
            elif choice == "3":
                await run_best_practices()
            elif choice == "4":
                await run_di_integration()
            elif choice == "5":
                await run_all_examples()
                break
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                
            input("\n‚è∏Ô∏è –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
            
        except KeyboardInterrupt:
            print("\nüëã –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –ø–æ Ctrl+C")
            break
        except Exception as e:
            print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            input("\n‚è∏Ô∏è –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)