
#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –ø–æ–ª—è company_id –≤ —Ç–∞–±–ª–∏—Ü–µ vacancies
–ü—Ä–∏–≤–æ–¥–∏—Ç —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –∫ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –≤–Ω–µ—à–Ω–∏–º –∫–ª—é—á–æ–º
"""

import psycopg2
import logging
from src.utils.env_loader import EnvLoader

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def migrate_company_id():
    """–ú–∏–≥—Ä–∞—Ü–∏—è –ø–æ–ª—è company_id –∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ —Å –≤–Ω–µ—à–Ω–∏–º –∫–ª—é—á–æ–º"""
    
    try:
        connection = psycopg2.connect(
            host=EnvLoader.get_env_var('PGHOST', 'localhost'),
            port=EnvLoader.get_env_var('PGPORT', '5432'),
            database=EnvLoader.get_env_var('PGDATABASE', 'Project03'),
            user=EnvLoader.get_env_var('PGUSER', 'postgres'),
            password=EnvLoader.get_env_var('PGPASSWORD', '')
        )
        
        cursor = connection.cursor()
        
        print("üîß –ú–ò–ì–†–ê–¶–ò–Ø COMPANY_ID")
        print("=" * 50)
        
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        cursor.execute("""
            SELECT column_name, data_type 
            FROM information_schema.columns 
            WHERE table_name = 'vacancies' AND column_name = 'company_id'
        """)
        
        result = cursor.fetchone()
        if result:
            print(f"–¢–µ–∫—É—â–∏–π —Ç–∏–ø company_id –≤ vacancies: {result[1]}")
        
        # 2. –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –≤–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
        cursor.execute("""
            SELECT constraint_name 
            FROM information_schema.table_constraints
            WHERE table_name = 'vacancies' 
            AND constraint_type = 'FOREIGN KEY'
            AND constraint_name LIKE '%company%'
        """)
        
        constraints = cursor.fetchall()
        for constraint in constraints:
            print(f"–£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –≤–Ω–µ—à–Ω–∏–π –∫–ª—é—á: {constraint[0]}")
            cursor.execute(f"ALTER TABLE vacancies DROP CONSTRAINT {constraint[0]}")
        
        # 3. –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ: —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º company_id = NULL —Ç–∞–º, –≥–¥–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç id –≤ companies
        print("–û—á–∏—â–∞–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è company_id...")
        cursor.execute("""
            UPDATE vacancies 
            SET company_id = NULL 
            WHERE company_id::text NOT IN (
                SELECT id::text FROM companies WHERE id IS NOT NULL
            )
        """)
        
        updated_rows = cursor.rowcount
        print(f"–û—á–∏—â–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π: {updated_rows}")
        
        # 4. –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ company_id –∏–º–µ–µ—Ç —Ç–∏–ø INTEGER
        cursor.execute("""
            SELECT data_type 
            FROM information_schema.columns 
            WHERE table_name = 'vacancies' AND column_name = 'company_id'
        """)
        
        current_type = cursor.fetchone()[0]
        if current_type != 'integer':
            print(f"–ü—Ä–∏–≤–æ–¥–∏–º —Ç–∏–ø company_id —Å {current_type} –∫ integer...")
            # –°–Ω–∞—á–∞–ª–∞ –¥–µ–ª–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
            cursor.execute("ALTER TABLE vacancies ADD COLUMN company_id_backup TEXT")
            cursor.execute("UPDATE vacancies SET company_id_backup = company_id::text")
            
            # –£–¥–∞–ª—è–µ–º –∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –∫–æ–ª–æ–Ω–∫—É
            cursor.execute("ALTER TABLE vacancies DROP COLUMN company_id CASCADE")
            cursor.execute("ALTER TABLE vacancies ADD COLUMN company_id INTEGER")
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            cursor.execute("""
                UPDATE vacancies 
                SET company_id = CASE 
                    WHEN company_id_backup ~ '^[0-9]+$' THEN company_id_backup::integer 
                    ELSE NULL 
                END
            """)
            
            cursor.execute("ALTER TABLE vacancies DROP COLUMN company_id_backup")
            print("‚úÖ –¢–∏–ø company_id –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ INTEGER")
        
        # 5. –°–æ–∑–¥–∞–µ–º –≤–Ω–µ—à–Ω–∏–π –∫–ª—é—á
        print("–°–æ–∑–¥–∞–µ–º –≤–Ω–µ—à–Ω–∏–π –∫–ª—é—á...")
        cursor.execute("""
            ALTER TABLE vacancies 
            ADD CONSTRAINT fk_vacancies_company_id 
            FOREIGN KEY (company_id) REFERENCES companies(id)
            ON DELETE SET NULL
        """)
        
        print("‚úÖ –í–Ω–µ—à–Ω–∏–π –∫–ª—é—á —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        cursor.execute("""
            SELECT 
                COUNT(*) as total_vacancies,
                COUNT(company_id) as with_company_id
            FROM vacancies
        """)
        
        stats = cursor.fetchone()
        print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û–°–õ–ï –ú–ò–ì–†–ê–¶–ò–ò:")
        print(f"–í—Å–µ–≥–æ –≤–∞–∫–∞–Ω—Å–∏–π: {stats[0]}")
        print(f"–° company_id: {stats[1]}")
        print(f"–ë–µ–∑ company_id: {stats[0] - stats[1]}")
        
        connection.commit()
        print("\n‚úÖ –ú–ò–ì–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        connection.rollback()
        raise
    finally:
        if 'cursor' in locals():
            cursor.close()
        if 'connection' in locals():
            connection.close()

if __name__ == "__main__":
    migrate_company_id()
